Search.setIndex({"docnames": ["autogen/cvnets", "autogen/cvnets.anchor_generator", "autogen/cvnets.image_projection_layers", "autogen/cvnets.layers", "autogen/cvnets.layers.activation", "autogen/cvnets.layers.normalization", "autogen/cvnets.matcher_det", "autogen/cvnets.misc", "autogen/cvnets.misc.third_party", "autogen/cvnets.models", "autogen/cvnets.models.audio_classification", "autogen/cvnets.models.classification", "autogen/cvnets.models.classification.config", "autogen/cvnets.models.detection", "autogen/cvnets.models.detection.utils", "autogen/cvnets.models.multi_modal_img_text", "autogen/cvnets.models.segmentation", "autogen/cvnets.models.segmentation.heads", "autogen/cvnets.modules", "autogen/cvnets.neural_augmentor", "autogen/cvnets.neural_augmentor.utils", "autogen/cvnets.text_encoders", "autogen/data", "autogen/data.collate_fns", "autogen/data.datasets", "autogen/data.datasets.audio_classification", "autogen/data.datasets.classification", "autogen/data.datasets.detection", "autogen/data.datasets.multi_modal_img_text", "autogen/data.datasets.multi_modal_img_text.zero_shot", "autogen/data.datasets.segmentation", "autogen/data.datasets.utils", "autogen/data.loader", "autogen/data.sampler", "autogen/data.text_tokenizer", "autogen/data.transforms", "autogen/data.transforms.audio_aux", "autogen/data.video_reader", "autogen/engine", "autogen/engine.detection_utils", "autogen/engine.segmentation_utils", "autogen/loss_fn", "autogen/loss_fn.classification", "autogen/loss_fn.detection", "autogen/loss_fn.distillation", "autogen/loss_fn.multi_modal_img_text", "autogen/loss_fn.segmentation", "autogen/loss_fn.utils", "autogen/loss_landscape", "autogen/metrics", "autogen/optim", "autogen/optim.scheduler", "autogen/options", "autogen/utils", "autogen/utils.third_party", "data_samplers", "en/general/README-config-files-intro", "en/general/README-directory-structure", "en/general/README-model-zoo", "en/general/README-new-dataset", "en/general/README-pytorch-to-coreml", "en/models/classification/README-classification-tutorial", "en/models/classification/README-mobilenets", "en/models/classification/README-mobilevit", "en/models/classification/README-mobilevit-v2", "en/models/classification/README-resnet", "en/models/classification/README-robustness-evaluations", "en/models/detection/README-SSDLite-mobilevit-v2", "en/models/detection/README-detection-SSD-tutorial", "en/models/segmentation/README-segmentation-deeplabv3-tutorial", "en/models/segmentation/README-segmentation-mobilevit-v2", "getting_started", "how_to", "index", "installation", "models", "modules", "sample_recipes"], "filenames": ["autogen/cvnets.rst", "autogen/cvnets.anchor_generator.rst", "autogen/cvnets.image_projection_layers.rst", "autogen/cvnets.layers.rst", "autogen/cvnets.layers.activation.rst", "autogen/cvnets.layers.normalization.rst", "autogen/cvnets.matcher_det.rst", "autogen/cvnets.misc.rst", "autogen/cvnets.misc.third_party.rst", "autogen/cvnets.models.rst", "autogen/cvnets.models.audio_classification.rst", "autogen/cvnets.models.classification.rst", "autogen/cvnets.models.classification.config.rst", "autogen/cvnets.models.detection.rst", "autogen/cvnets.models.detection.utils.rst", "autogen/cvnets.models.multi_modal_img_text.rst", "autogen/cvnets.models.segmentation.rst", "autogen/cvnets.models.segmentation.heads.rst", "autogen/cvnets.modules.rst", "autogen/cvnets.neural_augmentor.rst", "autogen/cvnets.neural_augmentor.utils.rst", "autogen/cvnets.text_encoders.rst", "autogen/data.rst", "autogen/data.collate_fns.rst", "autogen/data.datasets.rst", "autogen/data.datasets.audio_classification.rst", "autogen/data.datasets.classification.rst", "autogen/data.datasets.detection.rst", "autogen/data.datasets.multi_modal_img_text.rst", "autogen/data.datasets.multi_modal_img_text.zero_shot.rst", "autogen/data.datasets.segmentation.rst", "autogen/data.datasets.utils.rst", "autogen/data.loader.rst", "autogen/data.sampler.rst", "autogen/data.text_tokenizer.rst", "autogen/data.transforms.rst", "autogen/data.transforms.audio_aux.rst", "autogen/data.video_reader.rst", "autogen/engine.rst", "autogen/engine.detection_utils.rst", "autogen/engine.segmentation_utils.rst", "autogen/loss_fn.rst", "autogen/loss_fn.classification.rst", "autogen/loss_fn.detection.rst", "autogen/loss_fn.distillation.rst", "autogen/loss_fn.multi_modal_img_text.rst", "autogen/loss_fn.segmentation.rst", "autogen/loss_fn.utils.rst", "autogen/loss_landscape.rst", "autogen/metrics.rst", "autogen/optim.rst", "autogen/optim.scheduler.rst", "autogen/options.rst", "autogen/utils.rst", "autogen/utils.third_party.rst", "data_samplers.rst", "en/general/README-config-files-intro.md", "en/general/README-directory-structure.md", "en/general/README-model-zoo.md", "en/general/README-new-dataset.md", "en/general/README-pytorch-to-coreml.md", "en/models/classification/README-classification-tutorial.md", "en/models/classification/README-mobilenets.md", "en/models/classification/README-mobilevit.md", "en/models/classification/README-mobilevit-v2.md", "en/models/classification/README-resnet.md", "en/models/classification/README-robustness-evaluations.md", "en/models/detection/README-SSDLite-mobilevit-v2.md", "en/models/detection/README-detection-SSD-tutorial.md", "en/models/segmentation/README-segmentation-deeplabv3-tutorial.md", "en/models/segmentation/README-segmentation-mobilevit-v2.md", "getting_started.rst", "how_to.rst", "index.rst", "installation.rst", "models.md", "modules.rst", "sample_recipes.rst"], "titles": ["cvnets package", "cvnets.anchor_generator package", "cvnets.image_projection_layers package", "cvnets.layers package", "cvnets.layers.activation package", "cvnets.layers.normalization package", "cvnets.matcher_det package", "cvnets.misc package", "cvnets.misc.third_party package", "cvnets.models package", "cvnets.models.audio_classification package", "cvnets.models.classification package", "cvnets.models.classification.config package", "cvnets.models.detection package", "cvnets.models.detection.utils package", "cvnets.models.multi_modal_img_text package", "cvnets.models.segmentation package", "cvnets.models.segmentation.heads package", "cvnets.modules package", "cvnets.neural_augmentor package", "cvnets.neural_augmentor.utils package", "cvnets.text_encoders package", "data package", "data.collate_fns package", "data.datasets package", "data.datasets.audio_classification package", "data.datasets.classification package", "data.datasets.detection package", "data.datasets.multi_modal_img_text package", "data.datasets.multi_modal_img_text.zero_shot package", "data.datasets.segmentation package", "data.datasets.utils package", "data.loader package", "data.sampler package", "data.text_tokenizer package", "data.transforms package", "data.transforms.audio_aux package", "data.video_reader package", "engine package", "engine.detection_utils package", "engine.segmentation_utils package", "loss_fn package", "loss_fn.classification package", "loss_fn.detection package", "loss_fn.distillation package", "loss_fn.multi_modal_img_text package", "loss_fn.segmentation package", "loss_fn.utils package", "loss_landscape package", "metrics package", "optim package", "optim.scheduler package", "options package", "utils package", "utils.third_party package", "Data Samplers", "Config Files: Introduction and Walkthrough", "Directory Structure", "Model Zoo", "How to Create a New Dataset Type", "Converting models trained using CVNets to CoreML", "Training Classification Models on the ImageNet dataset", "Training MobileNets on the ImageNet dataset", "Training MobileViT on the ImageNet dataset", "Training MobileViTv2 Models", "Training ResNets on the ImageNet dataset", "Evaluating classification models on ImageNet distribution shift datasets", "Object detection using SSDLite on MS-COCO", "Object detection using SSDLite on MS-COCO", "Semantic Segmentation using DeepLabv3", "Semantic segmentation usng MobileViTv2", "Getting Started", "How To", "Welcome to CVNets documentation!", "Installation", "Available Models", "data", "Sample Recipes"], "terms": {"anchor_gener": [0, 57], "submodul": 0, "base_anchor_gener": 0, "baseanchorgener": [0, 1], "__init__": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55], "add_argu": [0, 1, 2, 3, 6, 9, 10, 11, 13, 15, 16, 17, 19, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 37, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 55], "num_anchors_per_o": [0, 1], "forward": [0, 1, 2, 3, 4, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 34, 41, 42, 43, 44, 45, 46, 53], "ssd_anchor_gener": 0, "ssdanchorgener": [0, 1], "arguments_anchor_gen": [0, 1], "build_anchor_gener": [0, 1], "image_projection_lay": 0, "attention_pool_2d": 0, "attentionpool2dhead": [0, 2], "reset_paramet": [0, 2, 3, 9, 15, 18, 21], "base_image_project": 0, "baseimageprojectionhead": [0, 2], "get_trainable_paramet": [0, 2, 3, 9, 11, 13, 15, 16, 17, 19, 21], "get_in_feature_dimens": [0, 2], "global_pool_2d": 0, "globalpool2d": [0, 2], "simple_projection_head": 0, "simpleimageprojectionhead": [0, 2], "arguments_image_projection_head": [0, 2], "build_image_projection_head": [0, 2], "layer": [0, 2, 7, 9, 11, 12, 13, 14, 16, 17, 18, 53, 56, 57], "activ": [0, 3, 18, 56], "gelu": [0, 3], "hard_sigmoid": [0, 3, 18], "hard_swish": [0, 3], "leaky_relu": [0, 3], "prelu": [0, 3], "relu": [0, 3, 7, 18, 56], "relu6": [0, 3], "sigmoid": [0, 3, 18], "swish": [0, 3], "tanh": [0, 3], "normal": [0, 3, 7, 9, 14, 18, 31, 35, 47, 53, 56], "batch_norm": [0, 3, 56], "group_norm": [0, 3], "instance_norm": [0, 3], "layer_norm": [0, 3, 18], "sync_batch_norm": [0, 3], "adaptive_pool": 0, "adaptiveavgpool2d": [0, 3], "base_lay": 0, "baselay": [0, 3, 18], "conv_lay": [0, 14], "conv2d": [0, 3, 7], "convlayer1d": [0, 3], "ndim": [0, 3], "module_cl": [0, 3], "convlayer2d": [0, 3, 18], "convlayer3d": [0, 3], "transposeconvlayer2d": [0, 3], "normactlay": [0, 3], "separableconv1d": [0, 3], "conv_layer_cl": [0, 3], "separableconv2d": [0, 3, 18], "separableconv3d": [0, 3], "dropout": [0, 11, 18], "dropout2d": [0, 3], "embed": [0, 11, 18, 21, 49], "flatten": [0, 30], "global_pool": [0, 56], "globalpool": [0, 3], "pool_typ": [0, 3], "ident": [0, 10, 19, 20, 31, 54], "linear_attent": 0, "linearselfattent": [0, 3], "visualize_context_scor": [0, 3], "linear_lay": 0, "linearlay": [0, 3], "reset_param": [0, 3], "grouplinear": [0, 3], "multi_head_attent": 0, "multiheadattent": [0, 3], "forward_trac": [0, 3], "forward_default": [0, 3], "forward_pytorch": [0, 3], "normalization_lay": 0, "adjustbatchnormmomentum": [0, 3], "round_plac": [0, 3], "adjust_momentum": [0, 3], "pixel_shuffl": 0, "pixelshuffl": [0, 3], "pool": [0, 2, 18], "maxpool2d": [0, 3], "avgpool2d": [0, 3], "positional_embed": 0, "positionalembed": [0, 3], "learnablepositionalembed": [0, 3], "sinusoidalpositionalembed": [0, 3], "get_weight": [0, 3], "positional_encod": 0, "sinusoidalpositionalencod": [0, 3], "forward_patch_last": [0, 3], "forward_oth": [0, 3], "learnablepositionencod": [0, 3], "random_lay": 0, "randomappli": [0, 3], "single_head_attent": 0, "singleheadattent": [0, 3], "softmax": 0, "stochastic_depth": 0, "stochasticdepth": [0, 3, 11], "token_merg": 0, "tokenmerg": [0, 3], "extra_repr": [0, 3, 11, 12, 22, 24, 26, 27, 28, 33, 41, 42, 43, 44, 46, 50, 51, 55], "pad_x_and_mask": [0, 3], "upsampl": 0, "train": [0, 3, 7, 9, 11, 12, 13, 15, 17, 18, 22, 23, 24, 26, 27, 28, 30, 33, 35, 37, 38, 41, 45, 49, 53, 55, 59, 71, 72, 73, 77], "get_normalization_lay": [0, 3], "matcher_det": 0, "base_match": 0, "basematch": [0, 6], "ssd_matcher": 0, "ssdmatcher": [0, 6], "convert_to_box": [0, 6], "check_vari": [0, 6], "arguments_box_match": [0, 6], "build_match": [0, 6], "misc": [0, 57], "third_parti": [0, 7, 53], "ssd_util": [0, 7], "averaging_util": 0, "ema": [0, 7, 53, 64, 67, 70], "update_paramet": [0, 7], "arguments_ema": [0, 7], "box_util": 0, "convert_locations_to_box": [0, 7], "convert_boxes_to_loc": [0, 7], "center_form_to_corner_form": [0, 7], "corner_form_to_center_form": [0, 7], "common": [0, 22, 24, 49, 52, 53, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "clean_strip": [0, 7], "load_pretrained_model": [0, 7], "parameter_list": [0, 7], "freeze_modul": [0, 7], "freeze_modules_based_on_opt": [0, 7], "get_tensor_s": [0, 7], "init_util": 0, "initialize_conv_lay": [0, 7], "initialize_fc_lay": [0, 7], "initialize_norm_lay": [0, 7], "initialize_weight": [0, 7], "model": [0, 2, 3, 4, 7, 18, 19, 21, 23, 24, 26, 27, 29, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 65, 67, 68, 69, 70, 71, 72, 73, 77], "audio_classif": [0, 9, 22, 24], "audio_byteform": [0, 9], "base_audio_classif": [0, 9], "classif": [0, 2, 9, 10, 14, 16, 17, 22, 24, 25, 28, 31, 33, 41, 43, 44, 47, 56, 57, 59, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73], "base_image_encod": [0, 9], "byteform": [0, 9, 10, 23], "efficientnet": [0, 9], "fastvit": [0, 9], "mobilenetv1": [0, 9, 58, 62], "mobilenetv2": [0, 9, 58, 62, 69], "mobilenetv3": [0, 4, 9, 18, 58, 62], "mobileon": [0, 9, 18], "mobilevit": [0, 2, 9, 13, 16, 18, 55, 56, 57, 58, 69, 73, 77], "mobilevit_v2": [0, 9, 64, 67], "regnet": [0, 9, 18], "resnet": [0, 3, 5, 9, 13, 16, 18, 35, 53, 56, 57, 58, 68, 73, 77], "swin_transform": [0, 9], "vit": [0, 9, 57, 58], "detect": [0, 1, 6, 9, 18, 22, 24, 28, 31, 38, 41, 57, 71, 73], "base_detect": [0, 9, 22, 24], "mask_rcnn": [0, 9], "ssd": [0, 1, 6, 7, 9, 18, 27, 43, 57, 58, 67, 68], "multi_modal_img_text": [0, 9, 22, 24, 41], "base_multi_modal_img_text": [0, 9, 22, 24], "clip": [0, 2, 9, 19, 20, 21, 24, 33, 35, 37, 55], "segment": [0, 9, 18, 22, 24, 33, 38, 41, 47, 53, 57, 59, 71, 73], "base_seg": [0, 9], "enc_dec": [0, 9], "base_model": 0, "baseanynnmodel": [0, 9, 10, 11, 13, 15, 16, 17], "dummy_input_and_label": [0, 9, 10, 11, 13, 15, 16, 21], "get_exportable_model": [0, 9, 11], "freeze_norm_lay": [0, 9, 21], "build_model": [0, 9, 11, 13, 15, 16, 17], "info": [0, 7, 9, 28, 49, 53], "get_model": [0, 9], "arguments_model": [0, 9], "aspp_block": 0, "aspp": [0, 18], "asppconv2d": [0, 18], "adjust_atrous_r": [0, 18], "asppseparableconv2d": [0, 18], "aspppool": [0, 18], "base_modul": 0, "basemodul": [0, 18], "efficientnetblock": [0, 18], "convolutional_stem": [0, 18], "patchemb": [0, 18], "repmix": [0, 11, 18], "reparameter": [0, 11, 18], "convffn": [0, 18], "repmixerblock": [0, 18], "attentionblock": [0, 18], "repcp": [0, 18], "feature_pyramid": 0, "featurepyramidnetwork": [0, 18], "reset_weight": [0, 18], "invertedresiduals": [0, 18], "invertedresidu": [0, 18, 57], "mobileone_block": 0, "mobileoneblock": [0, 18], "replkblock": [0, 18], "mobilevit_block": 0, "mobilevitblock": [0, 18], "unfold": [0, 3, 11, 18], "fold": [0, 18], "forward_spati": [0, 18], "forward_tempor": [0, 18], "mobilevitblockv2": [0, 18], "unfolding_pytorch": [0, 18], "folding_pytorch": [0, 18], "unfolding_coreml": [0, 18], "folding_coreml": [0, 18], "resize_input_if_need": [0, 18], "pspnet_modul": 0, "psp": [0, 18], "regnet_modul": 0, "xregnetblock": [0, 18], "anyregnetstag": [0, 18], "resnet_modul": 0, "basicresnetblock": [0, 18], "expans": [0, 11, 17, 18, 35], "bottleneckresnetblock": [0, 18], "squeeze_excit": 0, "squeezeexcit": [0, 18], "ssd_head": 0, "ssdhead": [0, 18], "ssdinstancehead": [0, 18], "swin_transformer_block": 0, "permut": [0, 18, 35], "patchmerg": [0, 18], "shifted_window_attent": [0, 18], "shiftedwindowattent": [0, 18], "swintransformerblock": [0, 18], "transform": [0, 3, 9, 11, 12, 22, 23, 24, 26, 27, 37, 57, 59, 63, 64, 67, 70, 73], "transformerencod": [0, 18, 57], "linearattnffn": [0, 18], "windowed_transform": 0, "window_partit": [0, 18], "window_partition_revers": [0, 18], "get_windows_shift_mask": [0, 18], "window_x_and_key_padding_mask": [0, 18], "unwindow_x": [0, 18], "windowedtransformerencod": [0, 18], "neural_augmentor": 0, "util": [0, 7, 9, 13, 19, 22, 24, 40, 41, 55], "neural_aug_util": [0, 19], "neural_aug": 0, "baseneuralaugmentor": [0, 19], "basicneuralaugmentor": [0, 19], "distributionneuralaugmentor": [0, 19], "build_neural_augmentor": [0, 19], "arguments_neural_augmentor": [0, 19], "text_encod": [0, 15], "base_text_encod": 0, "basetextencod": [0, 15, 21], "texttransform": [0, 21], "reset_parameters_clip_styl": [0, 21], "forward_embed": [0, 21], "build_attention_mask": [0, 21], "encode_text": [0, 21], "forward_zero_shot": [0, 21], "arguments_text_encod": [0, 21], "build_text_encod": [0, 21], "modeling_argu": 0, "parser": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 15, 16, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 37, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55], "argumentpars": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 13, 15, 16, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 37, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 73], "class": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 57, 59, 60, 61, 67, 68, 69, 70], "arg": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 55], "kwarg": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 49, 50, 51, 53, 55, 61, 64, 65, 67, 70], "base": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55, 56, 57, 59], "anchor": [1, 6, 8, 14, 18, 27, 43], "gener": [1, 10, 11, 26, 27, 33, 35, 36, 37, 44, 49, 53, 63, 73], "task": [1, 6, 9, 11, 13, 16, 17, 22, 29, 33, 41, 42, 44, 45, 46, 56, 57, 59, 61, 73], "object": [1, 3, 6, 7, 11, 12, 13, 18, 24, 26, 27, 29, 31, 35, 37, 38, 41, 43, 49, 50, 51, 52, 53, 54, 57, 69, 70, 71, 73], "none": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55], "initi": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26, 34, 35, 41, 42, 43, 44, 45, 46, 57, 64], "intern": [1, 2, 3, 4, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 34, 35, 41, 42, 43, 44, 45, 46, 53, 62, 63, 73], "state": [1, 2, 3, 4, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 34, 35, 41, 42, 43, 44, 45, 46, 53, 73], "share": [1, 2, 3, 4, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 34, 35, 41, 42, 43, 44, 45, 46], "both": [1, 2, 3, 4, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 31, 34, 35, 41, 42, 43, 44, 45, 46, 57, 59], "nn": [1, 2, 3, 4, 5, 7, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 34, 35, 38, 41, 42, 43, 44, 45, 46, 53], "scriptmodul": [1, 2, 3, 4, 5, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 34, 35, 41, 42, 43, 44, 45, 46], "classmethod": [1, 2, 3, 6, 9, 10, 11, 13, 15, 16, 17, 19, 21, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 37, 41, 42, 43, 44, 45, 46, 49, 50, 51, 55], "add": [1, 2, 3, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 24, 25, 26, 27, 28, 30, 33, 35, 41, 42, 43, 44, 45, 46, 49, 50, 52], "specif": [1, 2, 3, 5, 6, 9, 10, 11, 13, 15, 16, 17, 19, 21, 23, 24, 25, 26, 27, 28, 30, 33, 41, 42, 43, 44, 45, 46, 49], "argument": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 37, 38, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 61], "return": [1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54], "per": [1, 11, 19, 22, 31, 33, 35, 37, 54, 55, 64], "output": [1, 2, 3, 5, 6, 10, 11, 12, 14, 17, 18, 23, 24, 26, 27, 28, 35, 37, 38, 41, 42, 43, 44, 45, 46, 49, 51, 53, 54], "stride": [1, 3, 11, 12, 18, 38, 46], "child": [1, 9, 11, 15, 16, 21, 28], "must": [1, 3, 9, 11, 13, 15, 16, 17, 18, 21, 24, 28, 30, 41, 42, 43, 44, 45, 46, 49, 53, 54], "implement": [1, 2, 3, 7, 9, 11, 13, 15, 16, 17, 18, 24, 27, 28, 33, 35, 38, 41, 42, 43, 44, 45, 46, 47, 55, 73], "thi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 38, 41, 42, 43, 44, 45, 46, 47, 49, 52, 53, 55, 56, 58, 59, 61, 65], "function": [1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 31, 33, 34, 35, 37, 38, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 55], "fm_height": 1, "int": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 47, 48, 49, 51, 52, 53, 54, 55, 59], "fm_width": 1, "fm_output_strid": 1, "devic": [1, 3, 7, 13, 18, 20, 38, 48, 53], "str": [1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55], "cpu": [1, 7, 13, 20, 23, 38, 48, 53], "tensor": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 23, 25, 27, 28, 30, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54], "tupl": [1, 3, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 22, 24, 25, 27, 28, 31, 33, 35, 37, 41, 45, 46, 49, 53, 54, 59], "featur": [1, 2, 3, 11, 14, 17, 18, 36, 45, 46, 49, 53], "map": [1, 3, 8, 9, 11, 16, 18, 22, 23, 24, 26, 27, 28, 30, 31, 33, 35, 38, 41, 42, 43, 44, 45, 46, 49, 53, 58, 69, 70], "paramet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 56, 58, 59], "height": [1, 3, 5, 7, 13, 18, 27, 33, 35, 37, 38, 46, 53, 55, 56], "width": [1, 3, 5, 7, 12, 13, 18, 27, 33, 35, 37, 38, 46, 53, 55, 56], "option": [1, 3, 4, 5, 7, 8, 11, 12, 14, 17, 18, 22, 24, 28, 31, 32, 35, 37, 38, 41, 45, 46, 49, 51, 53, 54, 59, 64, 69], "cuda": 1, "default": [1, 3, 4, 5, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 21, 23, 24, 28, 31, 33, 36, 37, 38, 47, 52, 53, 54, 55, 61, 69], "opt": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 53, 55], "prior": [1, 7, 8], "fly": [1, 35], "singl": [1, 3, 5, 11, 13, 18, 22, 23, 27, 28, 35, 41, 42, 43, 44, 46, 54, 56, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73], "shot": [1, 13, 24, 26, 27, 28, 29, 35, 43, 68], "detector": [1, 7, 13, 27, 35, 68], "list": [1, 3, 5, 7, 9, 11, 12, 13, 14, 15, 17, 18, 23, 27, 28, 29, 30, 31, 32, 33, 35, 38, 39, 41, 49, 50, 51, 52, 53, 54], "relat": [1, 23, 26, 55], "build": [1, 2, 3, 4, 5, 9, 11, 13, 15, 16, 17, 18, 21, 24, 29, 33, 34, 37, 41, 47, 50, 57], "in_dim": [2, 18], "out_dim": [2, 18], "attent": [2, 3, 12, 18, 64, 67, 70], "describ": [2, 3, 4, 18, 35, 41, 46], "should": [2, 3, 4, 5, 7, 9, 13, 14, 18, 19, 20, 21, 23, 24, 26, 27, 28, 30, 31, 33, 34, 41, 42, 43, 44, 46, 51, 52, 53, 59], "us": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 23, 24, 26, 27, 28, 31, 33, 35, 36, 37, 38, 41, 44, 49, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74], "cnn": [2, 14, 18], "style": [2, 13, 18, 56], "includ": [2, 3, 11, 13, 14, 18, 31, 49, 53, 58, 59, 60, 73], "reset": [2, 15, 18, 21, 43, 49], "weight": [2, 3, 7, 9, 11, 13, 15, 17, 18, 21, 41, 43, 46, 47, 58, 61, 63, 64, 69, 73], "given": [2, 3, 7, 8, 11, 12, 13, 16, 24, 25, 26, 27, 28, 29, 31, 33, 35, 37, 41, 44, 49, 53, 55, 64, 67, 68, 69], "x": [2, 3, 5, 7, 9, 10, 11, 13, 14, 16, 18, 19, 20, 35, 36, 37, 38, 49, 52, 53, 58, 64], "defin": [2, 3, 4, 5, 11, 13, 14, 16, 17, 18, 19, 20, 21, 30, 34, 35, 38, 41, 42, 43, 44, 45, 46, 47, 55, 56, 57], "comput": [2, 3, 4, 5, 7, 8, 13, 14, 18, 19, 20, 21, 26, 34, 35, 36, 41, 42, 43, 44, 45, 46, 49, 53, 56, 62, 65, 67, 68, 69, 70, 73], "perform": [2, 3, 4, 5, 10, 11, 13, 14, 17, 18, 19, 20, 21, 23, 34, 35, 57, 73], "everi": [2, 3, 4, 5, 13, 14, 18, 19, 20, 21, 33, 34, 41, 49], "call": [2, 3, 4, 5, 7, 13, 14, 18, 19, 20, 21, 26, 34, 49, 53, 54, 57], "overridden": [2, 3, 4, 5, 13, 14, 18, 19, 20, 21, 34], "all": [2, 3, 4, 5, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 26, 28, 31, 34, 35, 37, 45, 49, 52, 53, 54, 58, 59, 61], "subclass": [2, 3, 4, 5, 13, 14, 18, 19, 20, 21, 24, 33, 34, 55, 59], "although": [2, 3, 4, 5, 13, 14, 18, 19, 20, 21, 34], "recip": [2, 3, 4, 5, 13, 14, 18, 19, 20, 21, 34, 56, 58, 61, 65, 73], "pass": [2, 3, 4, 5, 9, 10, 11, 13, 14, 18, 19, 20, 21, 34, 35, 53, 54, 61], "need": [2, 3, 4, 5, 11, 12, 13, 14, 16, 18, 19, 20, 21, 23, 26, 31, 33, 34, 35, 37, 53, 55, 57, 59, 64], "within": [2, 3, 4, 5, 11, 13, 14, 18, 19, 20, 21, 26, 31, 34, 35], "one": [2, 3, 4, 5, 13, 14, 18, 19, 20, 21, 26, 31, 34, 35, 36, 46, 54, 59, 64], "instanc": [2, 3, 4, 5, 9, 11, 13, 14, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 34, 35, 50, 53], "afterward": [2, 3, 4, 5, 13, 14, 18, 19, 20, 21, 34], "instead": [2, 3, 4, 5, 11, 13, 14, 18, 19, 20, 21, 34, 37, 59], "sinc": [2, 3, 4, 5, 11, 13, 14, 18, 19, 20, 21, 23, 31, 34], "former": [2, 3, 4, 5, 13, 14, 18, 19, 20, 21, 34], "take": [2, 3, 4, 5, 12, 13, 14, 18, 19, 20, 21, 23, 34, 55, 56, 59, 64], "care": [2, 3, 4, 5, 13, 14, 18, 19, 20, 21, 34, 35, 37, 42, 43, 45, 46], "run": [2, 3, 4, 5, 11, 13, 14, 18, 19, 20, 21, 34, 38, 49, 64, 67, 68, 69], "regist": [2, 3, 4, 5, 10, 13, 14, 18, 19, 20, 21, 34, 41, 53, 59], "hook": [2, 3, 4, 5, 13, 14, 18, 19, 20, 21, 34], "while": [2, 3, 4, 5, 13, 14, 18, 19, 20, 21, 22, 34, 35, 46], "latter": [2, 3, 4, 5, 13, 14, 18, 19, 20, 21, 34], "silent": [2, 3, 4, 5, 13, 14, 18, 19, 20, 21, 34], "ignor": [2, 3, 4, 5, 13, 14, 18, 19, 20, 21, 34, 35, 64, 67, 68, 69, 70], "them": [2, 3, 4, 5, 13, 14, 18, 19, 20, 21, 28, 31, 34, 35, 38, 52, 55, 69], "project": [2, 3, 18, 21, 26, 34, 37], "imag": [2, 8, 11, 12, 13, 15, 16, 18, 19, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 41, 42, 43, 44, 45, 46, 49, 53, 55, 56, 57, 64, 65, 67, 68, 69, 70, 73], "represent": [2, 3, 18, 26, 41, 42, 43, 44, 45, 46, 55, 63, 73], "same": [2, 3, 5, 9, 13, 15, 17, 18, 19, 23, 24, 26, 31, 35, 46, 49, 54, 59], "space": [2, 12, 31, 55], "text": [2, 3, 5, 15, 21, 22, 24, 28, 29, 34, 45, 49], "weight_decai": [2, 3, 7, 9, 11, 13, 15, 16, 17, 19, 21, 56, 64], "float": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 24, 25, 31, 33, 35, 36, 37, 38, 41, 47, 49, 51, 52, 53], "0": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 21, 23, 28, 31, 33, 35, 36, 37, 38, 41, 42, 44, 46, 47, 49, 53, 54, 56, 58, 60, 61, 62, 64, 66, 67, 68, 69, 70, 74], "no_decay_bn_filter_bia": [2, 3, 7, 9, 11, 13, 15, 16, 17, 19, 21, 56], "bool": [2, 3, 4, 5, 7, 9, 11, 13, 15, 16, 17, 18, 19, 20, 21, 24, 28, 31, 32, 33, 35, 37, 38, 41, 45, 48, 49, 52, 53, 55], "fals": [2, 3, 4, 7, 9, 11, 13, 15, 16, 17, 18, 19, 20, 21, 24, 27, 28, 31, 32, 33, 35, 37, 38, 48, 49, 52, 53, 55, 56, 61, 64], "input": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 23, 26, 27, 31, 35, 38, 41, 42, 43, 44, 45, 46, 53, 54, 55, 67, 68, 69, 70], "dict": [2, 3, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 21, 23, 24, 25, 26, 27, 28, 31, 33, 35, 37, 38, 42, 43, 45, 48, 49, 50, 53], "image_classifi": [2, 15], "dimens": [2, 3, 5, 11, 14, 18, 36, 45, 49], "head": [2, 3, 9, 13, 14, 15, 16, 18, 21, 34, 37, 43], "global": [2, 3, 23, 26, 35], "linear": [2, 3, 4, 7, 12, 17, 18, 41, 51, 62], "simpl": [2, 14, 17, 65], "namespac": [2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 37, 38, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 55], "helper": [2, 3, 4, 5, 7, 11, 15, 21, 22, 24, 28, 29, 31, 33, 34, 35, 37, 41, 45, 47, 50, 52, 53, 55], "an": [2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 35, 36, 41, 44, 50, 52, 53, 54, 55, 56, 64, 67, 68, 69, 70, 73], "from": [2, 3, 5, 6, 7, 9, 11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 24, 26, 28, 31, 33, 34, 35, 36, 37, 38, 41, 44, 45, 47, 49, 50, 52, 53, 54, 57, 58, 59, 61, 66, 68, 69, 70], "command": [2, 3, 5, 6, 9, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 37, 38, 41, 42, 43, 44, 45, 46, 47, 50, 52, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74], "line": [2, 3, 5, 6, 9, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 38, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 55], "hardsigmoid": [3, 4], "hardswish": [3, 4], "leakyrelu": [3, 4], "register_act_fn": [3, 4], "arguments_activation_fn": [3, 4], "build_activation_lay": [3, 4], "batchnorm2d": [3, 5], "batchnorm2dfp32": [3, 5], "batchnorm1d": [3, 5], "batchnorm3d": [3, 5], "groupnorm": [3, 5], "instancenorm2d": [3, 5], "instancenorm1d": [3, 5], "layernorm": [3, 5, 18], "layernorm2d_nchw": [3, 5], "layernormfp32": [3, 5], "syncbatchnorm": [3, 5], "syncbatchnormfp32": [3, 5], "register_norm_fn": [3, 5], "build_normalization_lay": [3, 5], "arguments_norm_lay": [3, 5], "output_s": [3, 18], "1": [3, 4, 5, 7, 8, 11, 12, 13, 14, 18, 28, 31, 32, 33, 35, 36, 37, 38, 41, 47, 49, 52, 53, 55, 56, 58, 60, 61, 62, 64, 67, 69, 70], "appli": [3, 4, 5, 11, 18, 19, 20, 23, 35, 37, 38, 69, 70], "2d": [3, 5], "adapt": [3, 11, 12], "averag": [3, 7, 49, 53, 56, 64, 67, 68], "over": [3, 5, 8, 11, 16, 31, 33, 35, 49, 69, 70], "The": [3, 5, 7, 9, 10, 11, 12, 13, 15, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 37, 41, 42, 44, 45, 46, 49, 52, 53, 54, 55, 56, 57, 58, 59], "target": [3, 8, 10, 11, 23, 25, 27, 35, 41, 42, 43, 44, 46, 47, 49, 53], "size": [3, 5, 7, 10, 11, 14, 18, 23, 26, 33, 35, 38, 41, 43, 45, 46, 49, 54, 56, 59, 61, 64, 73], "If": [3, 4, 5, 9, 11, 18, 23, 24, 28, 31, 33, 35, 37, 53, 59, 61, 64, 73], "h": [3, 5, 6, 7, 18, 33, 35, 38, 41, 44, 55], "i": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 49, 52, 53, 54, 55, 56, 57, 59, 60, 61, 64, 67, 68, 69, 70, 73], "param": [3, 7, 8, 9, 11, 12, 13, 15, 17, 18, 33, 35, 38, 41, 53], "squar": 3, "hxh": 3, "produc": [3, 18], "hxw": 3, "shape": [3, 5, 6, 7, 8, 10, 11, 18, 23, 27, 35, 41, 42, 43, 44, 45, 46, 47, 49, 53], "n": [3, 5, 6, 8, 18, 25, 33, 35, 36, 41, 42, 44, 45, 49, 53, 55, 60, 61, 67, 68, 69, 70], "c": [3, 5, 18, 25, 28, 33, 35, 36, 38, 41, 42, 44, 46, 47, 55, 68], "w": [3, 5, 6, 7, 18, 33, 35, 38, 41, 44, 45, 48, 50, 55, 68, 69, 70], "where": [3, 5, 6, 11, 12, 18, 23, 24, 25, 26, 28, 33, 37, 42, 43, 44, 45, 46, 49, 52, 56, 59, 64, 67, 70], "batch": [3, 5, 10, 11, 18, 19, 21, 23, 24, 27, 28, 33, 35, 36, 43, 45, 46, 49, 53, 56, 64, 73], "number": [3, 5, 6, 8, 11, 12, 13, 14, 18, 22, 25, 26, 27, 28, 31, 32, 33, 35, 36, 37, 42, 43, 44, 45, 46, 47, 49, 53, 54, 55, 56, 58, 61, 64], "channel": [3, 5, 12, 14, 18, 19, 25, 35, 36, 53], "neural": [3, 4, 9, 11, 19, 26, 41, 45, 62, 73], "network": [3, 4, 5, 9, 11, 12, 13, 16, 18, 55, 62, 73], "get": [3, 9, 10, 11, 12, 13, 15, 17, 18, 19, 24, 25, 27, 28, 29, 35, 36, 37, 41, 49, 54, 64, 73], "along": [3, 9, 11, 13, 15, 16, 17, 26, 27, 28, 33, 37, 53, 58], "learn": [3, 9, 11, 13, 15, 16, 17, 18, 19, 22, 26, 28, 51, 55, 56, 63, 64, 65, 73], "rate": [3, 9, 11, 13, 14, 15, 16, 17, 18, 25, 36, 37, 51, 56, 64], "decai": [3, 9, 11, 13, 15, 17, 64], "do": [3, 9, 11, 13, 15, 17, 18, 28, 33, 35, 53, 55, 61, 62, 63, 65, 68, 69], "bn": [3, 5, 9, 11, 13, 15, 17], "bias": [3, 9, 11, 13, 15, 17], "length": [3, 5, 9, 11, 12, 13, 15, 17, 18, 23, 25, 27, 35, 36, 41], "2": [3, 5, 7, 9, 11, 12, 13, 15, 17, 18, 31, 32, 33, 35, 47, 49, 52, 55, 56, 58, 61, 64, 67], "first": [3, 9, 11, 13, 15, 17, 18, 35, 37, 41, 53, 60], "entri": [3, 4, 9, 11, 13, 15, 17, 23, 57], "dictionari": [3, 9, 10, 11, 12, 13, 15, 16, 17, 22, 23, 24, 25, 27, 28, 31, 33, 37, 41, 42, 43, 44, 45, 46, 49, 53], "three": [3, 9, 11, 13, 15, 17, 55], "kei": [3, 9, 11, 12, 13, 15, 17, 18, 23, 24, 27, 31, 33, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53], "param_nam": [3, 9, 11, 13, 15, 17, 50], "second": [3, 9, 11, 13, 15, 17, 18, 31, 41, 53], "contain": [3, 9, 10, 11, 12, 13, 15, 16, 17, 18, 22, 23, 24, 25, 26, 27, 31, 33, 35, 41, 42, 43, 44, 45, 46, 47, 49, 52, 53, 56, 57, 58], "each": [3, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 26, 27, 28, 31, 33, 35, 36, 37, 41, 45, 49, 51, 53, 54, 55, 57, 59, 64, 66], "multipli": [3, 12, 35], "set": [3, 5, 7, 8, 18, 24, 26, 31, 33, 35, 38, 41, 42, 43, 44, 46, 49, 53, 55, 56, 59, 66, 74], "here": [3, 18, 53, 56, 57, 74], "handl": [3, 56], "insid": [3, 18, 23, 28, 43, 53], "central": 3, "ani": [3, 4, 8, 9, 11, 13, 16, 18, 20, 21, 23, 24, 26, 27, 28, 31, 34, 35, 41, 42, 43, 45, 46, 49, 50, 53, 61, 68, 69], "in_channel": [3, 12, 14, 18], "out_channel": [3, 12, 18], "kernel_s": [3, 11, 18], "pad": [3, 11, 18, 21, 23, 35, 36], "dilat": [3, 14, 18], "group": [3, 5, 11, 12, 18, 53, 54], "bia": [3, 18], "padding_mod": 3, "zero": [3, 18, 24, 26, 28, 29], "convolut": [3, 7, 11, 12, 14, 18, 62, 69], "c_": [3, 18], "expect": [3, 5, 11, 18, 23, 26, 27, 28, 33, 35, 43, 49, 55], "h_": [3, 18], "w_": [3, 18], "out": [3, 18, 26, 35, 55], "kernel": [3, 11, 12, 14, 18], "mode": [3, 7, 11, 12, 18, 24, 28, 33, 35, 37, 41, 53, 55, 67, 68, 69, 70], "reflect": 3, "replic": 3, "circular": [3, 35], "use_norm": 3, "after": [3, 11, 18, 21, 35, 49, 53, 54, 64], "true": [3, 4, 5, 7, 11, 18, 21, 24, 28, 31, 35, 41, 49, 52, 53, 56], "use_act": [3, 18], "act_nam": 3, "overrid": [3, 5, 7, 11, 15, 16, 18, 21, 24, 28, 35, 61, 64, 65, 67, 70], "specifi": [3, 5, 12, 14, 18, 19, 23, 25, 26, 31, 33, 35, 37, 41, 47, 54, 55, 59, 61], "norm_lay": [3, 14, 18], "act_lay": 3, "_baseconvnormactlay": 3, "alia": [3, 13, 24], "conv1d": 3, "3": [3, 8, 11, 13, 18, 27, 28, 33, 53, 58, 61, 64, 67, 68, 74], "conv3d": 3, "output_pad": 3, "auto_pad": 3, "transpos": 3, "aka": 3, "deconvolut": 3, "done": [3, 21, 23, 61, 62, 63, 64, 65, 66, 68, 69], "side": [3, 35], "addit": [3, 18, 24, 26, 31, 53], "automat": [3, 33, 53], "num_featur": [3, 5, 14], "follow": [3, 12, 18, 26, 28, 37, 43, 49, 52, 59, 60, 61, 64, 66, 73], "use_act_depthwis": 3, "_baseseparableconv": 3, "p": [3, 18, 26, 35], "5": [3, 5, 7, 18, 33, 47, 49, 56, 58, 64, 67, 69], "inplac": [3, 4, 56], "dure": [3, 11, 31, 33, 41, 49, 53, 55, 56], "randomli": [3, 31, 35, 37, 55], "some": [3, 24, 31], "element": [3, 11, 12, 18, 23, 33, 54], "probabl": [3, 18, 44, 59], "sampl": [3, 10, 11, 18, 19, 20, 22, 23, 24, 25, 26, 27, 31, 32, 33, 35, 36, 37, 38, 41, 44, 55, 73], "bernoulli": 3, "distribut": [3, 19, 26, 53, 54, 57], "oper": [3, 4, 11, 18, 23, 35, 53, 54], "place": [3, 26], "4d": [3, 5], "num_embed": 3, "embedding_dim": 3, "padding_idx": 3, "A": [3, 8, 10, 11, 12, 16, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 35, 37, 41, 43, 45, 47, 49, 50, 53, 66], "lookup": 3, "tabl": [3, 12], "store": [3, 10, 11, 12, 26, 28, 31, 38, 49, 53, 54, 56, 59, 67, 68, 69], "fix": [3, 33, 35, 50, 73], "vector": [3, 36], "contribut": [3, 7, 41], "gradient": [3, 50, 56, 64], "therefor": [3, 24], "updat": [3, 11, 16, 17, 32, 33, 49, 55, 58], "e": [3, 4, 5, 9, 12, 13, 16, 18, 24, 27, 31, 33, 41, 43, 49, 53, 55, 56, 60, 61, 64], "remain": [3, 5], "For": [3, 7, 8, 9, 11, 18, 22, 24, 27, 28, 33, 37, 53, 55, 56, 57, 58, 60, 61, 64, 65, 66, 68, 69, 74], "newli": 3, "construct": [3, 12, 18, 24, 41], "can": [3, 5, 7, 9, 11, 16, 22, 24, 26, 28, 31, 33, 41, 42, 44, 46, 49, 53, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74], "anoth": [3, 11, 12, 61], "valu": [3, 4, 5, 7, 8, 11, 12, 16, 18, 20, 21, 23, 24, 30, 31, 33, 35, 36, 38, 41, 42, 43, 44, 45, 46, 47, 49, 52, 53, 54, 56, 69], "inttensor": [3, 35], "longtensor": 3, "arbitrari": 3, "indic": [3, 21, 24, 28, 31, 32, 33, 37, 53], "extract": [3, 7, 11, 18, 28, 33, 35, 43, 52], "_dim": 3, "start_dim": 3, "end_dim": 3, "contigu": 3, "rang": [3, 19, 31, 35, 38, 42, 44, 46, 47, 69], "dim": [3, 11, 18, 53, 54], "last": [3, 5, 11, 18, 56], "s_": 3, "start": [3, 9, 33, 41, 49, 52, 73], "end": [3, 18, 31, 33, 41, 49, 52, 53], "mean": [3, 5, 35, 37, 49, 53, 56, 67, 68, 69, 70], "prod_": 3, "keep_dim": 3, "5d": [3, 5], "type": [3, 8, 11, 12, 13, 17, 18, 20, 23, 24, 25, 27, 35, 36, 37, 38, 41, 43, 46, 48, 52, 53, 54, 56, 72, 73], "It": [3, 12, 18, 24, 25, 33, 42, 43, 44, 46, 49, 53, 56], "rm": 3, "ab": [3, 13, 25, 33, 47, 51, 55], "squeez": [3, 12, 18], "d": [3, 5, 36, 45, 49, 52, 53], "els": [3, 31], "holder": 3, "embed_dim": [3, 11, 18], "attn_dropout": [3, 18], "self": [3, 18, 24, 28, 35, 49, 59, 64, 67, 70], "complex": 3, "mobilevitv2": [3, 9, 11, 18, 61, 67, 68, 73, 77], "paper": [3, 4, 7, 11, 12, 18, 19, 21, 35, 41, 47, 55, 58, 73], "well": [3, 49, 53, 56], "cross": [3, 18, 42, 44, 46], "context": [3, 18, 28, 33, 53, 55], "score": [3, 9, 13, 35, 43, 49, 53, 67, 68, 69, 70], "learnabl": [3, 5, 18, 19], "pixel": [3, 18, 31, 35], "patch": [3, 18], "we": [3, 5, 9, 11, 13, 15, 17, 18, 24, 28, 31, 33, 35, 36, 37, 52, 53, 55, 56, 57, 58, 60, 61, 64, 66, 68, 69, 70, 74], "b": [3, 18, 26, 33, 48, 55], "becaus": [3, 10, 11, 24, 35, 37], "point": [3, 18, 41], "wise": [3, 11, 18, 49, 54], "avoid": [3, 9, 13, 15, 17, 18, 23, 38, 57], "which": [3, 5, 7, 18, 26, 31, 33, 35, 36, 37, 49, 53, 56, 57, 59, 69], "mai": [3, 9, 11, 13, 15, 17, 24, 33, 35, 36, 41, 49, 53, 55, 64], "expens": 3, "resourc": 3, "constrain": 3, "requir": [3, 11, 12, 18, 24, 36, 37, 41, 42, 44, 46, 52, 53, 59, 74], "convert": [3, 7, 11, 30, 33, 35, 49, 53, 72, 73], "format": [3, 6, 14, 27, 28, 35, 37, 53, 59], "case": [3, 5, 33, 35, 41, 42, 44, 45, 52], "static": [3, 13, 24, 26, 27, 29, 30, 35, 37, 51, 53], "context_scor": 3, "x_prev": [3, 18], "in_featur": 3, "out_featur": 3, "channel_first": 3, "data": [3, 7, 12, 15, 49, 53, 54, 57, 59, 73], "ar": [3, 4, 9, 10, 11, 12, 16, 18, 23, 24, 26, 28, 31, 33, 35, 37, 41, 42, 43, 44, 45, 46, 49, 50, 53, 55, 56, 57, 58, 59, 60, 61, 64], "n_group": 3, "feature_shuffl": 3, "shuffl": [3, 35], "between": [3, 8, 18, 33, 35, 37, 38, 41, 44, 45, 49, 53, 57, 69], "num_head": [3, 18], "output_dim": 3, "coreml_compat": 3, "multi": [3, 11, 15, 18, 22, 28, 33, 41, 42, 43, 44, 45, 46, 51, 61, 64, 73], "you": [3, 18, 41, 42, 43, 44, 46, 49, 53, 56, 57, 59, 60, 61, 64, 73], "": [3, 7, 11, 12, 18, 23, 25, 31, 32, 41, 44, 52, 53, 55, 56, 58, 63], "queri": [3, 18, 26, 49], "x_q": 3, "token": [3, 10, 11, 18, 21, 31, 34], "x_kv": 3, "t": [3, 11, 18, 24, 26, 27, 28, 35, 36, 52, 53, 55], "key_padding_mask": [3, 11, 18, 21], "attn_mask": [3, 18, 21], "enabl": [3, 11, 27, 28, 33, 35, 38, 56, 61], "adjust": [3, 12, 18, 30, 33, 35, 69], "momentum": [3, 5, 7, 56], "experiment": 3, "caution": 3, "6": [3, 18, 33, 58, 74], "iter": [3, 7, 33, 49, 50, 53, 55], "epoch": [3, 33, 38, 49, 51, 53, 55], "upscale_factor": 3, "rearrang": 3, "im": 3, "r": [3, 14, 26, 66, 74], "upscal": 3, "factor": [3, 18, 30, 33, 38], "increas": [3, 49, 64], "spatial": [3, 11, 17, 18, 33, 55], "resolut": [3, 24, 33, 48, 55], "more": [3, 4, 8, 18, 23, 28, 55, 64], "max": [3, 33], "window": [3, 11, 18, 35, 36], "ad": [3, 5, 8, 18, 35], "ceil_mod": 3, "count_include_pad": 3, "divisor_overrid": 3, "when": [3, 5, 9, 11, 18, 26, 27, 35, 37, 38, 42, 44, 46, 49, 52, 53], "ceil": [3, 36], "floor": 3, "calcul": [3, 31, 36], "divisor": [3, 53], "otherwis": [3, 9, 18, 21, 23, 24, 28, 53], "region": [3, 35], "is_learn": 3, "sequence_first": 3, "interpolation_mod": 3, "bilinear": 3, "seq_len": [3, 21], "posit": [3, 8, 11, 18, 35], "sinusoid": 3, "fairseq": 3, "d_model": 3, "max_len": 3, "5000": 3, "channels_last": 3, "3d": [3, 5], "code": [3, 11, 38, 53, 57, 73], "ha": [3, 8, 23, 24, 28, 31, 33, 45, 55, 57, 64], "been": 3, "pytorch": [3, 12, 18, 23, 32, 53, 55, 59, 60, 74], "tutori": [3, 60], "seq": 3, "similar": [3, 11, 12, 26, 33, 35], "vocab": 3, "nlp": 3, "module_list": 3, "keep_p": 3, "8": [3, 12, 18, 49, 53, 56, 58, 61, 62, 63, 64, 65, 74], "keep": [3, 8, 53, 56, 59], "80": [3, 58], "delight": 3, "stochast": [3, 18], "depth": [3, 5, 11, 12, 18, 56, 65], "deep": [3, 55, 65, 73], "drop": [3, 11, 18], "residu": [3, 18, 62, 65], "branch": [3, 9, 11, 18, 58], "architectur": [3, 9, 11, 16, 17, 18], "merg": [3, 18], "batch_siz": [3, 9, 10, 11, 13, 15, 16, 18, 21, 23, 32, 33, 36, 47, 49, 53], "sequence_length": [3, 10, 11, 18, 23], "num_channel": [3, 11, 18, 36], "also": [3, 4, 7, 26, 28, 49, 53, 55, 56, 57], "mask": [3, 9, 10, 11, 13, 18, 21, 27, 30, 35, 38, 43, 53, 69, 70], "make": [3, 7, 8, 18, 23, 24, 33, 35, 38, 53], "sequenc": [3, 5, 11, 18, 24, 35, 53], "divis": [3, 12, 18, 33, 36, 38, 53], "befor": [3, 11, 18, 23, 35, 37, 53], "inf": [3, 11, 18], "unmask": [3, 11, 18], "math": 3, "extra": [3, 24, 26, 27, 28, 41, 42, 43, 44, 46, 49, 51, 53], "To": [3, 9, 13, 15, 17, 35, 41, 42, 43, 44, 46, 55, 61, 64, 69, 73], "print": [3, 7, 9, 41, 42, 43, 44, 46, 53], "custom": [3, 37, 41, 42, 43, 44, 46], "inform": [3, 23, 24, 26, 27, 28, 33, 41, 42, 43, 44, 46, 49, 51, 56], "re": [3, 9, 11, 18, 41, 42, 43, 44, 46, 52], "method": [3, 7, 9, 11, 13, 16, 17, 24, 26, 27, 28, 33, 35, 41, 42, 43, 44, 46, 53, 55, 73], "your": [3, 41, 42, 43, 44, 46, 59], "own": [3, 28, 41, 42, 43, 44, 46, 57], "string": [3, 7, 11, 24, 26, 27, 28, 31, 35, 41, 42, 43, 44, 45, 46, 49, 51, 52, 53], "accept": [3, 41, 42, 43, 44, 46, 49], "window_s": [3, 18], "divisbl": 3, "scale_factor": 3, "nearest": 3, "align_corn": 3, "union": [3, 8, 18, 35, 49, 52, 69, 70], "scale": [3, 11, 12, 18, 26, 33, 35, 73], "algorithm": 3, "bicub": [3, 56], "trilinear": 3, "corner": [3, 6, 7, 8], "align": [3, 24, 37], "thu": [3, 31], "preserv": 3, "those": [3, 12, 27], "onli": [3, 7, 11, 21, 26, 28, 31, 38, 49, 53, 54, 55, 59, 64], "effect": [3, 45, 55, 56, 64], "d_": 3, "norm_typ": [3, 5], "num_group": [3, 5], "either": [3, 5, 41, 59], "below": [3, 5, 7, 33, 41, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 74], "mention": [3, 5, 23], "wai": [3, 5, 11, 25, 26, 33, 54], "scenario": [3, 5], "entir": [3, 5, 37], "g": [3, 5, 9, 13, 16, 24, 27, 31, 33, 41, 45, 49, 53, 55, 62], "differ": [3, 5, 11, 12, 15, 16, 18, 21, 24, 31, 33, 35, 37, 41, 43, 49, 55, 57, 59], "In": [3, 5, 31, 38, 41, 42, 44, 45, 52, 56, 68, 69, 70], "name": [3, 4, 5, 9, 11, 13, 15, 16, 17, 18, 22, 24, 26, 27, 28, 29, 30, 31, 33, 38, 41, 53, 56, 59], "gaussian": 4, "error": [4, 53, 55, 64], "unit": [4, 18], "hard": [4, 44], "search": [4, 26, 53, 62], "negative_slop": 4, "01": [4, 7], "leaki": 4, "see": [4, 7, 11, 18, 19, 23, 24, 27, 28, 31, 35, 41, 55, 56, 58, 61, 65, 68, 69, 74], "rectifi": 4, "nonlinear": 4, "improv": [4, 18], "acoust": 4, "detail": [4, 18, 19, 35, 55], "num_paramet": 4, "init": 4, "25": [4, 33, 58, 64, 67], "parametr": 4, "silu": 4, "known": [4, 28], "act_typ": 4, "provid": [4, 18, 24, 31, 33, 35, 37, 52, 53, 55], "correspond": [4, 12, 23, 26, 28, 30, 37, 41, 53], "config": [4, 9, 11, 13, 33, 41, 53, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73], "neg": [4, 8, 35], "slope": [4, 12], "neg_slop": 4, "ep": [5, 8], "1e": [5, 8, 11, 18, 49], "05": [5, 8, 11, 18, 56, 64], "affin": 5, "track_running_stat": 5, "denomin": [5, 8], "numer": [5, 8, 18, 29], "stabil": [5, 8], "running_mean": 5, "running_var": 5, "track": [5, 28, 31, 53], "varianc": [5, 7, 20], "fp32": 5, "l": 5, "separ": [5, 7, 16, 18, 38, 53, 64, 67, 70], "instancenorm": 5, "normalized_shap": 5, "elementwise_affin": 5, "torch": [5, 7, 11, 18, 20, 49, 53, 54], "time": [5, 18, 31, 36, 49, 55, 59], "_shape": 5, "ldot": 5, "integ": [5, 10, 11, 22, 23, 25, 31, 33, 35, 47, 53], "treat": [5, 24], "singleton": 5, "precis": [5, 49, 53, 67, 68], "syncron": 5, "synchron": 5, "match": [6, 23, 27, 28, 49, 53], "box": [6, 7, 8, 9, 13, 14, 18, 27, 31, 35, 43, 53], "label": [6, 8, 9, 10, 11, 13, 15, 16, 21, 25, 26, 27, 28, 29, 31, 35, 41, 42, 43, 44, 46, 49, 53], "bg_class_id": 6, "assign": [6, 8], "via": [6, 31], "process": [6, 13, 26, 33, 35, 49, 54], "background": [6, 8, 14, 25, 60], "index": [6, 8, 11, 18, 24, 25, 26, 28, 29, 30, 31, 33, 53, 73], "gt_box": [6, 7, 8], "ground": [6, 7, 8, 41, 43], "truth": [6, 7, 8, 41, 43], "form": [6, 7, 8, 11, 12, 23, 31, 33, 41, 43, 45, 46, 49, 53], "xyxi": [6, 27], "4": [6, 8, 11, 12, 13, 18, 27, 33, 35, 43, 46, 53, 56, 58, 61, 62, 64, 67, 70], "gt_label": [6, 8], "center": [6, 7, 35], "c_x": [6, 7], "c_y": [6, 7], "m": [6, 27, 33, 38, 49, 60, 71, 73], "matched_box": 6, "matched_box_label": 6, "matcher": 6, "pred_loc": [6, 7], "decod": [6, 16, 28], "predict": [6, 7, 8, 9, 13, 14, 18, 26, 38, 39, 41, 42, 43, 44, 45, 46, 49, 53, 69], "locat": [6, 7, 27, 28, 56, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70], "val": [6, 28, 35, 39, 49, 53, 56], "args_str": 6, "assign_prior": [7, 8], "box_iou": [7, 8], "hard_negative_min": [7, 8], "ema_momentum": 7, "0005": [7, 56], "exponenti": [7, 56], "move": [7, 23, 53, 56], "show": 7, "current": [7, 18, 33, 38, 49, 53, 54, 59], "gpu": [7, 23, 33, 45, 53, 55, 56, 61, 62, 63, 64, 65, 67, 70], "resid": 7, "anchor_box": 7, "center_vari": 7, "size_vari": 7, "invers": 7, "eq": 7, "prior_box": 7, "cx": 7, "cy": 7, "y": [7, 18, 49], "obj": [7, 53], "sep": [7, 52], "strip": 7, "wt_loc": 7, "load": [7, 24, 53, 73], "pre": [7, 18, 55, 58, 61], "whose": [7, 38, 69], "path": [7, 11, 18, 24, 30, 31, 35, 37, 53, 59, 66, 67, 68, 69, 70], "file": [7, 23, 24, 28, 31, 35, 37, 38, 53, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73], "state_dict": [7, 53], "named_paramet": 7, "force_ev": 7, "requires_grad": 7, "put": 7, "eval": [7, 35, 41, 61, 64, 66, 67, 68, 69, 70], "By": [7, 24, 33, 36, 53, 55, 61], "sure": [7, 8, 35, 53], "alwai": 7, "stai": 7, "ie": 7, "execut": [7, 11], "10": [7, 25, 26, 31, 33, 41, 49, 58], "20": [7, 33, 58], "verbos": 7, "allow": [7, 11, 18, 26, 31, 33, 41, 45, 53, 55, 56, 59], "freez": [7, 9], "immedi": 7, "comma": 7, "regex": 7, "express": 7, "exampl": [7, 8, 9, 11, 24, 26, 27, 31, 33, 41, 49, 52, 53, 55, 56, 57, 58, 61, 64, 67, 70], "conv": [7, 11, 12, 18], "top": [7, 31, 49, 53, 55, 58], "level": [7, 11, 16, 17, 57], "classifi": [7, 11], "everyth": 7, "except": [7, 11, 24, 37, 52, 53], "probe": 7, "conv1": 7, "layer1": 7, "layer2": 7, "layer3": 7, "up": [7, 51, 53, 56, 74], "sequenti": [7, 11, 14, 18, 33, 35], "ordereddict": 7, "relu1": 7, "conv2": 7, "64": 7, "relu2": 7, "argpars": [7, 23, 26, 28, 35, 52], "_": [7, 47, 53], "purpos": [7, 9, 11, 13, 15, 16, 17, 21, 28, 38, 63, 73], "init_method": 7, "kaiming_norm": [7, 56], "std_val": 7, "fulli": 7, "connect": [7, 18], "differnet": 7, "corner_form_prior": 8, "iou_threshold": 8, "background_id": 8, "num_target": 8, "num_prior": 8, "overlap": [8, 11], "boxes0": 8, "boxes1": 8, "intersect": [8, 22, 35, 49, 69, 70], "two": [8, 11, 24, 26, 33, 35, 41, 43, 49, 53], "small": [8, 12, 18, 43, 58], "iou": 8, "loss": [8, 41, 42, 43, 44, 45, 46, 49, 56], "neg_pos_ratio": 8, "suppress": 8, "presenc": 8, "larg": [8, 12, 18, 26, 58, 62], "cut": 8, "ratio": [8, 11, 12, 18, 35], "than": [8, 11, 23, 35, 53, 55, 64], "usual": [8, 10, 11, 49, 53], "audiobyteform": [9, 10], "baseaudioclassif": [9, 10], "baseimageencod": [9, 11, 13, 15, 16], "check_model": [9, 11], "update_classifi": [9, 11, 16, 17], "extract_end_points_al": [9, 11], "extract_end_points_l4": [9, 11], "extract_featur": [9, 11], "forward_classifi": [9, 11], "set_model_specific_opts_before_model_build": [9, 11, 16], "unset_model_specific_opts_after_model_build": [9, 11, 16], "unfold_token": [9, 11], "apply_token_reduction_net": [9, 11], "get_backbone_input": [9, 11], "backbone_forward": [9, 11], "get_downsampler_nam": [9, 11], "get_downsampl": [9, 11], "basic_block": [9, 11], "swintransform": [9, 11], "visiontransform": [9, 11], "update_layer_norm_ep": [9, 11, 13], "reset_simple_fpn_param": [9, 11], "extract_patch_embed": [9, 11], "rcnn_util": [9, 13], "basedetect": [9, 13], "reset_layer_paramet": [9, 13], "check_feature_map_output_channel": [9, 13], "maskrcnnencod": [9, 13], "get_augmented_tensor": [9, 13], "maskrcnndetector": [9, 13], "set_norm_layer_opt": [9, 13], "reset_norm_layer_opt": [9, 13], "reset_generalized_rcnn_transform": [9, 13], "singleshotmaskdetector": [9, 13], "coordin": [9, 13, 18, 31, 35, 43], "reset_lay": [9, 13], "process_anchors_ar": [9, 13], "get_backbone_featur": [9, 13], "ssd_forward": [9, 13], "postprocess_detect": [9, 13], "detectionpredtupl": [9, 13, 49], "basemultimodalimagetext": [9, 15], "update_image_classifi": [9, 15], "base_seg_head": [9, 16], "deeplabv3": [9, 16, 58, 70, 71, 73], "pspnet": [9, 16, 18, 58, 70], "simple_seg_head": [9, 16], "basesegment": [9, 16], "maybe_seg_norm_lay": [9, 16], "set_default_norm_lay": [9, 16], "segencoderdecod": [9, 16], "sub": [9, 11, 13, 15, 16, 17, 24, 27, 28, 30, 36, 41, 42, 43, 44, 45, 46], "module_nam": [9, 13, 15, 17], "multipl": [9, 11, 13, 15, 17, 22, 28, 33, 35, 55], "pop": [9, 13, 15, 17], "concaten": [9, 13, 15, 17, 23, 27, 28, 35, 54], "encod": [9, 11, 13, 15, 16, 17, 18, 21, 35, 57], "creat": [9, 11, 13, 15, 16, 18, 21, 22, 24, 26, 33, 53, 72, 73], "dummi": [9, 10, 11, 13, 15, 16, 21, 23], "ci": [9, 11, 13, 15, 16, 21], "cd": [9, 11, 13, 15, 16, 21, 74], "prepar": [9, 11, 18], "infer": [9, 11, 18, 28], "parameter": [9, 11, 18], "possibl": [9, 11, 35], "vari": [9, 11, 49], "so": [9, 11, 16, 31, 33, 53, 61, 64], "have": [9, 11, 23, 28, 49, 52, 53, 54, 55, 57, 61], "exist": [9, 11, 31, 37, 49, 53], "note": [9, 11, 13, 16, 17, 24, 30, 31, 33, 35, 37, 41, 49, 53, 56, 58, 61, 62, 63, 64, 65, 68, 69], "typic": [9, 11, 13, 16, 17, 33, 46, 55], "reus": [9, 13, 16, 17], "flop": 9, "rank": [9, 33, 45, 54, 61, 64], "categori": [9, 25, 31, 41, 56, 59], "model_nam": [9, 48], "thei": [9, 24, 53, 56, 57], "dataset": [9, 18, 22, 23, 32, 33, 35, 40, 55, 60, 64, 69, 70, 71, 72, 73, 77], "read": [9, 24, 27, 28, 30, 31, 37], "respect": [9, 56, 64], "audio": [10, 22, 23, 25, 36, 37], "byte": [10, 11, 28, 35], "audio_byt": [10, 22], "logit": [10, 11, 42, 44, 53], "could": [10, 11, 24, 35, 53], "get_configur": [11, 12], "compoundscalingconfig": [11, 12], "width_mult": [11, 12], "depth_mult": [11, 12], "train_resolut": [11, 12], "efficientnetblockconfig": [11, 12], "blockparamsconfig": [11, 12], "add_squeeze_channel": [11, 12], "check": [11, 31, 33, 50, 53], "adher": [11, 68, 69], "structur": [11, 18, 26, 30, 31, 68, 69, 71, 73], "easi": [11, 38], "integr": 11, "downstream": 11, "n_class": [11, 16, 17, 18, 24, 47, 60], "fine": 11, "tune": 11, "use_l5": 11, "use_l5_exp": [11, 17], "layer_5": 11, "conv_1x1_exp": 11, "down": [11, 18, 53], "stream": 11, "till": 11, "layer_4": 11, "howev": [11, 24, 55], "intermedi": [11, 12, 18], "augment": [11, 19, 23, 33, 35, 41], "librari": [11, 16, 53, 55, 73], "origin": [11, 16, 18, 35, 38, 53], "unset": [11, 16], "default_opts_info": [11, 16], "were": [11, 12, 16], "ridden": [11, 16], "previous": [11, 16, 53], "amount": [11, 31], "x_mask": 11, "portion": [11, 35], "reduc": [11, 18, 38, 53, 54, 64], "backbon": [11, 16, 18, 61, 68, 69, 70], "new": [11, 12, 26, 31, 33, 35, 49, 72, 73], "version": [11, 25, 33, 55, 56, 57, 74], "downsampl": 11, "reduct": [11, 54], "net": [11, 53, 63], "rather": [11, 23], "new_sequence_length": 11, "idx": [11, 53], "repres": [11, 24, 26, 27, 28, 31, 51], "donwsampl": 11, "occur": [11, 18], "desir": [11, 18, 35, 37], "block_index": 11, "num_block": 11, "token_mixer_typ": 11, "mlp_ratio": [11, 18], "drop_rat": 11, "drop_path_r": 11, "inference_mod": [11, 18], "use_layer_scal": [11, 18], "layer_scale_init_valu": [11, 18], "block": [11, 12, 18, 57], "stage": [11, 12, 18, 49], "mixer": [11, 18], "mlp": [11, 18], "flag": [11, 18, 21, 28], "instanti": [11, 18], "turn": [11, 18], "regular": 11, "faster": [11, 64], "reparametr": 11, "mobilenet": [11, 13, 53, 57, 73, 77], "our": [11, 18, 57, 73], "7x7": 11, "replac": [11, 52], "3x3": [11, 12], "maxpool": 11, "swin": [11, 18], "hierarch": [11, 26], "vision": [11, 12, 18, 26, 62, 63, 64, 65, 67, 68, 70, 73], "shift": [11, 18, 26, 35], "torchvis": [11, 12, 26, 35, 59], "repositori": [11, 53], "inspir": 11, "earli": 11, "help": [11, 52, 53], "better": [11, 53, 57], "odd": 11, "u": [11, 33, 41, 45, 56], "suggest": 11, "deit": [11, 12], "configur": [12, 17, 33, 35, 41, 58, 61, 62, 63, 64, 65, 66, 68, 69], "associ": [12, 23], "These": [12, 23, 55, 58], "http": [12, 13, 18, 25, 28, 33, 36, 47, 51, 53, 55, 60, 63, 68, 69, 70], "arxiv": [12, 13, 18, 25, 33, 47, 51, 55, 62, 69], "org": [12, 13, 18, 25, 33, 36, 47, 51, 55], "pdf": [12, 18], "2012": [12, 30, 69, 70], "12877": 12, "compound": 12, "expand_ratio": [12, 18], "num_lay": 12, "mbconv": 12, "notabl": 12, "too": 12, "w_0": 12, "w_a": 12, "w_m": 12, "se_ratio": [12, 18], "bottleneck_multipli": [12, 18], "quant": 12, "quantiz": 12, "github": [12, 18, 28, 47, 53, 73, 74], "com": [12, 18, 47, 53, 60, 68, 69, 70, 74], "blob": [12, 47, 53], "c06d52b1c5f6aee36802661c3ebc6347b97cc59": 12, "py": [12, 26, 27, 31, 47, 53, 57, 70], "l203": 12, "total": [12, 31, 45], "xblock": 12, "log": [12, 49, 53, 58], "refer": [12, 18, 59], "excit": [12, 18], "se": [12, 18], "bottleneck": [12, 18, 62], "config_dict": 12, "per_layer_squeeze_channel": 12, "squeeze_channel": [12, 18], "ith": [12, 33], "tini": [12, 58], "effici": [12, 18, 33, 62], "distil": [12, 41, 52], "through": [12, 18, 49, 53, 57], "huge": 12, "variant": [12, 18, 33, 55, 64], "worth": 12, "16x16": 12, "word": 12, "recognit": [12, 26, 62, 65, 73], "vit_config": 12, "fastrcnnconvfchead": [13, 14], "rpnhead": [13, 14], "maskrcnnhead": [13, 14], "maskrcnnpredictor": [13, 14], "fastrcnnpredictor": [13, 14], "replace_syncbn_with_syncbnfp32": [13, 14], "layer_nam": 13, "output_strid": [13, 18, 38], "projection_channel": 13, "encoder_lr_multipli": 13, "rcnn": [13, 27, 43], "1703": 13, "06870": 13, "default_norm": 13, "bound": [13, 14, 27, 31, 35, 53], "anchor_ar": 13, "end_point": 13, "post": 13, "nm": 13, "field": [13, 23, 24, 27, 28, 31], "input_s": 14, "fc_layer": 14, "chw": 14, "fcn": [14, 49], "num_anchor": 14, "conv_depth": 14, "rpn": [14, 43], "regress": [14, 43], "callabl": [14, 33, 35, 53], "dim_reduc": 14, "num_class": [14, 35, 53, 69], "standard": [14, 18, 24, 26, 33, 55], "fast": [14, 18], "modal": [15, 28, 45], "image_encod": 15, "projection_dim": [15, 21], "baseseghead": [16, 17], "forward_aux_head": [16, 17], "forward_seg_head": [16, 17], "reset_head_paramet": [16, 17], "simpleseghead": [16, 17], "finetun": [16, 17, 53], "seg_head": 16, "semant": [16, 46, 71, 73], "enc_conf": 17, "enc_out": 17, "level5": 17, "mere": 17, "probl": 17, "atrous_r": 18, "is_sep_conv": 18, "deeplab": 18, "atrou": [18, 69], "standaard": 18, "stochastic_depth_prob": 18, "invert": [18, 62], "other": [18, 24, 41, 46, 62, 64], "parent": [18, 57], "stem": 18, "patch_siz": 18, "reparameteriz": 18, "pleas": [18, 24, 33, 35, 41, 55, 58, 61, 66, 68, 69, 73], "hybrid": 18, "mix": [18, 53], "logic": [18, 35, 52, 57], "norm": 18, "hidden_channel": 18, "ffn": 18, "drop_path": 18, "metaform": 18, "actual": 18, "what": 18, "mhsa": 18, "768": [18, 33], "spatial_shap": 18, "7": [18, 58], "condit": 18, "pyramid": 18, "fpn": 18, "use_s": 18, "act_fn_nam": 18, "se_scale_fn_nam": 18, "squeeze_factor": 18, "expand": [18, 35], "skip_connect": 18, "skip": 18, "use_scale_branch": 18, "num_conv_branch": 18, "One": [18, 54], "millisecond": 18, "mobil": [18, 62, 63, 64, 67, 70, 73], "2206": 18, "04040": 18, "whether": [18, 24, 31, 37, 53], "work": [18, 54], "like": [18, 30, 57, 59], "repvgg": 18, "vgg": 18, "convnet": 18, "great": 18, "again": 18, "2101": 18, "03697": 18, "obtain": [18, 28, 53, 64], "plain": 18, "small_kernel_s": 18, "overparameter": 18, "replknet": 18, "dingxiaoh": 18, "transformer_dim": 18, "ffn_dim": 18, "n_transformer_block": 18, "head_dim": 18, "32": [18, 33, 38, 56, 61, 64], "ffn_dropout": 18, "patch_h": 18, "patch_w": 18, "transformer_norm_lay": 18, "conv_ksiz": 18, "no_fus": 18, "local": [18, 26, 28, 45, 53, 74], "combin": [18, 23, 27, 28, 33, 35, 38, 41], "feature_map": 18, "info_dict": 18, "attn_unit_dim": 18, "ffn_multipli": 18, "n_attn_block": 18, "attn_norm_lay": 18, "layer_norm_2d": 18, "pool_siz": 18, "scene": [18, 26], "pars": [18, 52, 53], "width_in": 18, "width_out": 18, "figur": [18, 55], "retrun": 18, "stage_index": 18, "consist": [18, 28], "stage_depth": 18, "being": [18, 31, 53], "mid_channel": 18, "basic": [18, 19, 27], "mid": 18, "survival_prob": 18, "third": 18, "scale_fn_nam": 18, "senet": 18, "n_anchor": 18, "n_coordin": 18, "proj_channel": 18, "made": 18, "fewer": 18, "compar": [18, 53, 55], "inner_dim": 18, "256": [18, 33, 53, 55, 56], "inner": 18, "roialign": 18, "view": 18, "its": [18, 28, 31, 35, 41, 53, 54, 56, 57], "order": [18, 29, 35, 36], "layout": 18, "qkv_weight": 18, "proj_weight": 18, "relative_position_bia": 18, "shift_siz": 18, "attention_dropout": 18, "qkv_bia": 18, "proj_bia": 18, "msa": 18, "rel": 18, "support": [18, 26, 35, 58, 66, 73], "non": [18, 31, 53], "hidden": 18, "attn_lay": 18, "ffn_latent_dim": 18, "stochastic_dropout": 18, "partit": 18, "chunk": 18, "num_window": 18, "undo": 18, "window_shift": 18, "due": 18, "most": [18, 55, 59], "don": [18, 53], "bleed": 18, "across": [18, 45, 49, 54], "begin": 18, "x_window": 18, "window_x_and_attent": 18, "unwindow": 18, "Its": 18, "padded_sequence_length": [18, 23], "docstr": [18, 31], "seri": [18, 73], "offset": 18, "Then": [18, 53, 54], "sequence_length_2": 18, "equal": [18, 35, 53, 54], "fixedsampl": [19, 20], "uniformsampl": [19, 20], "high": [19, 20, 57, 73], "low": [19, 20], "random_nois": [19, 20], "random_contrast": [19, 20], "random_bright": [19, 20], "trainabl": 19, "min_val": [20, 33, 53], "max_val": [20, 33, 53], "hard_clip": 20, "clip_fn": 20, "sample_shap": 20, "data_typ": 20, "float32": 20, "min_fn": 20, "max_fn": 20, "properti": [20, 24], "random": [20, 26, 31, 35, 37, 53], "nois": [20, 22, 35], "magnitud": 20, "bright": 20, "text_token": [21, 22], "context_length": 21, "return_all_token": 21, "boolean": [21, 37, 53], "eot": 21, "hidden_dim": [21, 49], "dimension": [21, 35, 47, 53], "collate_fn": [22, 32, 57], "byteformer_collate_funct": 22, "byteformer_image_collate_fn": [22, 23], "apply_pad": [22, 23], "apply_pil_sav": [22, 23], "apply_shuffle_byt": [22, 23], "apply_mask_posit": [22, 23], "apply_random_uniform_nois": [22, 23], "apply_byte_permut": [22, 23], "apply_torchaudio_sav": [22, 23], "byteformer_audio_collate_fn": [22, 23], "collate_funct": 22, "pytorch_default_collate_fn": [22, 23], "unlabeled_image_data_collate_fn": [22, 23], "image_classification_data_collate_fn": [22, 23], "default_collate_fn": [22, 23], "arguments_collate_fn": [22, 23], "build_collate_fn": [22, 23], "build_test_collate_fn": [22, 23], "speech_commands_v2": [22, 24], "base_image_classification_dataset": [22, 24], "base_imagenet_shift_dataset": [22, 24], "imagenet": [22, 24, 28, 56, 59, 60, 67, 70, 71, 73, 77], "imagenet_a": [22, 24], "imagenet_r": [22, 24], "imagenet_sketch": [22, 24], "imagenet_synset": [22, 24], "imagenet_v2": [22, 24], "places365": [22, 24], "coco_bas": [22, 24], "coco_mask_rcnn": [22, 24], "coco_ssd": [22, 24], "flickr": [22, 24], "img_text_tar_dataset": [22, 24], "ade20k": [22, 24, 59, 70], "base_segment": [22, 24], "coco_segment": [22, 24], "pascal_voc": [22, 24, 70], "video": [22, 24, 26, 33, 37, 73], "dataset_bas": [22, 59], "basedataset": [22, 24, 25, 32, 59], "load_from_serv": [22, 24], "get_augmentation_transform": [22, 24], "share_dataset_argu": [22, 24, 26, 27, 28], "get_item_metadata": [22, 24, 33], "baseimagedataset": [22, 24, 26, 27, 28, 30, 59], "read_image_pil": [22, 24], "basevideodataset": [22, 24, 59], "clips_per_video": [22, 24, 37], "n_frames_per_clip": [22, 24], "videometadatadict": [22, 24], "video_fp": [22, 24, 35, 37], "total_video_fram": [22, 24, 37], "video_dur": [22, 24], "audio_fp": [22, 24, 25, 35, 37], "build_dataset_from_registri": [22, 24], "get_test_dataset": [22, 24], "get_train_val_dataset": [22, 24], "arguments_dataset": [22, 24], "loader": [22, 28, 57], "dataload": 22, "cvnetsdataload": [22, 32], "update_indic": [22, 32, 33], "samples_in_dataset": [22, 32], "get_sample_indic": [22, 32], "sampler": [22, 24, 32, 57, 73], "base_sampl": 22, "basesampl": [22, 33, 55], "get_indic": [22, 33], "set_epoch": [22, 33], "update_scal": [22, 33, 55], "basesamplerddp": [22, 33, 55], "get_indices_rank_i": [22, 33], "get_batch_size_from_opt": [22, 33], "batch_sampl": [22, 32, 55], "batchsampl": [22, 33, 55], "batchsamplerddp": [22, 33, 55], "chain_sampl": 22, "chainsampl": [22, 33], "build_chain_sampl": [22, 33], "multi_scale_sampl": [22, 55], "multiscalesampl": [22, 33, 55], "multiscalesamplerddp": [22, 33, 55], "image_batch_pair": [22, 33], "make_video_pair": [22, 33], "create_intervallic_integer_list": [22, 33], "make_tuple_list": [22, 33], "variable_batch_sampl": [22, 55, 56], "variablebatchsampl": [22, 33, 55], "variablebatchsamplerddp": [22, 33, 55], "build_sampl": [22, 33], "add_sampler_argu": [22, 33], "base_token": 22, "basetoken": [22, 34], "get_vocab_s": [22, 34], "get_eot_token": [22, 34], "get_sot_token": [22, 34], "get_encod": [22, 34], "clip_token": 22, "cliptoken": [22, 34], "arguments_token": [22, 34], "build_token": [22, 34], "audio_aux": [22, 35], "mfcc": [22, 35], "gain": [22, 35], "load_noise_fil": [22, 35], "setfixedlength": [22, 35], "roll": [22, 35], "lambdaaudio": [22, 35], "audioresampl": [22, 35], "standardizechannel": [22, 35], "torchaudiosav": [22, 23, 35], "base_transform": 22, "basetransform": [22, 24, 35, 37], "compos": [22, 35, 55], "image_byt": 22, "pilsav": [22, 23, 35], "shufflebyt": [22, 23, 35], "maskposit": [22, 23, 35], "bytepermut": [22, 23, 35], "randomuniformnois": [22, 23, 35], "image_pil": 22, "fixedsizecrop": [22, 35], "scalejitt": [22, 35], "randomresizedcrop": [22, 35], "get_rrc_param": [22, 35], "autoaug": [22, 35], "randaug": [22, 35], "trivialaugmentwid": [22, 35], "randomhorizontalflip": [22, 35], "randomrot": [22, 35], "resiz": [22, 35, 56, 67, 68, 69, 70], "centercrop": [22, 35], "ssdcrope": [22, 35], "photometricdistort": [22, 35], "boxpercentcoord": [22, 35], "instanceprocessor": [22, 35], "randomres": [22, 35], "randomshortsizeres": [22, 35], "randomeras": [22, 35], "randomgaussianblur": [22, 35], "randomcrop": [22, 35], "get_param": [22, 35], "get_params_from_box": [22, 35], "get_params_from_mask": [22, 35], "totensor": [22, 35, 37], "randomord": [22, 35], "randaugmenttimm": [22, 35], "image_torch": 22, "randommixup": [22, 35], "randomcutmix": [22, 35], "apply_mixing_transform": [22, 35], "setup_s": [22, 35], "jaccard_numpi": [22, 35], "saveinput": [22, 35], "save_video_with_annot": [22, 35], "randomshortsizeresizecrop": [22, 35], "cropbyboundingbox": [22, 35], "expand_box": [22, 35], "shuffleaudio": [22, 35], "arguments_augment": [22, 35], "video_read": [22, 57], "base_av_read": 22, "videodurationdoesnotmatchaudiodurationerror": [22, 37], "baseavread": [22, 37], "get_frame_transform": [22, 37], "check_video": [22, 37], "read_video": [22, 37], "num_fram": [22, 36, 37], "random_sampl": [22, 37], "uniform_sampl": [22, 37], "read_video_file_into_clip": [22, 37], "dummy_audio_video_clip": [22, 37], "decord_read": 22, "decordavread": [22, 37], "pyav_read": 22, "pyavread": [22, 37], "arguments_video_read": [22, 37], "get_video_read": [22, 37], "create_test_load": 22, "test": [22, 24, 26, 28, 31, 33], "create_train_val_load": 22, "valid": [22, 24, 27, 28, 30, 33, 35, 37, 38, 41, 52, 53, 55, 56, 59, 61, 62, 63, 64, 65, 68, 69], "get_num_data_samples_as_int_or_map": 22, "composit": [22, 41], "collat": 23, "varieti": 23, "particular": [23, 28], "advantag": 23, "parallel": [23, 33, 55], "back": [23, 35], "cannot": 23, "approach": 23, "modifi": [23, 35], "assum": [23, 35, 49, 60, 61], "abov": [23, 28, 46], "paragraph": 23, "wrapper": [23, 33, 43], "around": 23, "item": [23, 24, 35, 53], "sample_id": [23, 25], "meet": [23, 26], "engin": 23, "speechcommandsv2dataset": [24, 25], "get_sampl": [24, 25], "get_transformed_sampl": [24, 25], "baseimageclassificationdataset": [24, 26], "baseimagenetshiftdataset": [24, 26], "post_init_check": [24, 26], "class_id_to_imagenet_class_id": [24, 26], "imagenetdataset": [24, 26, 57, 59], "imagenetadataset": [24, 26], "imagenetrdataset": [24, 26], "imagenetsketchdataset": [24, 26], "imagenetv2dataset": [24, 26], "places365dataset": [24, 26], "basedetectiondataset": [24, 27], "cocodetect": [24, 27], "get_boxes_and_label": [24, 27], "get_imag": [24, 27], "class_nam": [24, 27, 28, 29, 30], "cocodetectionmaskrcnn": [24, 27], "coco_mask_rcnn_collate_fn": [24, 27], "cocodetectionssd": [24, 27], "generate_anchor": [24, 27], "coco_ssd_collate_fn": [24, 27], "zero_shot": [24, 28], "base_zero_shot": [24, 28], "imagenet_class_nam": [24, 28], "templat": [24, 28], "basemultimodalimgtext": [24, 28], "get_zero_shot_dataset": [24, 28], "get_dataset": [24, 28], "get_zero_shot_pair": [24, 28], "get_dataset_pair": [24, 28], "multi_modal_img_text_collate_fn": [24, 28], "flickrdataset": [24, 28], "extract_cont": [24, 28], "decode_imag": [24, 28], "decode_text": [24, 28], "async_download_file_from_s3": [24, 28], "imgtexttardataset": [24, 28], "arguments_multi_modal_img_text": [24, 28], "ade20kdataset": [24, 30, 59], "adjust_mask_valu": [24, 30], "color_palett": [24, 30], "baseimagesegmentationdataset": [24, 30], "check_dataset": [24, 30], "read_mask_pil": [24, 30], "convert_mask_to_tensor": [24, 30], "cocosegmentationdataset": [24, 30], "coco_to_pascal_map": [24, 30], "pascalvocdataset": [24, 30], "file_has_valid_image_extens": [24, 31], "file_has_allowed_extens": [24, 31], "get_image_path": [24, 31], "select_random_subset": [24, 31], "select_samples_by_categori": [24, 31], "caption_preprocess": [24, 31], "fetch_labels_from_timestamp": [24, 31], "is_train": [24, 28, 33, 35, 37, 55, 59], "is_evalu": [24, 28, 35, 59], "abc": [24, 41, 49], "__getitem__": [24, 26, 27, 35], "_training_transform": 24, "_validation_transform": 24, "evalu": [24, 26, 28, 29, 35, 38, 40, 41, 58, 64], "On": [24, 64], "hand": 24, "theoret": 24, "especi": 24, "difficult": 24, "server": 24, "depend": [24, 31, 33, 46, 49, 53, 55], "1000": [24, 61], "empti": [24, 54], "__repr__": [24, 26, 27, 28, 51], "prefix": [24, 26, 27, 28, 51, 52, 53], "item_idx": 24, "metadata": [24, 25, 28, 33, 35, 37], "dynam": 24, "how": [24, 33, 56, 73], "schema": [24, 35], "pil": [24, 27, 28, 30, 35, 57, 58], "corrupt": 24, "videoclipsampl": 24, "durat": 24, "document": 24, "typeddict": 24, "registri": [24, 33, 41], "dataset_registri": [24, 59], "googl": [25, 26], "speech": [25, 36], "keyword": [25, 31], "spot": 25, "1804": 25, "03209": 25, "v2": [25, 57, 60, 68, 69, 70], "12": 25, "plu": 25, "unknown": 25, "give": 25, "imagefold": [26, 29, 59], "deriv": [26, 57], "overwrit": 26, "subset": [26, 31, 33, 35, 53, 61], "determin": [26, 29, 35, 53], "num_samples_per_categori": [26, 31], "percentage_of_sampl": 26, "accord": 26, "percentag": [26, 31], "doe": [26, 27, 42, 43, 45, 46, 58], "chang": [26, 55, 59, 61, 62, 63, 64, 65, 68, 69], "control": [26, 55], "sample_selection_random_se": 26, "super": [26, 27, 28], "verifi": 26, "correctli": [26, 49], "class_id": 26, "imageclassificationdataset": 26, "databas": 26, "jia": 26, "deng": 26, "wei": [26, 68], "dong": 26, "richard": 26, "socher": 26, "li": 26, "kai": 26, "fei": 26, "2009": 26, "ieee": [26, 62, 65], "confer": [26, 62, 63, 65, 68, 73], "pattern": [26, 35, 62, 65], "imageneta": 26, "real": [26, 55], "world": [26, 45, 55, 61, 64], "unmodifi": 26, "natur": 26, "caus": [26, 55], "accuraci": [26, 53], "substanti": 26, "degrad": 26, "articl": [26, 62, 64, 67, 69, 70], "hendrycks2021na": 26, "titl": [26, 62, 63, 64, 65, 67, 68, 69, 70, 73], "adversari": 26, "author": [26, 62, 63, 64, 65, 67, 68, 69, 70, 73], "dan": 26, "hendryck": 26, "kevin": 26, "zhao": 26, "steven": 26, "basart": 26, "jacob": 26, "steinhardt": 26, "dawn": 26, "song": 26, "journal": [26, 62, 69], "cvpr": 26, "year": [26, 39, 49, 62, 63, 64, 65, 67, 68, 69, 70, 73], "2021": 26, "precomput": 26, "imagenetr": 26, "endit": 26, "art": [26, 73], "cartoon": 26, "deviantart": 26, "graffiti": 26, "embroideri": 26, "graphic": 26, "origami": 26, "paint": 26, "plastic": 26, "plush": 26, "sculptur": 26, "sketch": [26, 66], "tattoo": 26, "toi": 26, "game": 26, "rendit": 26, "hendrycks2021mani": 26, "mani": [26, 33], "face": 26, "robust": [26, 55], "critic": 26, "analysi": 26, "norman": 26, "mu": 26, "saurav": 26, "kadavath": 26, "frank": 26, "wang": [26, 62], "evan": 26, "dorundo": 26, "rahul": 26, "desai": 26, "tyler": 26, "zhu": [26, 62], "samyak": 26, "parajuli": 26, "mike": 26, "guo": 26, "justin": 26, "gilmer": 26, "iccv": 26, "imagenetsketch": 26, "__": 26, "black": 26, "white": 26, "color": [26, 30, 38, 53, 69, 70], "scheme": [26, 47], "inproceed": [26, 62, 63, 65, 68, 73], "wang2019learn": 26, "penal": 26, "power": 26, "haohan": 26, "ge": 26, "songwei": 26, "lipton": 26, "zachari": 26, "xing": 26, "eric": 26, "booktitl": [26, 62, 63, 65, 68, 73], "advanc": [26, 56, 58, 65], "system": [26, 53], "page": [26, 62, 65, 68], "10506": 26, "10518": 26, "2019": [26, 62], "imagenetv2": 26, "studi": 26, "million": 26, "zhou": 26, "lapedriza": 26, "khosla": 26, "oliva": 26, "torralba": 26, "transact": 26, "machin": [26, 28, 54, 60, 61], "intellig": 26, "2017": [26, 39, 49, 62, 69], "dection": 27, "coco": [27, 30, 38, 60, 71, 73], "annot": [27, 30, 31, 35], "extend": [27, 32, 55], "image_id": [27, 49], "image_width": [27, 49], "image_height": [27, 49], "include_mask": 27, "ndarrai": [27, 35, 38, 39, 48, 53], "id": [27, 30, 31, 32, 63], "numpi": [27, 38], "arrai": 27, "num_of_box": 27, "basezeroshotdataset": [28, 29], "generate_text_prompt": [28, 29], "imagenetdatasetzeroshot": [28, 29], "generate_text_prompts_clip": [28, 29], "arguments_zero_shot_dataset": [28, 29], "build_zero_shot_dataset": [28, 29], "img_index": 28, "pair": [28, 33, 45, 49], "caption": [28, 31, 35, 49], "30k": 28, "8k": 28, "hockenmai": 28, "illinoi": 28, "edu": 28, "pictur": 28, "html": [28, 31, 36, 53], "shannon": 28, "denotationgraph": 28, "split": [28, 36, 39, 49, 54], "literatur": 28, "karpathi": 28, "stanford": 28, "peopl": 28, "deepimages": 28, "licens": 28, "cc": 28, "BY": 28, "link": [28, 47, 58, 66], "under": [28, 31, 53, 56, 57], "bsd": 28, "neuraltalk": 28, "et": 28, "al": 28, "research": [28, 53, 55, 60, 68, 69, 70], "root": [28, 53, 66], "json": [28, 52], "raw": [28, 35], "metdatadata": 28, "cap": 28, "download": [28, 53, 68, 69, 70], "flickr30k": 28, "zip": 28, "tar_fil": 28, "tarfil": 28, "file_nam": [28, 38], "anystr": 28, "tar": 28, "byte_data": 28, "tar_file_nam": 28, "cache_loc": [28, 53], "asynchron": 28, "s3": 28, "cach": [28, 35], "directori": [28, 31, 53, 56, 66, 71, 73], "00000000_0_1000": 28, "gz": 28, "00000000_0_imag": 28, "00000000_0_text": 28, "00000000_1_imag": 28, "00000000_1_text": 28, "00000000_1000_2000": 28, "00000000_1000_imag": 28, "00000000_1000_text": 28, "00000000_1001_imag": 28, "00000000_1001_text": 28, "present": [28, 29], "prompt": 29, "someth": 30, "adechallengedata2016": [30, 59], "png": 30, "jpg": [30, 68, 69, 70], "rgb": [30, 69, 70], "ignore_label": 30, "background_idx": 30, "variabl": [30, 33, 53, 56, 61, 73], "pascal": [30, 53, 69, 70], "voc": [30, 53, 69, 70], "vocdevkit": 30, "voc2012": [30, 53], "jpegimag": 30, "segmentationclass": 30, "segmentationclassaug_visu": 30, "imageset": 30, "segmentationclassaug": 30, "segmentationobject": 30, "filenam": [31, 37], "extens": 31, "subdirectori": 31, "random_se": 31, "num_total_sampl": 31, "num_samples_to_select": 31, "percentage_of_samples_to_select": 31, "select": [31, 35, 52], "neither": 31, "seed": 31, "subsampl": [31, 37], "100": [31, 56], "rais": [31, 53], "valueerror": 31, "sample_category_label": 31, "percentage_of_samples_per_categori": 31, "remov": [31, 38, 50], "unwant": 31, "next": [31, 33, 57], "rectangles_dict": 31, "timestamp": 31, "began": 31, "ex": 31, "x0": [31, 35], "left": 31, "y0": [31, 35], "x1": [31, 35], "bottom": 31, "right": 31, "y1": [31, 35], "class_label_nam": 31, "is_vis": 31, "visibl": 31, "video_test": 31, "interpolation_cutoff_threshold_sec": 31, "progressible_label": 31, "collect": [31, 53, 54], "carry_over_kei": 31, "required_kei": 31, "frame": [31, 33, 35, 36, 37, 55], "result": [31, 38, 54, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "retain": 31, "just": [31, 57], "ensur": [31, 38, 53], "request": 31, "suppli": 31, "progress": 31, "tempor": [31, 36], "test_video": 31, "test_fetch_frame_with_progress": 31, "fetch": [31, 53], "pipelin": [31, 38], "fectch": 31, "threshold": [31, 67, 68], "interpol": [31, 56], "far": 31, "apart": 31, "sensic": 31, "prevent": 31, "unrel": 31, "carri": 31, "previou": 31, "rectangl": 31, "bounding_box": 31, "still": 31, "num_work": 32, "pin_memori": [32, 56], "persistent_work": [32, 56], "prefetch_factor": 32, "new_indic": [32, 33], "n_data_sampl": [33, 55], "dataparallel": 33, "__iter__": 33, "repeat": 33, "is_master_nod": [33, 49, 53, 55], "anyth": [33, 53, 55], "might": [33, 37], "distributeddataparallel": 33, "shard": 33, "yield": [33, 55], "ddp": [33, 45, 53, 55, 61, 64], "task_nam": 33, "sampler_config": 33, "mandatori": [33, 41, 43, 45, 46], "train_batch_size0": [33, 56], "val_batch_size0": [33, 56], "data_sampl": 33, "yaml": [33, 41, 56, 60, 62, 63, 64, 65, 67, 68, 69, 70], "chain_sampler_mod": 33, "use_shard": 33, "num_repeat": 33, "truncated_repeat_aug_sampl": 33, "vb": [33, 56, 73], "crop_size_width": [33, 56], "512": 33, "crop_size_height": [33, 56], "max_n_scal": [33, 56], "min_crop_size_width": [33, 56], "max_crop_size_width": [33, 56], "min_crop_size_height": [33, 56], "max_crop_size_height": [33, 56], "check_scal": [33, 56], "16": [33, 35, 61, 64], "chain": 33, "sampler_dict": 33, "about": [33, 41, 42, 43, 45, 46, 55, 56, 64], "noth": 33, "master": [33, 53], "node": [33, 56, 61, 62, 63, 64, 65, 67, 68, 69, 70], "filter": 33, "futur": [33, 38, 53], "crop_size_w": 33, "crop_size_h": 33, "batch_size_gpu0": 33, "max_scal": 33, "check_scale_div_factor": 33, "min_crop_size_w": 33, "160": 33, "max_crop_size_w": 33, "320": [33, 55, 56], "min_crop_size_h": 33, "max_crop_size_h": 33, "memori": [33, 37, 55, 56], "224": [33, 55, 56], "want": [33, 49, 52, 61], "min": 33, "crop": [33, 35, 56], "sort": [33, 55], "default_fram": 33, "n_frame": 33, "base_v": 33, "num_scal": 33, "scale_div_factor": 33, "min_scal": 33, "lower": [33, 53], "higher": [33, 53, 55], "val_list": 33, "tupe": 33, "2110": [33, 55], "02178": [33, 55], "lg": [33, 55], "interv": [33, 55], "sampler_registri": 33, "input_sent": 34, "get_mfcc": [35, 36], "calculate_mfcc": [35, 36], "get_mfcc_featur": [35, 36], "get_padded_featur": [35, 36], "noise_files_dir": 35, "ambient": 35, "cache_s": 35, "tensortyp": 35, "buffer": 35, "manner": [35, 45], "func": 35, "lambda": 35, "user": [35, 53], "resampl": [35, 37], "framer": 35, "img_transform": 35, "fashion": 35, "reorder": 35, "remap": 35, "255": 35, "uniform": 35, "trivialaug": 35, "wide": 35, "horizont": 35, "flip": 35, "rotat": 35, "img_siz": 35, "maintain": 35, "aspect": 35, "greater": 35, "photometer": 35, "distorion": 35, "hyper": [35, 56], "opencv": [35, 57, 58], "Be": [35, 37], "percent": 35, "instance_s": 35, "shortest": 35, "minimum": 35, "maximum": [35, 55], "eras": 35, "blur": 35, "ignore_idx": 35, "area": 35, "smaller": [35, 53], "img_h": 35, "img_w": 35, "target_h": 35, "target_w": 35, "j": 35, "std": 35, "few": 35, "strike": 35, "mixup": 35, "cutmix": 35, "chosen": 35, "sample_kei": 35, "target_kei": 35, "OR": [35, 49], "error_msg": 35, "box_a": 35, "box_b": 35, "num_boxes_a": 35, "np": [35, 38], "osf": 35, "num_boxes_b": 35, "get_frame_capt": 35, "save": [35, 38, 53, 69, 70], "videodataset": 35, "disk": [35, 56], "debug": [35, 53], "visual": [35, 38, 53, 73], "preprocess": 35, "behav": 35, "subtitl": 35, "output_video_path": 35, "t_audio": 35, "audio_raw": 35, "callback": 35, "receiv": [35, 54], "adn": 35, "image_s": 35, "box_coordin": [35, 43], "cover": 35, "boundari": 35, "edg": 35, "expanded_corn": 35, "item_index": 35, "binari": [35, 42], "supervis": 35, "At": [35, 55], "invoc": 35, "particip": [35, 54], "determinist": 35, "decid": [35, 47], "sampling_r": 36, "num_mfcc": 36, "window_length": 36, "023": 36, "mel": 36, "frequenc": 36, "cepstral": 36, "coeffici": [36, 43], "signal": 36, "explan": [36, 53], "librosa": 36, "doc": [36, 57, 60, 68, 69, 70], "main": [36, 38, 53], "stft": 36, "spectrogram": 36, "choos": [36, 59], "23m": 36, "good": 36, "human": 36, "temporal_s": 36, "dividi": 36, "slice": 36, "compon": 36, "spectrogram_length": 36, "As": 36, "batchsiz": 36, "num_audio_channel": 36, "padded_featur": 36, "assertionerror": 37, "audiovideo": 37, "reader": 37, "stream_idx": 37, "audio_sample_r": 37, "custom_frame_transform": 37, "video_onli": 37, "video_frames_per_clip": 37, "total_audio_fram": 37, "aclip_id": 37, "audio_frames_per_clip": 37, "vclip_id": 37, "uniformli": 37, "vid_filenam": 37, "num_frames_per_clip": 37, "output_video_fp": 37, "output_audio_fp": 37, "num_samples_per_clip": 37, "despit": 37, "slight": 37, "avread": 37, "video_frame_timestamp": 37, "num_clip": 37, "num_frames_to_sampl": 37, "decord": 37, "av_fil": 37, "pyav": 37, "detection_util": [38, 57], "coco_map": 38, "coco_evalu": [38, 39], "compute_quant_scor": [38, 39], "segmentation_util": [38, 57], "cityscapes_i": 38, "eval_cityscap": [38, 40], "predict_and_sav": 38, "input_tensor": [38, 53], "input_np": 38, "is_coco_evalu": 38, "orig_h": 38, "orig_w": 38, "applic": [38, 46, 62], "predict_labeled_dataset": 38, "read_and_process_imag": 38, "image_fnam": 38, "predict_imag": 38, "predict_images_in_fold": 38, "main_detection_evalu": 38, "target_mask": 38, "conf_mat": 38, "confusionmatrix": [38, 49], "color_map": 38, "orig_imag": 38, "adjust_label": 38, "is_cityscap": 38, "draw_binary_mask": 38, "pred_mask": 38, "results_loc": [38, 48], "number_of_class": [38, 60], "draw_colored_mask": 38, "main_segmentation_evalu": 38, "test_load": 38, "eval_fn_imag": 38, "eval_fn_video": 38, "trainer": 38, "validation_load": 38, "training_load": 38, "criterion": [38, 41, 42, 43, 44, 45, 46], "optim": [38, 53, 57, 64], "schedul": [38, 50, 57, 64], "gradient_scal": [38, 53], "start_epoch": [38, 53], "start_iter": [38, 53], "best_metr": [38, 53], "model_ema": [38, 53], "cvnet": [38, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 74], "compute_grad_norm": 38, "train_epoch": 38, "val_epoch": 38, "extra_str": 38, "find_easy_sampl": 38, "identifi": 38, "break": 38, "loop": 38, "overhead": 38, "train_sampl": 38, "run_loss_landscap": 38, "autocast_fn": 38, "amp_precis": 38, "float16": 38, "get_batch_s": 38, "log_metr": 38, "lr": [38, 51], "log_writ": [38, 49], "train_loss": 38, "val_loss": 38, "val_ema_loss": 38, "ckpt_metric_nam": 38, "train_ckpt_metr": 38, "val_ckpt_metr": 38, "val_ema_ckpt_metr": 38, "get_log_writ": 38, "save_loc": 38, "pred_dir": 40, "gt_dir": 40, "cityscap": [40, 53], "base_classification_criteria": 41, "baseclassificationcriteria": [41, 42], "binary_cross_entropi": 41, "binarycrossentropi": [41, 42], "cross_entropi": 41, "crossentropi": [41, 42], "base_detection_criteria": 41, "basedetectioncriteria": [41, 43], "mask_rcnn_loss": 41, "maskrcnnloss": [41, 43], "ssd_multibox_loss": 41, "ssdloss": [41, 43], "reset_unscaled_loss_valu": [41, 43], "base_distil": 41, "basedistillationcriteria": [41, 44], "hard_distil": 41, "harddistillationloss": [41, 44], "soft_kl_distil": 41, "softklloss": [41, 44], "base_multi_modal_img_text_criteria": 41, "basemultimodalimagetextcriteria": [41, 45], "contrastive_loss_clip": 41, "contrastivelossclip": [41, 45], "gather_featur": [41, 45], "base_segmentation_criteria": 41, "basesegmentationcriteria": [41, 46], "segcrossentropi": [41, 46], "build_help": 41, "build_cls_teacher_from_opt": [41, 47], "class_weight": 41, "compute_class_weight": [41, 47], "basecriteria": [41, 42, 43, 44, 45, 46], "compute_loss": 41, "abstract": [41, 49], "input_sampl": [41, 42, 43, 44, 45, 46], "compositeloss": 41, "sum": [41, 43, 45, 46, 53], "loss_categori": 41, "loss_weight": 41, "label_smooth": 41, "perceptual_metr": 41, "psnr": 41, "target_valu": 41, "40": [41, 58], "curriculum_method": 41, "cosin": [41, 49, 50, 56, 64], "build_composite_loss_fn": 41, "task_loss_fn_map": 41, "task_loss_wts_map": 41, "scalar": [41, 42, 43, 44, 45, 46, 49], "total_loss": [41, 43, 45, 46, 49], "neuralaugment": 41, "rangeaug": 41, "augmented_tensor": 41, "linear_curriculum": 41, "period": [41, 58], "curriculum": 41, "cosine_curriculum": 41, "build_loss_fn": 41, "add_loss_fn_argu": 41, "loss_registri": 41, "entropi": [42, 44, 46], "maskrcnn": 43, "etc": [43, 57], "loss_classifi": 43, "loss_box_reg": 43, "loss_mask": 43, "loss_object": 43, "loss_rpn_box_reg": 43, "unscal": 43, "confid": 43, "box_label": 43, "reg_loss": [43, 49], "cls_loss": [43, 49], "_forward_distil": 44, "teacher": [44, 47, 52], "student": 44, "soft": [44, 59], "kl": 44, "contrast": 45, "aug": 45, "four": 45, "image_loss": 45, "text_loss": 45, "logit_scal": 45, "image_featur": 45, "text_featur": 45, "use_distribut": 45, "gather": [45, 49, 53, 54], "differenti": 45, "nw": 45, "ce": 46, "segmentation_output": 46, "o": [46, 60], "step": [46, 51, 56], "seg_loss": 46, "aux_loss": 46, "norm_val": 47, "section": 47, "enet": 47, "espnetv2": 47, "1811": [47, 51], "11431": [47, 51], "sacmehta": 47, "b78e323039908f31347d8ca17f49d5502ef1a594": 47, "loaddata": 47, "l16": 47, "rand_basi": 48, "normalize_filt": 48, "ignore_bn": 48, "create_bas": 48, "has_modul": 48, "generate_plot": 48, "xx": [48, 58], "yy": 48, "zz": 48, "plot_save_graph": 48, "save_dir": [48, 53], "grid_a": 48, "grid_b": 48, "loss_surfac": 48, "averageprecisionmetr": 49, "is_distribut": [49, 53], "pred": [49, 53, 69, 70], "force_cpu": 49, "epochmetr": 49, "compute_with_aggreg": 49, "y_pred": 49, "y_true": 49, "aggreg": [49, 53], "happen": 49, "valema": 49, "log_freq": 49, "thereaft": 49, "computation": 49, "heavi": 49, "cocoevalu": 49, "basemetr": 49, "grad_norm": 49, "validaiton": 49, "prepare_cache_result": 49, "detection_result": 49, "summarize_coco_result": 49, "encourag": 49, "confus": [49, 53], "matrix": 49, "imagetextretrievalmetr": 49, "retriev": 49, "distanc": 49, "num_capt": 49, "image2text": 49, "recal": 49, "mean_rank": 49, "median_rank": 49, "text2imag": 49, "get_aggreg": 49, "compute_miou_batch": 49, "epsilon": 49, "07": [49, 58], "ioumetr": 49, "averagemetr": 49, "gather_metr": 49, "preprocess_predict": 49, "preprocess_target": 49, "dummymetr": 49, "test_average_metric_distributed_batchs": 49, "mocker": 49, "lossmetr": 49, "gradnormmetr": 49, "probabilityhistogrammetr": 49, "compute_psnr": 49, "no_uint8_convers": 49, "psnrmetric": 49, "cosine_distance_matrix": 49, "l2_distance_matrix": 49, "l2": 49, "retrievalcmc": 49, "compute_map": 49, "cmc": 49, "k": [49, 53], "setup": 49, "full": 49, "top1": [49, 53, 56], "cmc_calcul": 49, "distance_matrix": 49, "query_id": 49, "cumul": 49, "characterist": 49, "pairwis": 49, "galleri": 49, "top5": [49, 56], "mean_ap": 49, "statist": 49, "metric_nam": 49, "pred_label": 49, "target_label": 49, "batch_tim": 49, "come": 49, "gt": 49, "gradnorm": 49, "loss_valu": 49, "gradient_norm": 49, "took": 49, "avg_statist": 49, "sub_metric_nam": 49, "50": [49, 56, 58, 64, 65, 68], "iter_summari": 49, "n_processed_sampl": 49, "total_sampl": 49, "elapsed_tim": 49, "learning_r": 49, "epoch_summari": 49, "top_k_accuraci": 49, "top_k": 49, "topkmetr": 49, "top1metr": 49, "top5metr": 49, "arguments_stat": 49, "base_schedul": 50, "baselrschedul": [50, 51], "get_lr": [50, 51], "update_lr": [50, 51], "retrieve_lr": [50, 51], "cosineschedul": [50, 51], "cyclic": 50, "cycliclrschedul": [50, 51], "fixedlrschedul": [50, 51], "multi_step": 50, "multisteplrschedul": [50, 51], "polynomi": 50, "polynomialschedul": [50, 51], "build_schedul": [50, 51], "general_lr_sch_arg": [50, 51], "arguments_schedul": [50, 51], "adamoptim": 50, "model_param": 50, "baseoptim": [50, 53], "adamwoptim": 50, "sgdoptim": 50, "check_trainable_paramet": 50, "part": [50, 57, 59], "remove_param_name_kei": 50, "build_optim": 50, "arguments_optim": 50, "curr_it": 51, "1608": 51, "03983": 51, "warm": [51, 56], "strategi": [51, 55], "unrecognizedyamlconfigentri": 52, "warn": [52, 53], "parsekwarg": 52, "option_str": 52, "dest": 52, "narg": 52, "const": 52, "choic": 52, "metavar": 52, "action": 52, "arguments_common": 52, "arguments_ddp": 52, "parser_to_opt": 52, "get_training_argu": 52, "get_eval_argu": 52, "get_conversion_argu": 52, "get_benchmarking_argu": 52, "get_loss_landscape_arg": 52, "parse_validation_metric_nam": 52, "metric": [52, 53, 56, 57], "jsonvalid": 52, "expected_typ": 52, "python": [52, 53, 70, 74], "usag": [52, 53], "import": [52, 53, 57, 59], "assert": [52, 53], "123": 52, "flatten_yaml_as_dict": 52, "parent_kei": 52, "load_config_fil": 52, "extend_selected_args_with_prefix": 52, "match_prefix": 52, "additional_prefix": 52, "certain": 52, "duplic": [52, 57], "underscor": 52, "extract_opts_with_prefix_replac": 52, "replacement_prefix": 52, "copi": [52, 53], "altern": 52, "now": 52, "handler": 52, "dash": [52, 53], "ddp_functional_util": 53, "broadcast": [53, 54], "scatter": [53, 54], "reduce_scatt": [53, 54], "all_gath": [53, 54], "all_to_al": [53, 54], "all_to_all_singl": [53, 54], "all_reduc": [53, 54], "get_model_state_dict": 53, "wrap": 53, "load_state_dict": 53, "strict": 53, "strictli": 53, "enforc": 53, "average_ckpt": 53, "ckpt_loc_list": 53, "checkpoint": [53, 64, 67, 70], "avg_and_save_k_checkpoint": 53, "model_st": 53, "k_best_checkpoint": 53, "max_ckpt_metr": 53, "ckpt_str": 53, "best": [53, 56, 64, 67, 70], "observ": 53, "until": 53, "demonstr": 53, "save_interval_checkpoint": 53, "gradscal": 53, "denot": 53, "backward": 53, "possibli": 53, "get_training_st": 53, "resum": 53, "save_checkpoint": 53, "is_best": 53, "is_ema_best": 53, "ema_best_metr": 53, "save_all_checkpoint": 53, "load_checkpoint": 53, "model_state_dict": 53, "optim_state_dict": 53, "gradient_scaler_state_dict": 53, "ema_state_dict": 53, "load_model_st": 53, "finetune_ema": 53, "copy_weight": 53, "model_src": 53, "model_tgt": 53, "colormap": 53, "matlab": 53, "host": 53, "robot": 53, "ox": 53, "ac": 53, "uk": 53, "devkit": 53, "get_bit_at_idx": 53, "get_color_map": 53, "get_box_color_cod": 53, "get_color_map_list": 53, "unwrap_model_fn": 53, "unwrap": 53, "check_compat": 53, "check_frozen_norm_lay": 53, "device_setup": 53, "create_directori": 53, "dir_path": 53, "move_to_devic": 53, "non_block": 53, "is_coreml_convers": 53, "is_mast": 53, "dist_barri": 53, "dist_monitored_barri": 53, "timeout": 53, "wait_all_rank": 53, "is_start_rank_nod": 53, "get_world_s": 53, "get_node_rank": 53, "distributed_init": 53, "filter_kei": 53, "whitelist": 53, "intput": 53, "get_basic_local_path": 53, "tmp": 53, "force_delet": 53, "use_start_rank": 53, "sync_rank": 53, "url": [53, 61, 63, 64], "tmp_cache_loc": 53, "import_modules_from_fold": 53, "folder_nam": 53, "extra_root": 53, "public": 53, "folder": [53, 58, 61, 67, 68, 69], "library_root": 53, "get_curr_time_stamp": 53, "messag": 53, "color_text": 53, "in_text": 53, "ignore_exception_with_warn": 53, "catch": 53, "toler": 53, "e1": 53, "fail": 53, "profil": 53, "try": [53, 64], "ll": 53, "investig": 53, "But": 53, "stack": 53, "trace": 53, "uncaught": 53, "e2": 53, "road": 53, "look": [53, 56], "find": [53, 57, 73], "append": 53, "traceback": 53, "distinguish": 53, "No": 53, "print_lin": 53, "double_dash_lin": 53, "75": [53, 58, 64, 67], "singe_dash_lin": 53, "67": 53, "print_head": 53, "header": 53, "print_header_minor": 53, "disable_print": 53, "enable_print": 53, "make_divis": 53, "v": 53, "min_valu": 53, "taken": 53, "tf": 53, "repo": 53, "seen": 53, "tensorflow": [53, 55], "slim": 53, "bound_fn": 53, "is_iter": 53, "apply_recurs": 53, "cb": 53, "flatten_to_dict": 53, "dict_sep": 53, "list_sep": 53, "is_pytest_environ": 53, "pytest": 53, "environ": [53, 61, 74], "test_apply_on_valu": 53, "test_flatten_to_dict": 53, "convert_pytorch_to_coreml": 53, "pytorch_model": 53, "jit_model_onli": 53, "coreml": [53, 72, 73], "jit": [53, 60], "assertion_check": 53, "py_out": 53, "jit_out": 53, "registry_nam": 53, "base_class": 53, "lazy_load_dir": 53, "internal_dir": 53, "inject": 53, "write": 53, "know": 53, "potenti": 53, "my_registri": 53, "awesome_class_or_func": 53, "def": [53, 59], "my_awesome_class_or_func": 53, "vanilla": 53, "definit": 53, "reg": 53, "awesome_dict": 53, "hello": 53, "fifo": 53, "inspect": 53, "registryitem": 53, "all_argu": 53, "alreadi": 53, "parse_kei": 53, "key_nam": 53, "arg1": 53, "value1": 53, "arg2": 53, "value2": 53, "base_nam": 53, "test_functional_registri": 53, "test_basic_registr": 53, "cpu_count": 53, "image_size_from_opt": 53, "video_size_from_opt": 53, "create_rand_tensor": 53, "reduce_tensor": 53, "inp_tensor": 53, "reduce_tensor_sum": 53, "all_gather_list": 53, "gather_all_featur": 53, "tensor_to_python_float": 53, "reduce_op": 53, "to_numpi": 53, "img_tensor": 53, "visualize_boxes_xyxi": 53, "draw": 53, "create_colored_mask": 53, "draw_bounding_box": 53, "object_nam": 53, "is_bgr_format": 53, "save_path": 53, "81": [53, 58, 60, 67, 68], "convert_to_cityscape_format": 53, "img": 53, "src": 54, "whole": 54, "sent": 54, "processgroup": 54, "op": 54, "dst": 54, "destin": 54, "appropri": 54, "exactli": 54, "distributed_c10d": 54, "reduceop": 54, "go": 54, "final": 54, "enum": 54, "input_list": 54, "output_tensor_list": 54, "input_tensor_list": 54, "out_tensor_list": 54, "output_split_s": 54, "input_split_s": 54, "cancaten": 54, "divid": 54, "world_siz": 54, "bitwis": 54, "offer": 55, "framework": 55, "mixnet": 55, "built": 55, "timm": 55, "th": 55, "unlik": 55, "mathcal": 55, "h_1": 55, "w_1": 55, "h_2": 55, "w_2": 55, "cdot": 55, "h_n": 55, "w_n": 55, "h_t": 55, "w_t": 55, "peak": 55, "ref": 55, "fig": 55, "sampler_perf_cost": 55, "limit": 55, "128": [55, 56, 64], "192": 55, "would": 55, "address": 55, "issu": 55, "b_t": 55, "frac": 55, "easili": 55, "wherein": 55, "invari": 55, "let": 56, "1k": [56, 60, 67, 70, 73], "a100": [56, 64, 67], "root_train": [56, 59], "root_val": [56, 59, 66], "worker": 56, "num_gpu": 56, "accum": [56, 64], "freq": [56, 64], "mnt": [56, 59], "eval_batch_size0": 56, "image_augment": 56, "incept": 56, "random_resized_crop": 56, "random_horizontal_flip": 56, "shorter": 56, "center_crop": 56, "introduc": 56, "sgd": 56, "consin": 56, "9": [56, 58], "is_iteration_bas": 56, "max_epoch": 56, "150": 56, "warmup_iter": 56, "7500": 56, "warmup_init_lr": 56, "max_lr": [56, 64], "min_lr": [56, 64], "conv_init": 56, "linear_init": 56, "simpli": [56, 59], "least": 56, "stat": 56, "report": [56, 58], "kept": 56, "checkpoint_metr": 56, "checkpoint_metric_max": 56, "quick": 57, "walk": 57, "redact": 57, "mark": [57, 62], "star": 57, "neural_augment": 57, "video_classif": 57, "loss_fn": 57, "categor": 57, "base_cl": 57, "baseencod": [57, 68, 69], "reusabl": 57, "shareabl": 57, "avail": [57, 61, 73], "availab": 57, "recommend": [57, 74], "novel": [57, 73], "found": 57, "script": 57, "main_train": 57, "main_ev": [57, 70], "training_engin": 57, "evaluation_engin": 57, "recent": 58, "pretrain": [58, 60, 61, 64, 66, 67, 68, 69, 70], "72": 58, "91": 58, "34": [58, 65], "21": [58, 68, 69, 70], "74": 58, "85": 58, "78": 58, "44": 58, "101": [58, 65], "79": 58, "54": 58, "45": 58, "65": 58, "93": 58, "71": 58, "00": [58, 64], "04": 58, "53": 58, "57": 58, "28": 58, "70": 58, "42": 58, "66": 58, "13": 58, "76": 58, "36": 58, "68": 58, "resutl": 58, "v0": 58, "discontinu": 58, "switch": 58, "69": 58, "18": 58, "56": 58, "09": 58, "38": 58, "14": 58, "84": 58, "17": 58, "98": 58, "94": 58, "82": 58, "46": 58, "60": 58, "83": 58, "41": 58, "29": 58, "24": [58, 61, 64], "26": 58, "47": 58, "27": 58, "11": 58, "52": 58, "19": 58, "30": 58, "auxiliari": 58, "miou": [58, 69, 70], "35": 58, "31": 58, "77": 58, "22": [58, 73], "39": 58, "37": [58, 68], "06": 58, "62": 58, "92": 58, "spatiotempor": 58, "scratch": 59, "ones": 59, "decor": 59, "vision_dataset": 59, "correct": 59, "amaz": 59, "my": 59, "amazingdataset": 59, "training_transform": 59, "mind": 59, "convers": 60, "mac": 60, "export": [60, 61, 62, 63, 65, 66, 67, 68, 69, 70], "config_fil": [60, 68, 69], "location_of_config_fil": 60, "model_weight": [60, 61, 66, 67, 68, 69, 70], "location_of_model_weight_fil": 60, "loc": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70], "coreml_models_cl": 60, "extn": 60, "mlmodel": 60, "coreml_models_det": 60, "coreml_models_r": 60, "asset": [60, 68, 69, 70], "develop": [60, 68, 69, 70], "appl": [60, 68, 69, 70, 74], "ml": [60, 68, 69, 70, 74], "imagenet1k": 60, "256x256": 60, "pt": [60, 64, 68, 69, 70], "cfg_file": [61, 62, 63, 65, 66, 67, 68, 69, 70], "path_to_model_configuration_fil": [61, 66], "classification_result": [61, 62, 63, 65, 66], "restrict": 61, "cuda_visible_devic": [61, 64, 66, 67, 68, 69, 70], "forget": [61, 62, 63, 65, 68, 69], "dist": [61, 64], "tcp": [61, 64], "ip_of_node0": [61, 64], "freeport": [61, 64], "backend": [61, 64], "nccl": [61, 64], "concret": 61, "path_to_model_weights_fil": [61, 66], "disabl": 61, "finetune_pretrained_model": [61, 64], "mobilenet_v1": 62, "mobilenet_v2": 62, "mobilenet_v3": 62, "howard2017mobilenet": 62, "howard": 62, "andrew": 62, "menglong": 62, "chen": [62, 69], "bo": 62, "kalenichenko": 62, "dmitri": 62, "weijun": 62, "weyand": 62, "tobia": 62, "andreetto": 62, "marco": 62, "adam": [62, 69], "hartwig": [62, 69], "preprint": [62, 69], "1704": 62, "04861": 62, "sandler2018mobilenetv2": 62, "sandler": 62, "zhmoginov": 62, "andrei": 62, "liang": [62, 69], "chieh": [62, 69], "proceed": [62, 65, 73], "4510": 62, "4520": 62, "2018": 62, "howard2019search": 62, "chu": 62, "grace": 62, "tan": 62, "mingx": 62, "yukun": 62, "pang": 62, "ruom": 62, "vasudevan": 62, "vijai": 62, "cvf": 62, "1314": 62, "1324": 62, "mehta2022mobilevit": [63, 73], "light": [63, 73], "friendli": [63, 73], "sachin": [63, 64, 67, 70, 73], "mehta": [63, 64, 67, 70, 73], "mohammad": [63, 64, 67, 70, 73], "rastegari": [63, 64, 67, 70, 73], "2022": [63, 64, 67, 70, 73], "openreview": 63, "forum": 63, "vh": 63, "0sut8hlg": 63, "dai": 64, "pythonwarn": [64, 67, 68, 69, 70], "mobilevitv2_result": 64, "width_2_0_0": [64, 67], "0020": 64, "0002": 64, "050": 64, "mitv2": [64, 67], "width_multipli": [64, 67], "1024": 64, "oom": 64, "accumul": 64, "checkpoint_ema_best": 64, "linearli": 64, "width_1_7_5": [64, 67], "0026": 64, "00026": 64, "039": 64, "width_1_5_0": [64, 67], "0035": 64, "00035": 64, "029": 64, "width_1_2_5": [64, 67], "0049": 64, "00049": 64, "020": 64, "width_1_0_0": [64, 67, 70], "0075": 64, "00075": 64, "013": 64, "width_0_7_5": [64, 67], "0090": 64, "00090": 64, "008": 64, "width_0_5_0": [64, 67], "004": 64, "significantli": 64, "larger": 64, "term": 64, "converg": 64, "imagenet_21k": 64, "mobilevitv2_results_in21k": 64, "location_of_imagenet_1k_checkpoint": [64, 67, 70], "finetune_higher_r": 64, "mobilevit_v2_in1k": 64, "mobilevitv2_results_in1k_ft_384": 64, "job": 64, "finetune_in21k_to_1k": 64, "mobilevitv2_results_in21k_ft_256": 64, "location_of_imagenet_21k_checkpoint": 64, "mobilevit_v2_in21k_in1k": 64, "mobilevitv2_results_in21k_1k_ft_384": 64, "location_of_imagenet_21k_1k_checkpoint": 64, "mehta2022separ": [64, 67, 70], "he2016deep": 65, "he": 65, "kaim": 65, "zhang": 65, "xiangyu": 65, "ren": 65, "shaoq": 65, "sun": 65, "jian": 65, "770": 65, "778": 65, "2016": [65, 68], "instruct": 66, "ssd_coco": 67, "ssdlite_mobilevitv2_result": [67, 68], "path_to_config_fil": [67, 68, 69, 70], "path_to_model_weight": [67, 68, 69, 70], "det": [67, 68], "validation_set": [67, 68, 69, 70], "img_path": [67, 68, 69, 70], "location_of_image_fil": 67, "single_imag": [67, 68, 69, 70], "conf": [67, 68], "img_folder_path": [67, 68, 69], "path_to_folder_containing_imag": [67, 68, 69], "image_fold": [67, 68, 69], "imagenet_pretrained_wt": [68, 69], "location_of_imagenet_weight": [68, 69], "ssd_result": 68, "ssdlite_model_weight": 68, "ssdlite_result": 68, "location_of_imag": [68, 69], "internet": [68, 69, 70], "farm3": 68, "staticflickr": [68, 69, 70], "2700": 68, "4532763002_7f4eafc5b0_z": 68, "liu2016ssd": 68, "multibox": 68, "liu": 68, "anguelov": 68, "dragomir": 68, "erhan": 68, "dumitru": 68, "szegedi": 68, "christian": 68, "reed": 68, "scott": 68, "fu": 68, "cheng": 68, "yang": 68, "berg": 68, "alexand": 68, "european": 68, "organ": 68, "springer": 68, "deeplabv3_result": 69, "deeplabv3_model_weight": [69, 70], "seg": [69, 70], "overlai": [69, 70], "alpha": 69, "farm7": [69, 70], "6206": [69, 70], "6118204766_b1c9a39153_z": [69, 70], "pascalvoc": [69, 70], "mobilevitv1": 69, "chen2017rethink": 69, "rethink": 69, "papandr": 69, "georg": 69, "schroff": 69, "florian": 69, "1706": 69, "05587": 69, "deeplabv3_mobilevitv2": 70, "deeplabv3_mobilevitv2_result": 70, "pspnet_mobilevitv2": 70, "pspnet_mobilevitv2_result": 70, "deeplabv3_ade20k_result": 70, "pspnet_ade20k_result": 70, "seg_result": 70, "instal": [71, 73], "introduct": [71, 73], "walkthrough": [71, 73], "ssdlite": [71, 73], "open": 73, "understand": 73, "tool": 73, "sever": 73, "ssc": 73, "fb": 73, "msc": 73, "zoo": 73, "kinet": 73, "400": 73, "cite": 73, "mehta2022cvnet": 73, "abdolhosseini": 73, "farzad": 73, "30th": 73, "acm": 73, "multimedia": 73, "mm": 73, "modul": 73, "git": 74, "clone": 74, "pip": 74, "txt": 74, "edit": 74, "v1": 74, "conda": 74}, "objects": {"": [[0, 0, 0, "-", "cvnets"], [22, 0, 0, "-", "data"], [38, 0, 0, "-", "engine"], [41, 0, 0, "-", "loss_fn"], [48, 0, 0, "-", "loss_landscape"], [49, 0, 0, "-", "metrics"], [50, 0, 0, "-", "optim"], [52, 0, 0, "-", "options"], [53, 0, 0, "-", "utils"]], "cvnets": [[1, 0, 0, "-", "anchor_generator"], [2, 0, 0, "-", "image_projection_layers"], [3, 0, 0, "-", "layers"], [6, 0, 0, "-", "matcher_det"], [7, 0, 0, "-", "misc"], [0, 1, 1, "", "modeling_arguments"], [9, 0, 0, "-", "models"], [18, 0, 0, "-", "modules"], [19, 0, 0, "-", "neural_augmentor"], [21, 0, 0, "-", "text_encoders"]], "cvnets.anchor_generator": [[1, 1, 1, "", "arguments_anchor_gen"], [1, 0, 0, "-", "base_anchor_generator"], [1, 1, 1, "", "build_anchor_generator"], [1, 0, 0, "-", "ssd_anchor_generator"]], "cvnets.anchor_generator.base_anchor_generator": [[1, 2, 1, "", "BaseAnchorGenerator"]], "cvnets.anchor_generator.base_anchor_generator.BaseAnchorGenerator": [[1, 3, 1, "", "__init__"], [1, 3, 1, "", "add_arguments"], [1, 3, 1, "", "forward"], [1, 3, 1, "", "num_anchors_per_os"]], "cvnets.anchor_generator.ssd_anchor_generator": [[1, 2, 1, "", "SSDAnchorGenerator"]], "cvnets.anchor_generator.ssd_anchor_generator.SSDAnchorGenerator": [[1, 3, 1, "", "__init__"], [1, 3, 1, "", "add_arguments"], [1, 3, 1, "", "num_anchors_per_os"]], "cvnets.image_projection_layers": [[2, 1, 1, "", "arguments_image_projection_head"], [2, 0, 0, "-", "attention_pool_2d"], [2, 0, 0, "-", "base_image_projection"], [2, 1, 1, "", "build_image_projection_head"], [2, 0, 0, "-", "global_pool_2d"], [2, 0, 0, "-", "simple_projection_head"]], "cvnets.image_projection_layers.attention_pool_2d": [[2, 2, 1, "", "AttentionPool2dHead"]], "cvnets.image_projection_layers.attention_pool_2d.AttentionPool2dHead": [[2, 3, 1, "", "__init__"], [2, 3, 1, "", "add_arguments"], [2, 3, 1, "", "forward"], [2, 3, 1, "", "reset_parameters"]], "cvnets.image_projection_layers.base_image_projection": [[2, 2, 1, "", "BaseImageProjectionHead"], [2, 1, 1, "", "get_in_feature_dimension"]], "cvnets.image_projection_layers.base_image_projection.BaseImageProjectionHead": [[2, 3, 1, "", "__init__"], [2, 3, 1, "", "add_arguments"], [2, 3, 1, "", "forward"], [2, 3, 1, "", "get_trainable_parameters"], [2, 3, 1, "", "reset_parameters"]], "cvnets.image_projection_layers.global_pool_2d": [[2, 2, 1, "", "GlobalPool2D"]], "cvnets.image_projection_layers.global_pool_2d.GlobalPool2D": [[2, 3, 1, "", "__init__"], [2, 3, 1, "", "add_arguments"], [2, 3, 1, "", "forward"], [2, 3, 1, "", "reset_parameters"]], "cvnets.image_projection_layers.simple_projection_head": [[2, 2, 1, "", "SimpleImageProjectionHead"]], "cvnets.image_projection_layers.simple_projection_head.SimpleImageProjectionHead": [[2, 3, 1, "", "__init__"], [2, 3, 1, "", "add_arguments"], [2, 3, 1, "", "forward"], [2, 3, 1, "", "reset_parameters"]], "cvnets.layers": [[3, 2, 1, "", "AdjustBatchNormMomentum"], [3, 2, 1, "", "AvgPool2d"], [3, 2, 1, "", "ConvLayer1d"], [3, 2, 1, "", "ConvLayer2d"], [3, 2, 1, "", "ConvLayer3d"], [3, 2, 1, "", "Dropout"], [3, 2, 1, "", "Dropout2d"], [3, 2, 1, "", "Embedding"], [3, 2, 1, "", "Flatten"], [3, 2, 1, "", "GlobalPool"], [3, 2, 1, "", "GroupLinear"], [3, 2, 1, "", "Identity"], [3, 2, 1, "", "LinearLayer"], [3, 2, 1, "", "LinearSelfAttention"], [3, 2, 1, "", "MaxPool2d"], [3, 2, 1, "", "MultiHeadAttention"], [3, 2, 1, "", "NormActLayer"], [3, 2, 1, "", "PixelShuffle"], [3, 2, 1, "", "PositionalEmbedding"], [3, 2, 1, "", "SeparableConv1d"], [3, 2, 1, "", "SeparableConv2d"], [3, 2, 1, "", "SeparableConv3d"], [3, 2, 1, "", "SingleHeadAttention"], [3, 2, 1, "", "Softmax"], [3, 2, 1, "", "StochasticDepth"], [3, 2, 1, "", "TransposeConvLayer2d"], [3, 2, 1, "", "UpSample"], [4, 0, 0, "-", "activation"], [3, 0, 0, "-", "adaptive_pool"], [3, 0, 0, "-", "base_layer"], [3, 0, 0, "-", "conv_layer"], [3, 0, 0, "-", "dropout"], [3, 0, 0, "-", "embedding"], [3, 0, 0, "-", "flatten"], [3, 1, 1, "", "get_normalization_layer"], [3, 0, 0, "-", "global_pool"], [3, 0, 0, "-", "identity"], [3, 0, 0, "-", "linear_attention"], [3, 0, 0, "-", "linear_layer"], [3, 0, 0, "-", "multi_head_attention"], [5, 0, 0, "-", "normalization"], [3, 0, 0, "-", "normalization_layers"], [3, 0, 0, "-", "pixel_shuffle"], [3, 0, 0, "-", "pooling"], [3, 0, 0, "-", "positional_embedding"], [3, 0, 0, "-", "positional_encoding"], [3, 0, 0, "-", "random_layers"], [3, 0, 0, "-", "single_head_attention"], [3, 0, 0, "-", "softmax"], [3, 0, 0, "-", "stochastic_depth"], [3, 0, 0, "-", "token_merging"], [3, 0, 0, "-", "upsample"]], "cvnets.layers.AdjustBatchNormMomentum": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "adjust_momentum"], [3, 4, 1, "", "round_places"]], "cvnets.layers.AvgPool2d": [[3, 3, 1, "", "__init__"]], "cvnets.layers.ConvLayer1d": [[3, 4, 1, "", "module_cls"], [3, 4, 1, "", "ndim"], [3, 4, 1, "", "training"]], "cvnets.layers.ConvLayer2d": [[3, 4, 1, "", "module_cls"], [3, 4, 1, "", "ndim"], [3, 4, 1, "", "training"]], "cvnets.layers.ConvLayer3d": [[3, 4, 1, "", "module_cls"], [3, 4, 1, "", "ndim"], [3, 4, 1, "", "training"]], "cvnets.layers.Dropout": [[3, 3, 1, "", "__init__"]], "cvnets.layers.Dropout2d": [[3, 3, 1, "", "__init__"]], "cvnets.layers.Embedding": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "reset_parameters"]], "cvnets.layers.Flatten": [[3, 3, 1, "", "__init__"]], "cvnets.layers.GlobalPool": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "add_arguments"], [3, 3, 1, "", "forward"], [3, 4, 1, "", "pool_types"], [3, 4, 1, "", "training"]], "cvnets.layers.GroupLinear": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "add_arguments"], [3, 3, 1, "", "forward"], [3, 3, 1, "", "reset_params"]], "cvnets.layers.Identity": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"]], "cvnets.layers.LinearLayer": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "add_arguments"], [3, 3, 1, "", "forward"], [3, 3, 1, "", "reset_params"]], "cvnets.layers.LinearSelfAttention": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"], [3, 3, 1, "", "visualize_context_scores"]], "cvnets.layers.MaxPool2d": [[3, 3, 1, "", "__init__"]], "cvnets.layers.MultiHeadAttention": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"], [3, 3, 1, "", "forward_default"], [3, 3, 1, "", "forward_pytorch"], [3, 3, 1, "", "forward_tracing"]], "cvnets.layers.NormActLayer": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"]], "cvnets.layers.PixelShuffle": [[3, 3, 1, "", "__init__"]], "cvnets.layers.PositionalEmbedding": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"]], "cvnets.layers.SeparableConv1d": [[3, 4, 1, "", "conv_layer_cls"]], "cvnets.layers.SeparableConv2d": [[3, 4, 1, "", "conv_layer_cls"]], "cvnets.layers.SeparableConv3d": [[3, 4, 1, "", "conv_layer_cls"]], "cvnets.layers.SingleHeadAttention": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"]], "cvnets.layers.Softmax": [[3, 3, 1, "", "__init__"]], "cvnets.layers.StochasticDepth": [[3, 3, 1, "", "__init__"]], "cvnets.layers.TransposeConvLayer2d": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"]], "cvnets.layers.UpSample": [[3, 3, 1, "", "__init__"]], "cvnets.layers.activation": [[4, 1, 1, "", "arguments_activation_fn"], [4, 1, 1, "", "build_activation_layer"], [4, 0, 0, "-", "gelu"], [4, 0, 0, "-", "hard_sigmoid"], [4, 0, 0, "-", "hard_swish"], [4, 0, 0, "-", "leaky_relu"], [4, 0, 0, "-", "prelu"], [4, 1, 1, "", "register_act_fn"], [4, 0, 0, "-", "relu"], [4, 0, 0, "-", "relu6"], [4, 0, 0, "-", "sigmoid"], [4, 0, 0, "-", "swish"], [4, 0, 0, "-", "tanh"]], "cvnets.layers.activation.gelu": [[4, 2, 1, "", "GELU"]], "cvnets.layers.activation.gelu.GELU": [[4, 3, 1, "", "__init__"]], "cvnets.layers.activation.hard_sigmoid": [[4, 2, 1, "", "Hardsigmoid"]], "cvnets.layers.activation.hard_sigmoid.Hardsigmoid": [[4, 3, 1, "", "__init__"], [4, 3, 1, "", "forward"]], "cvnets.layers.activation.hard_swish": [[4, 2, 1, "", "Hardswish"]], "cvnets.layers.activation.hard_swish.Hardswish": [[4, 3, 1, "", "__init__"], [4, 3, 1, "", "forward"]], "cvnets.layers.activation.leaky_relu": [[4, 2, 1, "", "LeakyReLU"]], "cvnets.layers.activation.leaky_relu.LeakyReLU": [[4, 3, 1, "", "__init__"]], "cvnets.layers.activation.prelu": [[4, 2, 1, "", "PReLU"]], "cvnets.layers.activation.prelu.PReLU": [[4, 3, 1, "", "__init__"]], "cvnets.layers.activation.relu": [[4, 2, 1, "", "ReLU"]], "cvnets.layers.activation.relu.ReLU": [[4, 3, 1, "", "__init__"]], "cvnets.layers.activation.relu6": [[4, 2, 1, "", "ReLU6"]], "cvnets.layers.activation.relu6.ReLU6": [[4, 3, 1, "", "__init__"]], "cvnets.layers.activation.sigmoid": [[4, 2, 1, "", "Sigmoid"]], "cvnets.layers.activation.sigmoid.Sigmoid": [[4, 3, 1, "", "__init__"]], "cvnets.layers.activation.swish": [[4, 2, 1, "", "Swish"]], "cvnets.layers.activation.swish.Swish": [[4, 3, 1, "", "__init__"]], "cvnets.layers.activation.tanh": [[4, 2, 1, "", "Tanh"]], "cvnets.layers.activation.tanh.Tanh": [[4, 3, 1, "", "__init__"]], "cvnets.layers.adaptive_pool": [[3, 2, 1, "", "AdaptiveAvgPool2d"]], "cvnets.layers.adaptive_pool.AdaptiveAvgPool2d": [[3, 3, 1, "", "__init__"]], "cvnets.layers.base_layer": [[3, 2, 1, "", "BaseLayer"]], "cvnets.layers.base_layer.BaseLayer": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "add_arguments"], [3, 3, 1, "", "forward"], [3, 3, 1, "", "get_trainable_parameters"]], "cvnets.layers.conv_layer": [[3, 2, 1, "", "Conv2d"], [3, 2, 1, "", "ConvLayer1d"], [3, 2, 1, "", "ConvLayer2d"], [3, 2, 1, "", "ConvLayer3d"], [3, 2, 1, "", "NormActLayer"], [3, 2, 1, "", "SeparableConv1d"], [3, 2, 1, "", "SeparableConv2d"], [3, 2, 1, "", "SeparableConv3d"], [3, 2, 1, "", "TransposeConvLayer2d"]], "cvnets.layers.conv_layer.Conv2d": [[3, 3, 1, "", "__init__"]], "cvnets.layers.conv_layer.ConvLayer1d": [[3, 4, 1, "", "module_cls"], [3, 4, 1, "", "ndim"]], "cvnets.layers.conv_layer.ConvLayer2d": [[3, 4, 1, "", "module_cls"], [3, 4, 1, "", "ndim"]], "cvnets.layers.conv_layer.ConvLayer3d": [[3, 4, 1, "", "module_cls"], [3, 4, 1, "", "ndim"]], "cvnets.layers.conv_layer.NormActLayer": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"]], "cvnets.layers.conv_layer.SeparableConv1d": [[3, 4, 1, "", "conv_layer_cls"]], "cvnets.layers.conv_layer.SeparableConv2d": [[3, 4, 1, "", "conv_layer_cls"]], "cvnets.layers.conv_layer.SeparableConv3d": [[3, 4, 1, "", "conv_layer_cls"]], "cvnets.layers.conv_layer.TransposeConvLayer2d": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"]], "cvnets.layers.dropout": [[3, 2, 1, "", "Dropout"], [3, 2, 1, "", "Dropout2d"]], "cvnets.layers.dropout.Dropout": [[3, 3, 1, "", "__init__"]], "cvnets.layers.dropout.Dropout2d": [[3, 3, 1, "", "__init__"]], "cvnets.layers.embedding": [[3, 2, 1, "", "Embedding"]], "cvnets.layers.embedding.Embedding": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "reset_parameters"]], "cvnets.layers.flatten": [[3, 2, 1, "", "Flatten"]], "cvnets.layers.flatten.Flatten": [[3, 3, 1, "", "__init__"]], "cvnets.layers.global_pool": [[3, 2, 1, "", "GlobalPool"]], "cvnets.layers.global_pool.GlobalPool": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "add_arguments"], [3, 3, 1, "", "forward"], [3, 4, 1, "", "pool_types"]], "cvnets.layers.identity": [[3, 2, 1, "", "Identity"]], "cvnets.layers.identity.Identity": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"]], "cvnets.layers.linear_attention": [[3, 2, 1, "", "LinearSelfAttention"]], "cvnets.layers.linear_attention.LinearSelfAttention": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"], [3, 3, 1, "", "visualize_context_scores"]], "cvnets.layers.linear_layer": [[3, 2, 1, "", "GroupLinear"], [3, 2, 1, "", "LinearLayer"]], "cvnets.layers.linear_layer.GroupLinear": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "add_arguments"], [3, 3, 1, "", "forward"], [3, 3, 1, "", "reset_params"]], "cvnets.layers.linear_layer.LinearLayer": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "add_arguments"], [3, 3, 1, "", "forward"], [3, 3, 1, "", "reset_params"]], "cvnets.layers.multi_head_attention": [[3, 2, 1, "", "MultiHeadAttention"]], "cvnets.layers.multi_head_attention.MultiHeadAttention": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"], [3, 3, 1, "", "forward_default"], [3, 3, 1, "", "forward_pytorch"], [3, 3, 1, "", "forward_tracing"]], "cvnets.layers.normalization": [[5, 1, 1, "", "arguments_norm_layers"], [5, 0, 0, "-", "batch_norm"], [5, 1, 1, "", "build_normalization_layer"], [5, 0, 0, "-", "group_norm"], [5, 0, 0, "-", "instance_norm"], [5, 0, 0, "-", "layer_norm"], [5, 1, 1, "", "register_norm_fn"], [5, 0, 0, "-", "sync_batch_norm"]], "cvnets.layers.normalization.batch_norm": [[5, 2, 1, "", "BatchNorm1d"], [5, 2, 1, "", "BatchNorm2d"], [5, 2, 1, "", "BatchNorm2dFP32"], [5, 2, 1, "", "BatchNorm3d"]], "cvnets.layers.normalization.batch_norm.BatchNorm1d": [[5, 3, 1, "", "__init__"]], "cvnets.layers.normalization.batch_norm.BatchNorm2d": [[5, 3, 1, "", "__init__"]], "cvnets.layers.normalization.batch_norm.BatchNorm2dFP32": [[5, 3, 1, "", "__init__"], [5, 3, 1, "", "forward"]], "cvnets.layers.normalization.batch_norm.BatchNorm3d": [[5, 3, 1, "", "__init__"]], "cvnets.layers.normalization.group_norm": [[5, 2, 1, "", "GroupNorm"]], "cvnets.layers.normalization.group_norm.GroupNorm": [[5, 3, 1, "", "__init__"]], "cvnets.layers.normalization.instance_norm": [[5, 2, 1, "", "InstanceNorm1d"], [5, 2, 1, "", "InstanceNorm2d"]], "cvnets.layers.normalization.instance_norm.InstanceNorm1d": [[5, 3, 1, "", "__init__"]], "cvnets.layers.normalization.instance_norm.InstanceNorm2d": [[5, 3, 1, "", "__init__"]], "cvnets.layers.normalization.layer_norm": [[5, 2, 1, "", "LayerNorm"], [5, 2, 1, "", "LayerNorm2D_NCHW"], [5, 2, 1, "", "LayerNormFP32"]], "cvnets.layers.normalization.layer_norm.LayerNorm": [[5, 3, 1, "", "__init__"], [5, 3, 1, "", "forward"]], "cvnets.layers.normalization.layer_norm.LayerNorm2D_NCHW": [[5, 3, 1, "", "__init__"]], "cvnets.layers.normalization.layer_norm.LayerNormFP32": [[5, 3, 1, "", "__init__"], [5, 3, 1, "", "forward"]], "cvnets.layers.normalization.sync_batch_norm": [[5, 2, 1, "", "SyncBatchNorm"], [5, 2, 1, "", "SyncBatchNormFP32"]], "cvnets.layers.normalization.sync_batch_norm.SyncBatchNorm": [[5, 3, 1, "", "__init__"]], "cvnets.layers.normalization.sync_batch_norm.SyncBatchNormFP32": [[5, 3, 1, "", "__init__"], [5, 3, 1, "", "forward"]], "cvnets.layers.normalization_layers": [[3, 2, 1, "", "AdjustBatchNormMomentum"]], "cvnets.layers.normalization_layers.AdjustBatchNormMomentum": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "adjust_momentum"], [3, 4, 1, "", "round_places"]], "cvnets.layers.pixel_shuffle": [[3, 2, 1, "", "PixelShuffle"]], "cvnets.layers.pixel_shuffle.PixelShuffle": [[3, 3, 1, "", "__init__"]], "cvnets.layers.pooling": [[3, 2, 1, "", "AvgPool2d"], [3, 2, 1, "", "MaxPool2d"]], "cvnets.layers.pooling.AvgPool2d": [[3, 3, 1, "", "__init__"]], "cvnets.layers.pooling.MaxPool2d": [[3, 3, 1, "", "__init__"]], "cvnets.layers.positional_embedding": [[3, 2, 1, "", "LearnablePositionalEmbedding"], [3, 2, 1, "", "PositionalEmbedding"], [3, 2, 1, "", "SinusoidalPositionalEmbedding"]], "cvnets.layers.positional_embedding.LearnablePositionalEmbedding": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"], [3, 3, 1, "", "reset_parameters"]], "cvnets.layers.positional_embedding.PositionalEmbedding": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"]], "cvnets.layers.positional_embedding.SinusoidalPositionalEmbedding": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"], [3, 3, 1, "", "get_weights"]], "cvnets.layers.positional_encoding": [[3, 2, 1, "", "LearnablePositionEncoding"], [3, 2, 1, "", "SinusoidalPositionalEncoding"]], "cvnets.layers.positional_encoding.LearnablePositionEncoding": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"]], "cvnets.layers.positional_encoding.SinusoidalPositionalEncoding": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"], [3, 3, 1, "", "forward_others"], [3, 3, 1, "", "forward_patch_last"]], "cvnets.layers.random_layers": [[3, 2, 1, "", "RandomApply"]], "cvnets.layers.random_layers.RandomApply": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"]], "cvnets.layers.single_head_attention": [[3, 2, 1, "", "SingleHeadAttention"]], "cvnets.layers.single_head_attention.SingleHeadAttention": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "forward"]], "cvnets.layers.softmax": [[3, 2, 1, "", "Softmax"]], "cvnets.layers.softmax.Softmax": [[3, 3, 1, "", "__init__"]], "cvnets.layers.stochastic_depth": [[3, 2, 1, "", "StochasticDepth"]], "cvnets.layers.stochastic_depth.StochasticDepth": [[3, 3, 1, "", "__init__"]], "cvnets.layers.token_merging": [[3, 2, 1, "", "TokenMerging"], [3, 1, 1, "", "pad_x_and_mask"]], "cvnets.layers.token_merging.TokenMerging": [[3, 3, 1, "", "__init__"], [3, 3, 1, "", "extra_repr"], [3, 3, 1, "", "forward"]], "cvnets.layers.upsample": [[3, 2, 1, "", "UpSample"]], "cvnets.layers.upsample.UpSample": [[3, 3, 1, "", "__init__"]], "cvnets.matcher_det": [[6, 1, 1, "", "arguments_box_matcher"], [6, 0, 0, "-", "base_matcher"], [6, 1, 1, "", "build_matcher"], [6, 0, 0, "-", "ssd_matcher"]], "cvnets.matcher_det.base_matcher": [[6, 2, 1, "", "BaseMatcher"]], "cvnets.matcher_det.base_matcher.BaseMatcher": [[6, 3, 1, "", "__init__"], [6, 3, 1, "", "add_arguments"]], "cvnets.matcher_det.ssd_matcher": [[6, 2, 1, "", "SSDMatcher"], [6, 1, 1, "", "check_variable"]], "cvnets.matcher_det.ssd_matcher.SSDMatcher": [[6, 3, 1, "", "__init__"], [6, 3, 1, "", "add_arguments"], [6, 3, 1, "", "convert_to_boxes"]], "cvnets.misc": [[7, 0, 0, "-", "averaging_utils"], [7, 0, 0, "-", "box_utils"], [7, 0, 0, "-", "common"], [7, 0, 0, "-", "init_utils"], [8, 0, 0, "-", "third_party"]], "cvnets.misc.averaging_utils": [[7, 2, 1, "", "EMA"], [7, 1, 1, "", "arguments_ema"]], "cvnets.misc.averaging_utils.EMA": [[7, 3, 1, "", "__init__"], [7, 3, 1, "", "update_parameters"]], "cvnets.misc.box_utils": [[7, 1, 1, "", "center_form_to_corner_form"], [7, 1, 1, "", "convert_boxes_to_locations"], [7, 1, 1, "", "convert_locations_to_boxes"], [7, 1, 1, "", "corner_form_to_center_form"]], "cvnets.misc.common": [[7, 1, 1, "", "clean_strip"], [7, 1, 1, "", "freeze_module"], [7, 1, 1, "", "freeze_modules_based_on_opts"], [7, 1, 1, "", "get_tensor_sizes"], [7, 1, 1, "", "load_pretrained_model"], [7, 1, 1, "", "parameter_list"]], "cvnets.misc.init_utils": [[7, 1, 1, "", "initialize_conv_layer"], [7, 1, 1, "", "initialize_fc_layer"], [7, 1, 1, "", "initialize_norm_layers"], [7, 1, 1, "", "initialize_weights"]], "cvnets.misc.third_party": [[8, 0, 0, "-", "ssd_utils"]], "cvnets.misc.third_party.ssd_utils": [[8, 1, 1, "", "assign_priors"], [8, 1, 1, "", "box_iou"], [8, 1, 1, "", "hard_negative_mining"]], "cvnets.models": [[9, 1, 1, "", "arguments_model"], [10, 0, 0, "-", "audio_classification"], [9, 0, 0, "-", "base_model"], [11, 0, 0, "-", "classification"], [13, 0, 0, "-", "detection"], [9, 1, 1, "", "get_model"], [15, 0, 0, "-", "multi_modal_img_text"], [16, 0, 0, "-", "segmentation"]], "cvnets.models.audio_classification": [[10, 0, 0, "-", "audio_byteformer"], [10, 0, 0, "-", "base_audio_classification"]], "cvnets.models.audio_classification.audio_byteformer": [[10, 2, 1, "", "AudioByteFormer"]], "cvnets.models.audio_classification.audio_byteformer.AudioByteFormer": [[10, 3, 1, "", "dummy_input_and_label"], [10, 3, 1, "", "forward"]], "cvnets.models.audio_classification.base_audio_classification": [[10, 2, 1, "", "BaseAudioClassification"]], "cvnets.models.audio_classification.base_audio_classification.BaseAudioClassification": [[10, 3, 1, "", "__init__"], [10, 3, 1, "", "add_arguments"]], "cvnets.models.base_model": [[9, 2, 1, "", "BaseAnyNNModel"]], "cvnets.models.base_model.BaseAnyNNModel": [[9, 3, 1, "", "__init__"], [9, 3, 1, "", "add_arguments"], [9, 3, 1, "", "build_model"], [9, 3, 1, "", "dummy_input_and_label"], [9, 3, 1, "", "forward"], [9, 3, 1, "", "freeze_norm_layers"], [9, 3, 1, "", "get_exportable_model"], [9, 3, 1, "", "get_trainable_parameters"], [9, 3, 1, "", "info"], [9, 3, 1, "", "reset_parameters"]], "cvnets.models.classification": [[11, 0, 0, "-", "base_image_encoder"], [11, 0, 0, "-", "byteformer"], [12, 0, 0, "-", "config"], [11, 0, 0, "-", "efficientnet"], [11, 0, 0, "-", "fastvit"], [11, 0, 0, "-", "mobilenetv1"], [11, 0, 0, "-", "mobilenetv2"], [11, 0, 0, "-", "mobilenetv3"], [11, 0, 0, "-", "mobileone"], [11, 0, 0, "-", "mobilevit"], [11, 0, 0, "-", "mobilevit_v2"], [11, 0, 0, "-", "regnet"], [11, 0, 0, "-", "resnet"], [11, 0, 0, "-", "swin_transformer"], [11, 0, 0, "-", "vit"]], "cvnets.models.classification.base_image_encoder": [[11, 2, 1, "", "BaseImageEncoder"], [11, 1, 1, "", "set_model_specific_opts_before_model_building"], [11, 1, 1, "", "unset_model_specific_opts_after_model_building"]], "cvnets.models.classification.base_image_encoder.BaseImageEncoder": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "add_arguments"], [11, 3, 1, "", "build_model"], [11, 3, 1, "", "check_model"], [11, 3, 1, "", "dummy_input_and_label"], [11, 3, 1, "", "extract_end_points_all"], [11, 3, 1, "", "extract_end_points_l4"], [11, 3, 1, "", "extract_features"], [11, 3, 1, "", "forward"], [11, 3, 1, "", "forward_classifier"], [11, 3, 1, "", "get_exportable_model"], [11, 3, 1, "", "get_trainable_parameters"], [11, 3, 1, "", "update_classifier"]], "cvnets.models.classification.byteformer": [[11, 2, 1, "", "ByteFormer"], [11, 1, 1, "", "unfold_tokens"]], "cvnets.models.classification.byteformer.ByteFormer": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "add_arguments"], [11, 3, 1, "", "apply_token_reduction_net"], [11, 3, 1, "", "backbone_forward"], [11, 3, 1, "", "build_model"], [11, 3, 1, "", "dummy_input_and_label"], [11, 3, 1, "", "forward"], [11, 3, 1, "", "get_backbone_inputs"], [11, 3, 1, "", "get_downsampler"], [11, 3, 1, "", "get_downsampler_name"]], "cvnets.models.classification.config": [[12, 0, 0, "-", "byteformer"], [12, 0, 0, "-", "efficientnet"], [12, 0, 0, "-", "fastvit"], [12, 0, 0, "-", "mobilenetv1"], [12, 0, 0, "-", "mobilenetv2"], [12, 0, 0, "-", "mobilenetv3"], [12, 0, 0, "-", "mobileone"], [12, 0, 0, "-", "mobilevit"], [12, 0, 0, "-", "mobilevit_v2"], [12, 0, 0, "-", "regnet"], [12, 0, 0, "-", "resnet"], [12, 0, 0, "-", "swin_transformer"], [12, 0, 0, "-", "vit"]], "cvnets.models.classification.config.byteformer": [[12, 1, 1, "", "get_configuration"]], "cvnets.models.classification.config.efficientnet": [[12, 2, 1, "", "CompoundScalingConfig"], [12, 2, 1, "", "EfficientNetBlockConfig"], [12, 1, 1, "", "get_configuration"]], "cvnets.models.classification.config.efficientnet.CompoundScalingConfig": [[12, 3, 1, "", "__init__"], [12, 4, 1, "", "depth_mult"], [12, 4, 1, "", "train_resolution"], [12, 4, 1, "", "width_mult"]], "cvnets.models.classification.config.efficientnet.EfficientNetBlockConfig": [[12, 3, 1, "", "__init__"]], "cvnets.models.classification.config.fastvit": [[12, 1, 1, "", "get_configuration"]], "cvnets.models.classification.config.mobilenetv1": [[12, 1, 1, "", "get_configuration"]], "cvnets.models.classification.config.mobilenetv2": [[12, 1, 1, "", "get_configuration"]], "cvnets.models.classification.config.mobilenetv3": [[12, 1, 1, "", "get_configuration"]], "cvnets.models.classification.config.mobileone": [[12, 1, 1, "", "get_configuration"]], "cvnets.models.classification.config.mobilevit": [[12, 1, 1, "", "get_configuration"]], "cvnets.models.classification.config.mobilevit_v2": [[12, 1, 1, "", "get_configuration"]], "cvnets.models.classification.config.regnet": [[12, 2, 1, "", "BlockParamsConfig"], [12, 1, 1, "", "get_configuration"]], "cvnets.models.classification.config.regnet.BlockParamsConfig": [[12, 3, 1, "", "__init__"], [12, 3, 1, "", "extra_repr"]], "cvnets.models.classification.config.resnet": [[12, 1, 1, "", "add_squeeze_channels"], [12, 1, 1, "", "get_configuration"]], "cvnets.models.classification.config.swin_transformer": [[12, 1, 1, "", "get_configuration"]], "cvnets.models.classification.config.vit": [[12, 1, 1, "", "get_configuration"]], "cvnets.models.classification.efficientnet": [[11, 2, 1, "", "EfficientNet"]], "cvnets.models.classification.efficientnet.EfficientNet": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "add_arguments"]], "cvnets.models.classification.fastvit": [[11, 2, 1, "", "FastViT"], [11, 1, 1, "", "basic_blocks"]], "cvnets.models.classification.fastvit.FastViT": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "add_arguments"], [11, 3, 1, "", "get_exportable_model"]], "cvnets.models.classification.mobilenetv1": [[11, 2, 1, "", "MobileNetv1"]], "cvnets.models.classification.mobilenetv1.MobileNetv1": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "add_arguments"]], "cvnets.models.classification.mobilenetv2": [[11, 2, 1, "", "MobileNetV2"]], "cvnets.models.classification.mobilenetv2.MobileNetV2": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "add_arguments"]], "cvnets.models.classification.mobilenetv3": [[11, 2, 1, "", "MobileNetV3"]], "cvnets.models.classification.mobilenetv3.MobileNetV3": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "add_arguments"]], "cvnets.models.classification.mobileone": [[11, 2, 1, "", "MobileOne"]], "cvnets.models.classification.mobileone.MobileOne": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "add_arguments"], [11, 3, 1, "", "get_exportable_model"]], "cvnets.models.classification.mobilevit": [[11, 2, 1, "", "MobileViT"]], "cvnets.models.classification.mobilevit.MobileViT": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "add_arguments"]], "cvnets.models.classification.mobilevit_v2": [[11, 2, 1, "", "MobileViTv2"]], "cvnets.models.classification.mobilevit_v2.MobileViTv2": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "add_arguments"]], "cvnets.models.classification.regnet": [[11, 2, 1, "", "RegNet"]], "cvnets.models.classification.regnet.RegNet": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "add_arguments"]], "cvnets.models.classification.resnet": [[11, 2, 1, "", "ResNet"]], "cvnets.models.classification.resnet.ResNet": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "add_arguments"]], "cvnets.models.classification.swin_transformer": [[11, 2, 1, "", "SwinTransformer"]], "cvnets.models.classification.swin_transformer.SwinTransformer": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "add_arguments"], [11, 3, 1, "", "extract_end_points_all"]], "cvnets.models.classification.vit": [[11, 2, 1, "", "VisionTransformer"]], "cvnets.models.classification.vit.VisionTransformer": [[11, 3, 1, "", "__init__"], [11, 3, 1, "", "add_arguments"], [11, 3, 1, "", "extract_end_points_all"], [11, 3, 1, "", "extract_features"], [11, 3, 1, "", "extract_patch_embeddings"], [11, 3, 1, "", "forward"], [11, 3, 1, "", "forward_classifier"], [11, 3, 1, "", "reset_simple_fpn_params"], [11, 3, 1, "", "update_layer_norm_eps"]], "cvnets.models.detection": [[13, 2, 1, "", "DetectionPredTuple"], [13, 0, 0, "-", "base_detection"], [13, 0, 0, "-", "mask_rcnn"], [13, 0, 0, "-", "ssd"], [14, 0, 0, "-", "utils"]], "cvnets.models.detection.DetectionPredTuple": [[13, 4, 1, "", "boxes"], [13, 4, 1, "", "labels"], [13, 4, 1, "", "masks"], [13, 4, 1, "", "scores"]], "cvnets.models.detection.base_detection": [[13, 2, 1, "", "BaseDetection"], [13, 1, 1, "", "check_feature_map_output_channels"]], "cvnets.models.detection.base_detection.BaseDetection": [[13, 3, 1, "", "__init__"], [13, 3, 1, "", "add_arguments"], [13, 3, 1, "", "build_model"], [13, 3, 1, "", "reset_layer_parameters"]], "cvnets.models.detection.mask_rcnn": [[13, 2, 1, "", "MaskRCNNDetector"], [13, 2, 1, "", "MaskRCNNEncoder"]], "cvnets.models.detection.mask_rcnn.MaskRCNNDetector": [[13, 3, 1, "", "__init__"], [13, 3, 1, "", "add_arguments"], [13, 3, 1, "", "dummy_input_and_label"], [13, 3, 1, "", "forward"], [13, 3, 1, "", "get_trainable_parameters"], [13, 3, 1, "", "predict"], [13, 3, 1, "", "reset_generalized_rcnn_transform"], [13, 3, 1, "", "reset_norm_layer_opts"], [13, 3, 1, "", "set_norm_layer_opts"], [13, 3, 1, "", "update_layer_norm_eps"]], "cvnets.models.detection.mask_rcnn.MaskRCNNEncoder": [[13, 3, 1, "", "__init__"], [13, 3, 1, "", "forward"], [13, 3, 1, "", "get_augmented_tensor"], [13, 3, 1, "", "get_trainable_parameters"]], "cvnets.models.detection.ssd": [[13, 2, 1, "", "SingleShotMaskDetector"]], "cvnets.models.detection.ssd.SingleShotMaskDetector": [[13, 3, 1, "", "__init__"], [13, 3, 1, "", "add_arguments"], [13, 4, 1, "", "coordinates"], [13, 3, 1, "", "dummy_input_and_label"], [13, 3, 1, "", "forward"], [13, 3, 1, "", "get_backbone_features"], [13, 3, 1, "", "postprocess_detections"], [13, 3, 1, "", "predict"], [13, 3, 1, "", "process_anchors_ar"], [13, 3, 1, "", "reset_layers"], [13, 3, 1, "", "ssd_forward"]], "cvnets.models.detection.utils": [[14, 0, 0, "-", "rcnn_utils"]], "cvnets.models.detection.utils.rcnn_utils": [[14, 2, 1, "", "FastRCNNConvFCHead"], [14, 2, 1, "", "FastRCNNPredictor"], [14, 2, 1, "", "MaskRCNNHeads"], [14, 2, 1, "", "MaskRCNNPredictor"], [14, 2, 1, "", "RPNHead"], [14, 1, 1, "", "replace_syncbn_with_syncbnfp32"]], "cvnets.models.detection.utils.rcnn_utils.FastRCNNConvFCHead": [[14, 3, 1, "", "__init__"]], "cvnets.models.detection.utils.rcnn_utils.FastRCNNPredictor": [[14, 3, 1, "", "__init__"], [14, 3, 1, "", "forward"]], "cvnets.models.detection.utils.rcnn_utils.MaskRCNNHeads": [[14, 3, 1, "", "__init__"]], "cvnets.models.detection.utils.rcnn_utils.MaskRCNNPredictor": [[14, 3, 1, "", "__init__"]], "cvnets.models.detection.utils.rcnn_utils.RPNHead": [[14, 3, 1, "", "__init__"], [14, 3, 1, "", "forward"]], "cvnets.models.multi_modal_img_text": [[15, 0, 0, "-", "base_multi_modal_img_text"], [15, 0, 0, "-", "clip"]], "cvnets.models.multi_modal_img_text.base_multi_modal_img_text": [[15, 2, 1, "", "BaseMultiModalImageText"]], "cvnets.models.multi_modal_img_text.base_multi_modal_img_text.BaseMultiModalImageText": [[15, 3, 1, "", "__init__"], [15, 3, 1, "", "add_arguments"]], "cvnets.models.multi_modal_img_text.clip": [[15, 2, 1, "", "CLIP"], [15, 1, 1, "", "update_image_classifier"]], "cvnets.models.multi_modal_img_text.clip.CLIP": [[15, 3, 1, "", "__init__"], [15, 3, 1, "", "add_arguments"], [15, 3, 1, "", "build_model"], [15, 3, 1, "", "dummy_input_and_label"], [15, 3, 1, "", "forward"], [15, 3, 1, "", "get_trainable_parameters"], [15, 3, 1, "", "reset_parameters"]], "cvnets.models.segmentation": [[16, 0, 0, "-", "base_seg"], [16, 0, 0, "-", "enc_dec"], [17, 0, 0, "-", "heads"]], "cvnets.models.segmentation.base_seg": [[16, 2, 1, "", "BaseSegmentation"], [16, 1, 1, "", "set_model_specific_opts_before_model_building"], [16, 1, 1, "", "unset_model_specific_opts_after_model_building"]], "cvnets.models.segmentation.base_seg.BaseSegmentation": [[16, 3, 1, "", "__init__"], [16, 3, 1, "", "add_arguments"], [16, 3, 1, "", "dummy_input_and_label"], [16, 3, 1, "", "maybe_seg_norm_layer"], [16, 3, 1, "", "set_default_norm_layer"], [16, 3, 1, "", "set_model_specific_opts_before_model_building"], [16, 3, 1, "", "update_classifier"]], "cvnets.models.segmentation.enc_dec": [[16, 2, 1, "", "SegEncoderDecoder"]], "cvnets.models.segmentation.enc_dec.SegEncoderDecoder": [[16, 3, 1, "", "__init__"], [16, 3, 1, "", "build_model"], [16, 3, 1, "", "forward"], [16, 3, 1, "", "get_trainable_parameters"], [16, 3, 1, "", "update_classifier"]], "cvnets.models.segmentation.heads": [[17, 0, 0, "-", "base_seg_head"], [17, 0, 0, "-", "deeplabv3"], [17, 0, 0, "-", "pspnet"], [17, 0, 0, "-", "simple_seg_head"]], "cvnets.models.segmentation.heads.base_seg_head": [[17, 2, 1, "", "BaseSegHead"]], "cvnets.models.segmentation.heads.base_seg_head.BaseSegHead": [[17, 3, 1, "", "__init__"], [17, 3, 1, "", "add_arguments"], [17, 3, 1, "", "build_model"], [17, 3, 1, "", "forward"], [17, 3, 1, "", "forward_aux_head"], [17, 3, 1, "", "forward_seg_head"], [17, 3, 1, "", "get_trainable_parameters"], [17, 3, 1, "", "reset_head_parameters"], [17, 3, 1, "", "update_classifier"]], "cvnets.models.segmentation.heads.deeplabv3": [[17, 2, 1, "", "DeeplabV3"]], "cvnets.models.segmentation.heads.deeplabv3.DeeplabV3": [[17, 3, 1, "", "__init__"], [17, 3, 1, "", "add_arguments"], [17, 3, 1, "", "forward_seg_head"], [17, 3, 1, "", "update_classifier"]], "cvnets.models.segmentation.heads.pspnet": [[17, 2, 1, "", "PSPNet"]], "cvnets.models.segmentation.heads.pspnet.PSPNet": [[17, 3, 1, "", "__init__"], [17, 3, 1, "", "add_arguments"], [17, 3, 1, "", "forward_seg_head"], [17, 3, 1, "", "update_classifier"]], "cvnets.models.segmentation.heads.simple_seg_head": [[17, 2, 1, "", "SimpleSegHead"]], "cvnets.models.segmentation.heads.simple_seg_head.SimpleSegHead": [[17, 3, 1, "", "__init__"], [17, 3, 1, "", "add_arguments"], [17, 3, 1, "", "forward_seg_head"]], "cvnets.modules": [[18, 2, 1, "", "ASPP"], [18, 2, 1, "", "AnyRegNetStage"], [18, 2, 1, "", "BasicResNetBlock"], [18, 2, 1, "", "BottleneckResNetBlock"], [18, 2, 1, "", "EfficientNetBlock"], [18, 2, 1, "", "FeaturePyramidNetwork"], [18, 2, 1, "", "InvertedResidual"], [18, 2, 1, "", "InvertedResidualSE"], [18, 2, 1, "", "MobileOneBlock"], [18, 2, 1, "", "MobileViTBlock"], [18, 2, 1, "", "MobileViTBlockv2"], [18, 2, 1, "", "PSP"], [18, 2, 1, "", "PatchMerging"], [18, 2, 1, "", "Permute"], [18, 2, 1, "", "RepLKBlock"], [18, 2, 1, "", "SSDHead"], [18, 2, 1, "", "SSDInstanceHead"], [18, 2, 1, "", "SqueezeExcitation"], [18, 2, 1, "", "SwinTransformerBlock"], [18, 2, 1, "", "TransformerEncoder"], [18, 2, 1, "", "WindowedTransformerEncoder"], [18, 2, 1, "", "XRegNetBlock"], [18, 0, 0, "-", "aspp_block"], [18, 0, 0, "-", "base_module"], [18, 0, 0, "-", "efficientnet"], [18, 0, 0, "-", "fastvit"], [18, 0, 0, "-", "feature_pyramid"], [18, 0, 0, "-", "mobilenetv2"], [18, 0, 0, "-", "mobileone_block"], [18, 0, 0, "-", "mobilevit_block"], [18, 0, 0, "-", "pspnet_module"], [18, 0, 0, "-", "regnet_modules"], [18, 0, 0, "-", "resnet_modules"], [18, 0, 0, "-", "squeeze_excitation"], [18, 0, 0, "-", "ssd_heads"], [18, 0, 0, "-", "swin_transformer_block"], [18, 0, 0, "-", "transformer"], [18, 0, 0, "-", "windowed_transformer"]], "cvnets.modules.ASPP": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.AnyRegNetStage": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.BasicResNetBlock": [[18, 3, 1, "", "__init__"], [18, 4, 1, "", "expansion"], [18, 3, 1, "", "forward"], [18, 4, 1, "", "training"]], "cvnets.modules.BottleneckResNetBlock": [[18, 3, 1, "", "__init__"], [18, 4, 1, "", "expansion"], [18, 3, 1, "", "forward"], [18, 4, 1, "", "training"]], "cvnets.modules.EfficientNetBlock": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.FeaturePyramidNetwork": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"], [18, 3, 1, "", "reset_weights"]], "cvnets.modules.InvertedResidual": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.InvertedResidualSE": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.MobileOneBlock": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"], [18, 3, 1, "", "reparameterize"]], "cvnets.modules.MobileViTBlock": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "folding"], [18, 3, 1, "", "forward"], [18, 3, 1, "", "forward_spatial"], [18, 3, 1, "", "forward_temporal"], [18, 3, 1, "", "unfolding"]], "cvnets.modules.MobileViTBlockv2": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "folding_coreml"], [18, 3, 1, "", "folding_pytorch"], [18, 3, 1, "", "forward"], [18, 3, 1, "", "forward_spatial"], [18, 3, 1, "", "forward_temporal"], [18, 3, 1, "", "resize_input_if_needed"], [18, 3, 1, "", "unfolding_coreml"], [18, 3, 1, "", "unfolding_pytorch"]], "cvnets.modules.PSP": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.PatchMerging": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.Permute": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.RepLKBlock": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"], [18, 3, 1, "", "reparameterize"]], "cvnets.modules.SSDHead": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"], [18, 3, 1, "", "reset_parameters"]], "cvnets.modules.SSDInstanceHead": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"], [18, 3, 1, "", "reset_parameters"]], "cvnets.modules.SqueezeExcitation": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.SwinTransformerBlock": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.TransformerEncoder": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.WindowedTransformerEncoder": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.XRegNetBlock": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.aspp_block": [[18, 2, 1, "", "ASPP"], [18, 2, 1, "", "ASPPConv2d"], [18, 2, 1, "", "ASPPPooling"], [18, 2, 1, "", "ASPPSeparableConv2d"]], "cvnets.modules.aspp_block.ASPP": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.aspp_block.ASPPConv2d": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "adjust_atrous_rate"]], "cvnets.modules.aspp_block.ASPPPooling": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.aspp_block.ASPPSeparableConv2d": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "adjust_atrous_rate"]], "cvnets.modules.base_module": [[18, 2, 1, "", "BaseModule"]], "cvnets.modules.base_module.BaseModule": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.efficientnet": [[18, 2, 1, "", "EfficientNetBlock"]], "cvnets.modules.efficientnet.EfficientNetBlock": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.fastvit": [[18, 2, 1, "", "AttentionBlock"], [18, 2, 1, "", "ConvFFN"], [18, 2, 1, "", "PatchEmbed"], [18, 2, 1, "", "RepCPE"], [18, 2, 1, "", "RepMixer"], [18, 2, 1, "", "RepMixerBlock"], [18, 1, 1, "", "convolutional_stem"]], "cvnets.modules.fastvit.AttentionBlock": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.fastvit.ConvFFN": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.fastvit.PatchEmbed": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.fastvit.RepCPE": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"], [18, 3, 1, "", "reparameterize"]], "cvnets.modules.fastvit.RepMixer": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"], [18, 3, 1, "", "reparameterize"]], "cvnets.modules.fastvit.RepMixerBlock": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.feature_pyramid": [[18, 2, 1, "", "FeaturePyramidNetwork"]], "cvnets.modules.feature_pyramid.FeaturePyramidNetwork": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"], [18, 3, 1, "", "reset_weights"]], "cvnets.modules.mobilenetv2": [[18, 2, 1, "", "InvertedResidual"], [18, 2, 1, "", "InvertedResidualSE"]], "cvnets.modules.mobilenetv2.InvertedResidual": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.mobilenetv2.InvertedResidualSE": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.mobileone_block": [[18, 2, 1, "", "MobileOneBlock"], [18, 2, 1, "", "RepLKBlock"]], "cvnets.modules.mobileone_block.MobileOneBlock": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"], [18, 3, 1, "", "reparameterize"]], "cvnets.modules.mobileone_block.RepLKBlock": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"], [18, 3, 1, "", "reparameterize"]], "cvnets.modules.mobilevit_block": [[18, 2, 1, "", "MobileViTBlock"], [18, 2, 1, "", "MobileViTBlockv2"]], "cvnets.modules.mobilevit_block.MobileViTBlock": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "folding"], [18, 3, 1, "", "forward"], [18, 3, 1, "", "forward_spatial"], [18, 3, 1, "", "forward_temporal"], [18, 3, 1, "", "unfolding"]], "cvnets.modules.mobilevit_block.MobileViTBlockv2": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "folding_coreml"], [18, 3, 1, "", "folding_pytorch"], [18, 3, 1, "", "forward"], [18, 3, 1, "", "forward_spatial"], [18, 3, 1, "", "forward_temporal"], [18, 3, 1, "", "resize_input_if_needed"], [18, 3, 1, "", "unfolding_coreml"], [18, 3, 1, "", "unfolding_pytorch"]], "cvnets.modules.pspnet_module": [[18, 2, 1, "", "PSP"]], "cvnets.modules.pspnet_module.PSP": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.regnet_modules": [[18, 2, 1, "", "AnyRegNetStage"], [18, 2, 1, "", "XRegNetBlock"]], "cvnets.modules.regnet_modules.AnyRegNetStage": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.regnet_modules.XRegNetBlock": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.resnet_modules": [[18, 2, 1, "", "BasicResNetBlock"], [18, 2, 1, "", "BottleneckResNetBlock"]], "cvnets.modules.resnet_modules.BasicResNetBlock": [[18, 3, 1, "", "__init__"], [18, 4, 1, "", "expansion"], [18, 3, 1, "", "forward"]], "cvnets.modules.resnet_modules.BottleneckResNetBlock": [[18, 3, 1, "", "__init__"], [18, 4, 1, "", "expansion"], [18, 3, 1, "", "forward"]], "cvnets.modules.squeeze_excitation": [[18, 2, 1, "", "SqueezeExcitation"]], "cvnets.modules.squeeze_excitation.SqueezeExcitation": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.ssd_heads": [[18, 2, 1, "", "SSDHead"], [18, 2, 1, "", "SSDInstanceHead"]], "cvnets.modules.ssd_heads.SSDHead": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"], [18, 3, 1, "", "reset_parameters"]], "cvnets.modules.ssd_heads.SSDInstanceHead": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"], [18, 3, 1, "", "reset_parameters"]], "cvnets.modules.swin_transformer_block": [[18, 2, 1, "", "PatchMerging"], [18, 2, 1, "", "Permute"], [18, 2, 1, "", "ShiftedWindowAttention"], [18, 2, 1, "", "SwinTransformerBlock"], [18, 1, 1, "", "shifted_window_attention"]], "cvnets.modules.swin_transformer_block.PatchMerging": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.swin_transformer_block.Permute": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.swin_transformer_block.ShiftedWindowAttention": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.swin_transformer_block.SwinTransformerBlock": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.transformer": [[18, 2, 1, "", "LinearAttnFFN"], [18, 2, 1, "", "TransformerEncoder"]], "cvnets.modules.transformer.LinearAttnFFN": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.transformer.TransformerEncoder": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.modules.windowed_transformer": [[18, 2, 1, "", "WindowedTransformerEncoder"], [18, 1, 1, "", "get_windows_shift_mask"], [18, 1, 1, "", "unwindow_x"], [18, 1, 1, "", "window_partition"], [18, 1, 1, "", "window_partition_reverse"], [18, 1, 1, "", "window_x_and_key_padding_mask"]], "cvnets.modules.windowed_transformer.WindowedTransformerEncoder": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "forward"]], "cvnets.neural_augmentor": [[19, 1, 1, "", "arguments_neural_augmentor"], [19, 0, 0, "-", "neural_aug"], [20, 0, 0, "-", "utils"]], "cvnets.neural_augmentor.neural_aug": [[19, 2, 1, "", "BaseNeuralAugmentor"], [19, 2, 1, "", "BasicNeuralAugmentor"], [19, 2, 1, "", "DistributionNeuralAugmentor"], [19, 1, 1, "", "build_neural_augmentor"]], "cvnets.neural_augmentor.neural_aug.BaseNeuralAugmentor": [[19, 3, 1, "", "__init__"], [19, 3, 1, "", "add_arguments"], [19, 3, 1, "", "forward"], [19, 3, 1, "", "get_trainable_parameters"]], "cvnets.neural_augmentor.neural_aug.BasicNeuralAugmentor": [[19, 3, 1, "", "__init__"]], "cvnets.neural_augmentor.neural_aug.DistributionNeuralAugmentor": [[19, 3, 1, "", "__init__"]], "cvnets.neural_augmentor.utils": [[20, 0, 0, "-", "neural_aug_utils"]], "cvnets.neural_augmentor.utils.neural_aug_utils": [[20, 2, 1, "", "Clip"], [20, 2, 1, "", "FixedSampler"], [20, 2, 1, "", "Identity"], [20, 2, 1, "", "UniformSampler"], [20, 1, 1, "", "identity"], [20, 1, 1, "", "random_brightness"], [20, 1, 1, "", "random_contrast"], [20, 1, 1, "", "random_noise"]], "cvnets.neural_augmentor.utils.neural_aug_utils.Clip": [[20, 3, 1, "", "__init__"], [20, 3, 1, "", "forward"]], "cvnets.neural_augmentor.utils.neural_aug_utils.FixedSampler": [[20, 3, 1, "", "__init__"], [20, 3, 1, "", "forward"]], "cvnets.neural_augmentor.utils.neural_aug_utils.Identity": [[20, 3, 1, "", "__init__"], [20, 3, 1, "", "forward"]], "cvnets.neural_augmentor.utils.neural_aug_utils.UniformSampler": [[20, 3, 1, "", "__init__"], [20, 3, 1, "", "forward"], [20, 5, 1, "", "high"], [20, 5, 1, "", "low"]], "cvnets.text_encoders": [[21, 1, 1, "", "arguments_text_encoder"], [21, 0, 0, "-", "base_text_encoder"], [21, 1, 1, "", "build_text_encoder"], [21, 0, 0, "-", "transformer"]], "cvnets.text_encoders.base_text_encoder": [[21, 2, 1, "", "BaseTextEncoder"]], "cvnets.text_encoders.base_text_encoder.BaseTextEncoder": [[21, 3, 1, "", "__init__"], [21, 3, 1, "", "add_arguments"], [21, 3, 1, "", "dummy_input_and_label"], [21, 3, 1, "", "forward"], [21, 3, 1, "", "freeze_norm_layers"], [21, 3, 1, "", "get_trainable_parameters"], [21, 3, 1, "", "reset_parameters"]], "cvnets.text_encoders.transformer": [[21, 2, 1, "", "TextTransformer"]], "cvnets.text_encoders.transformer.TextTransformer": [[21, 3, 1, "", "__init__"], [21, 3, 1, "", "add_arguments"], [21, 3, 1, "", "build_attention_mask"], [21, 3, 1, "", "encode_text"], [21, 3, 1, "", "forward"], [21, 3, 1, "", "forward_embedding"], [21, 3, 1, "", "forward_zero_shot"], [21, 3, 1, "", "reset_parameters_clip_style"]], "data": [[23, 0, 0, "-", "collate_fns"], [22, 0, 0, "-", "data_loaders"], [24, 0, 0, "-", "datasets"], [32, 0, 0, "-", "loader"], [33, 0, 0, "-", "sampler"], [34, 0, 0, "-", "text_tokenizer"], [35, 0, 0, "-", "transforms"], [37, 0, 0, "-", "video_reader"]], "data.collate_fns": [[23, 1, 1, "", "arguments_collate_fn"], [23, 1, 1, "", "build_collate_fn"], [23, 1, 1, "", "build_test_collate_fn"], [23, 0, 0, "-", "byteformer_collate_functions"], [23, 0, 0, "-", "collate_functions"]], "data.collate_fns.byteformer_collate_functions": [[23, 1, 1, "", "apply_byte_permutation"], [23, 1, 1, "", "apply_mask_positions"], [23, 1, 1, "", "apply_padding"], [23, 1, 1, "", "apply_pil_save"], [23, 1, 1, "", "apply_random_uniform_noise"], [23, 1, 1, "", "apply_shuffle_bytes"], [23, 1, 1, "", "apply_torchaudio_save"], [23, 1, 1, "", "byteformer_audio_collate_fn"], [23, 1, 1, "", "byteformer_image_collate_fn"]], "data.collate_fns.collate_functions": [[23, 1, 1, "", "default_collate_fn"], [23, 1, 1, "", "image_classification_data_collate_fn"], [23, 1, 1, "", "pytorch_default_collate_fn"], [23, 1, 1, "", "unlabeled_image_data_collate_fn"]], "data.data_loaders": [[22, 1, 1, "", "create_test_loader"], [22, 1, 1, "", "create_train_val_loader"], [22, 1, 1, "", "get_num_data_samples_as_int_or_mapping"]], "data.datasets": [[24, 1, 1, "", "arguments_dataset"], [25, 0, 0, "-", "audio_classification"], [24, 1, 1, "", "build_dataset_from_registry"], [26, 0, 0, "-", "classification"], [24, 0, 0, "-", "dataset_base"], [27, 0, 0, "-", "detection"], [24, 1, 1, "", "get_test_dataset"], [24, 1, 1, "", "get_train_val_datasets"], [28, 0, 0, "-", "multi_modal_img_text"], [30, 0, 0, "-", "segmentation"], [31, 0, 0, "-", "utils"]], "data.datasets.audio_classification": [[25, 0, 0, "-", "speech_commands_v2"]], "data.datasets.audio_classification.speech_commands_v2": [[25, 2, 1, "", "SpeechCommandsv2Dataset"]], "data.datasets.audio_classification.speech_commands_v2.SpeechCommandsv2Dataset": [[25, 3, 1, "", "__init__"], [25, 3, 1, "", "add_arguments"], [25, 3, 1, "", "get_sample"], [25, 3, 1, "", "get_transformed_sample"]], "data.datasets.classification": [[26, 0, 0, "-", "base_image_classification_dataset"], [26, 0, 0, "-", "base_imagenet_shift_dataset"], [26, 0, 0, "-", "imagenet"], [26, 0, 0, "-", "imagenet_a"], [26, 0, 0, "-", "imagenet_r"], [26, 0, 0, "-", "imagenet_sketch"], [26, 0, 0, "-", "imagenet_synsets"], [26, 0, 0, "-", "imagenet_v2"], [26, 0, 0, "-", "places365"]], "data.datasets.classification.base_image_classification_dataset": [[26, 2, 1, "", "BaseImageClassificationDataset"]], "data.datasets.classification.base_image_classification_dataset.BaseImageClassificationDataset": [[26, 3, 1, "", "__init__"], [26, 3, 1, "", "add_arguments"], [26, 3, 1, "", "extra_repr"], [26, 3, 1, "", "share_dataset_arguments"]], "data.datasets.classification.base_imagenet_shift_dataset": [[26, 2, 1, "", "BaseImageNetShiftDataset"]], "data.datasets.classification.base_imagenet_shift_dataset.BaseImageNetShiftDataset": [[26, 3, 1, "", "__init__"], [26, 3, 1, "", "class_id_to_imagenet_class_id"], [26, 3, 1, "", "post_init_checks"]], "data.datasets.classification.imagenet": [[26, 2, 1, "", "ImageNetDataset"]], "data.datasets.classification.imagenet.ImageNetDataset": [[26, 3, 1, "", "__init__"]], "data.datasets.classification.imagenet_a": [[26, 2, 1, "", "ImageNetADataset"]], "data.datasets.classification.imagenet_a.ImageNetADataset": [[26, 3, 1, "", "__init__"], [26, 3, 1, "", "class_id_to_imagenet_class_id"]], "data.datasets.classification.imagenet_r": [[26, 2, 1, "", "ImageNetRDataset"]], "data.datasets.classification.imagenet_r.ImageNetRDataset": [[26, 3, 1, "", "__init__"], [26, 3, 1, "", "class_id_to_imagenet_class_id"]], "data.datasets.classification.imagenet_sketch": [[26, 2, 1, "", "ImageNetSketchDataset"]], "data.datasets.classification.imagenet_sketch.ImageNetSketchDataset": [[26, 3, 1, "", "__init__"], [26, 3, 1, "", "class_id_to_imagenet_class_id"]], "data.datasets.classification.imagenet_v2": [[26, 2, 1, "", "Imagenetv2Dataset"]], "data.datasets.classification.imagenet_v2.Imagenetv2Dataset": [[26, 3, 1, "", "__init__"], [26, 3, 1, "", "add_arguments"]], "data.datasets.classification.places365": [[26, 2, 1, "", "Places365Dataset"]], "data.datasets.classification.places365.Places365Dataset": [[26, 3, 1, "", "__init__"]], "data.datasets.dataset_base": [[24, 2, 1, "", "BaseDataset"], [24, 2, 1, "", "BaseImageDataset"], [24, 2, 1, "", "BaseVideoDataset"], [24, 2, 1, "", "VideoMetadataDict"]], "data.datasets.dataset_base.BaseDataset": [[24, 3, 1, "", "__init__"], [24, 3, 1, "", "add_arguments"], [24, 3, 1, "", "extra_repr"], [24, 3, 1, "", "get_augmentation_transforms"], [24, 3, 1, "", "get_item_metadata"], [24, 3, 1, "", "load_from_server"], [24, 3, 1, "", "share_dataset_arguments"]], "data.datasets.dataset_base.BaseImageDataset": [[24, 3, 1, "", "extra_repr"], [24, 3, 1, "", "read_image_pil"]], "data.datasets.dataset_base.BaseVideoDataset": [[24, 3, 1, "", "__init__"], [24, 3, 1, "", "add_arguments"], [24, 5, 1, "", "clips_per_video"], [24, 3, 1, "", "get_item_metadata"], [24, 5, 1, "", "n_frames_per_clip"]], "data.datasets.dataset_base.VideoMetadataDict": [[24, 4, 1, "", "audio_fps"], [24, 4, 1, "", "total_video_frames"], [24, 4, 1, "", "video_duration"], [24, 4, 1, "", "video_fps"]], "data.datasets.detection": [[27, 0, 0, "-", "base_detection"], [27, 0, 0, "-", "coco_base"], [27, 0, 0, "-", "coco_mask_rcnn"], [27, 0, 0, "-", "coco_ssd"]], "data.datasets.detection.base_detection": [[27, 2, 1, "", "BaseDetectionDataset"]], "data.datasets.detection.base_detection.BaseDetectionDataset": [[27, 3, 1, "", "__init__"], [27, 3, 1, "", "add_arguments"]], "data.datasets.detection.coco_base": [[27, 2, 1, "", "COCODetection"]], "data.datasets.detection.coco_base.COCODetection": [[27, 3, 1, "", "__init__"], [27, 3, 1, "", "add_arguments"], [27, 3, 1, "", "class_names"], [27, 3, 1, "", "extra_repr"], [27, 3, 1, "", "get_boxes_and_labels"], [27, 3, 1, "", "get_image"], [27, 3, 1, "", "share_dataset_arguments"]], "data.datasets.detection.coco_mask_rcnn": [[27, 2, 1, "", "COCODetectionMaskRCNN"], [27, 1, 1, "", "coco_mask_rcnn_collate_fn"]], "data.datasets.detection.coco_mask_rcnn.COCODetectionMaskRCNN": [[27, 3, 1, "", "__init__"], [27, 3, 1, "", "add_arguments"]], "data.datasets.detection.coco_ssd": [[27, 2, 1, "", "COCODetectionSSD"], [27, 1, 1, "", "coco_ssd_collate_fn"]], "data.datasets.detection.coco_ssd.COCODetectionSSD": [[27, 3, 1, "", "__init__"], [27, 3, 1, "", "extra_repr"], [27, 3, 1, "", "generate_anchors"]], "data.datasets.multi_modal_img_text": [[28, 1, 1, "", "arguments_multi_modal_img_text"], [28, 0, 0, "-", "base_multi_modal_img_text"], [28, 0, 0, "-", "flickr"], [28, 0, 0, "-", "img_text_tar_dataset"], [29, 0, 0, "-", "zero_shot"]], "data.datasets.multi_modal_img_text.base_multi_modal_img_text": [[28, 2, 1, "", "BaseMultiModalImgText"], [28, 1, 1, "", "multi_modal_img_text_collate_fn"]], "data.datasets.multi_modal_img_text.base_multi_modal_img_text.BaseMultiModalImgText": [[28, 3, 1, "", "__init__"], [28, 3, 1, "", "add_arguments"], [28, 3, 1, "", "extra_repr"], [28, 3, 1, "", "get_dataset"], [28, 3, 1, "", "get_dataset_pair"], [28, 3, 1, "", "get_zero_shot_dataset"], [28, 3, 1, "", "get_zero_shot_pair"], [28, 3, 1, "", "share_dataset_arguments"]], "data.datasets.multi_modal_img_text.flickr": [[28, 2, 1, "", "FlickrDataset"]], "data.datasets.multi_modal_img_text.flickr.FlickrDataset": [[28, 3, 1, "", "get_dataset"]], "data.datasets.multi_modal_img_text.img_text_tar_dataset": [[28, 2, 1, "", "ImgTextTarDataset"], [28, 1, 1, "", "async_download_file_from_s3"], [28, 1, 1, "", "decode_image"], [28, 1, 1, "", "decode_text"], [28, 1, 1, "", "extract_content"]], "data.datasets.multi_modal_img_text.img_text_tar_dataset.ImgTextTarDataset": [[28, 3, 1, "", "__init__"], [28, 3, 1, "", "add_arguments"], [28, 3, 1, "", "get_dataset"], [28, 3, 1, "", "get_dataset_pair"]], "data.datasets.multi_modal_img_text.zero_shot": [[29, 1, 1, "", "arguments_zero_shot_dataset"], [29, 0, 0, "-", "base_zero_shot"], [29, 1, 1, "", "build_zero_shot_dataset"], [29, 0, 0, "-", "imagenet"], [29, 0, 0, "-", "imagenet_class_names"], [29, 0, 0, "-", "templates"]], "data.datasets.multi_modal_img_text.zero_shot.base_zero_shot": [[29, 2, 1, "", "BaseZeroShotDataset"]], "data.datasets.multi_modal_img_text.zero_shot.base_zero_shot.BaseZeroShotDataset": [[29, 3, 1, "", "__init__"], [29, 3, 1, "", "add_arguments"], [29, 3, 1, "", "class_names"], [29, 3, 1, "", "generate_text_prompts"]], "data.datasets.multi_modal_img_text.zero_shot.imagenet": [[29, 2, 1, "", "ImageNetDatasetZeroShot"]], "data.datasets.multi_modal_img_text.zero_shot.imagenet.ImageNetDatasetZeroShot": [[29, 3, 1, "", "__init__"], [29, 3, 1, "", "class_names"], [29, 3, 1, "", "generate_text_prompts"]], "data.datasets.multi_modal_img_text.zero_shot.templates": [[29, 1, 1, "", "generate_text_prompts_clip"]], "data.datasets.segmentation": [[30, 0, 0, "-", "ade20k"], [30, 0, 0, "-", "base_segmentation"], [30, 0, 0, "-", "coco_segmentation"], [30, 0, 0, "-", "pascal_voc"]], "data.datasets.segmentation.ade20k": [[30, 2, 1, "", "ADE20KDataset"]], "data.datasets.segmentation.ade20k.ADE20KDataset": [[30, 3, 1, "", "__init__"], [30, 3, 1, "", "adjust_mask_value"], [30, 3, 1, "", "class_names"], [30, 3, 1, "", "color_palette"]], "data.datasets.segmentation.base_segmentation": [[30, 2, 1, "", "BaseImageSegmentationDataset"]], "data.datasets.segmentation.base_segmentation.BaseImageSegmentationDataset": [[30, 3, 1, "", "__init__"], [30, 3, 1, "", "add_arguments"], [30, 3, 1, "", "adjust_mask_value"], [30, 3, 1, "", "check_dataset"], [30, 3, 1, "", "class_names"], [30, 3, 1, "", "color_palette"], [30, 3, 1, "", "convert_mask_to_tensor"], [30, 3, 1, "", "read_mask_pil"]], "data.datasets.segmentation.coco_segmentation": [[30, 2, 1, "", "COCOSegmentationDataset"]], "data.datasets.segmentation.coco_segmentation.COCOSegmentationDataset": [[30, 3, 1, "", "__init__"], [30, 3, 1, "", "class_names"], [30, 3, 1, "", "coco_to_pascal_mapping"]], "data.datasets.segmentation.pascal_voc": [[30, 2, 1, "", "PascalVOCDataset"]], "data.datasets.segmentation.pascal_voc.PascalVOCDataset": [[30, 3, 1, "", "__init__"], [30, 3, 1, "", "add_arguments"], [30, 3, 1, "", "class_names"], [30, 3, 1, "", "color_palette"]], "data.datasets.utils": [[31, 0, 0, "-", "common"], [31, 0, 0, "-", "text"], [31, 0, 0, "-", "video"]], "data.datasets.utils.common": [[31, 1, 1, "", "file_has_allowed_extension"], [31, 1, 1, "", "file_has_valid_image_extension"], [31, 1, 1, "", "get_image_paths"], [31, 1, 1, "", "select_random_subset"], [31, 1, 1, "", "select_samples_by_category"]], "data.datasets.utils.text": [[31, 1, 1, "", "caption_preprocessing"]], "data.datasets.utils.video": [[31, 1, 1, "", "fetch_labels_from_timestamps"]], "data.loader": [[32, 0, 0, "-", "dataloader"]], "data.loader.dataloader": [[32, 2, 1, "", "CVNetsDataLoader"]], "data.loader.dataloader.CVNetsDataLoader": [[32, 3, 1, "", "__init__"], [32, 3, 1, "", "get_sample_indices"], [32, 3, 1, "", "samples_in_dataset"], [32, 3, 1, "", "update_indices"]], "data.sampler": [[33, 1, 1, "", "add_sampler_arguments"], [33, 0, 0, "-", "base_sampler"], [55, 0, 0, "-", "batch_sampler"], [33, 1, 1, "", "build_sampler"], [33, 0, 0, "-", "chain_sampler"], [55, 0, 0, "-", "multi_scale_sampler"], [33, 0, 0, "-", "utils"], [55, 0, 0, "-", "variable_batch_sampler"]], "data.sampler.base_sampler": [[33, 2, 1, "", "BaseSampler"], [33, 2, 1, "", "BaseSamplerDDP"], [33, 1, 1, "", "get_batch_size_from_opts"]], "data.sampler.base_sampler.BaseSampler": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "add_arguments"], [33, 3, 1, "", "extra_repr"], [33, 3, 1, "", "get_indices"], [33, 3, 1, "", "set_epoch"], [33, 3, 1, "", "update_indices"], [33, 3, 1, "", "update_scales"]], "data.sampler.base_sampler.BaseSamplerDDP": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "add_arguments"], [33, 3, 1, "", "extra_repr"], [33, 3, 1, "", "get_indices_rank_i"], [33, 3, 1, "", "set_epoch"], [33, 3, 1, "", "update_indices"], [33, 3, 1, "", "update_scales"]], "data.sampler.batch_sampler": [[55, 2, 1, "", "BatchSampler"], [55, 2, 1, "", "BatchSamplerDDP"]], "data.sampler.batch_sampler.BatchSampler": [[55, 3, 1, "", "__init__"], [55, 3, 1, "", "add_arguments"], [55, 3, 1, "", "extra_repr"]], "data.sampler.batch_sampler.BatchSamplerDDP": [[55, 3, 1, "", "__init__"], [55, 3, 1, "", "extra_repr"]], "data.sampler.chain_sampler": [[33, 2, 1, "", "ChainSampler"]], "data.sampler.chain_sampler.ChainSampler": [[33, 3, 1, "", "__init__"], [33, 3, 1, "", "add_arguments"], [33, 3, 1, "", "build_chain_sampler"], [33, 3, 1, "", "set_epoch"], [33, 3, 1, "", "update_indices"], [33, 3, 1, "", "update_scales"]], "data.sampler.multi_scale_sampler": [[55, 2, 1, "", "MultiScaleSampler"], [55, 2, 1, "", "MultiScaleSamplerDDP"]], "data.sampler.multi_scale_sampler.MultiScaleSampler": [[55, 3, 1, "", "__init__"], [55, 3, 1, "", "add_arguments"], [55, 3, 1, "", "extra_repr"], [55, 3, 1, "", "update_scales"]], "data.sampler.multi_scale_sampler.MultiScaleSamplerDDP": [[55, 3, 1, "", "__init__"], [55, 3, 1, "", "extra_repr"], [55, 3, 1, "", "update_scales"]], "data.sampler.utils": [[33, 1, 1, "", "create_intervallic_integer_list"], [33, 1, 1, "", "image_batch_pairs"], [33, 1, 1, "", "make_tuple_list"], [33, 1, 1, "", "make_video_pairs"]], "data.sampler.variable_batch_sampler": [[55, 2, 1, "", "VariableBatchSampler"], [55, 2, 1, "", "VariableBatchSamplerDDP"]], "data.sampler.variable_batch_sampler.VariableBatchSampler": [[55, 3, 1, "", "__init__"], [55, 3, 1, "", "add_arguments"], [55, 3, 1, "", "extra_repr"], [55, 3, 1, "", "update_scales"]], "data.sampler.variable_batch_sampler.VariableBatchSamplerDDP": [[55, 3, 1, "", "__init__"], [55, 3, 1, "", "extra_repr"], [55, 3, 1, "", "update_scales"]], "data.text_tokenizer": [[34, 1, 1, "", "arguments_tokenizer"], [34, 0, 0, "-", "base_tokenizer"], [34, 1, 1, "", "build_tokenizer"], [34, 0, 0, "-", "clip_tokenizer"]], "data.text_tokenizer.base_tokenizer": [[34, 2, 1, "", "BaseTokenizer"]], "data.text_tokenizer.base_tokenizer.BaseTokenizer": [[34, 3, 1, "", "__init__"], [34, 3, 1, "", "add_arguments"], [34, 3, 1, "", "forward"], [34, 3, 1, "", "get_encodings"], [34, 3, 1, "", "get_eot_token"], [34, 3, 1, "", "get_sot_token"], [34, 3, 1, "", "get_vocab_size"]], "data.text_tokenizer.clip_tokenizer": [[34, 2, 1, "", "ClipTokenizer"]], "data.text_tokenizer.clip_tokenizer.ClipTokenizer": [[34, 3, 1, "", "__init__"], [34, 3, 1, "", "add_arguments"], [34, 3, 1, "", "forward"], [34, 3, 1, "", "get_encodings"], [34, 3, 1, "", "get_eot_token"], [34, 3, 1, "", "get_sot_token"], [34, 3, 1, "", "get_vocab_size"]], "data.transforms": [[35, 1, 1, "", "arguments_augmentation"], [35, 0, 0, "-", "audio"], [36, 0, 0, "-", "audio_aux"], [35, 0, 0, "-", "audio_bytes"], [35, 0, 0, "-", "base_transforms"], [35, 0, 0, "-", "common"], [35, 0, 0, "-", "image_bytes"], [35, 0, 0, "-", "image_pil"], [35, 0, 0, "-", "image_torch"], [35, 0, 0, "-", "utils"], [35, 0, 0, "-", "video"]], "data.transforms.audio": [[35, 2, 1, "", "AudioResample"], [35, 2, 1, "", "Gain"], [35, 2, 1, "", "LambdaAudio"], [35, 2, 1, "", "MFCCs"], [35, 2, 1, "", "Noise"], [35, 2, 1, "", "Roll"], [35, 2, 1, "", "SetFixedLength"], [35, 2, 1, "", "StandardizeChannels"]], "data.transforms.audio.AudioResample": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.audio.Gain": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.audio.LambdaAudio": [[35, 3, 1, "", "__init__"]], "data.transforms.audio.MFCCs": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.audio.Noise": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"], [35, 3, 1, "", "load_noise_files"]], "data.transforms.audio.Roll": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.audio.SetFixedLength": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.audio.StandardizeChannels": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.audio_aux": [[36, 0, 0, "-", "mfccs"]], "data.transforms.audio_aux.mfccs": [[36, 1, 1, "", "calculate_mfccs"], [36, 1, 1, "", "get_mfcc_features"], [36, 1, 1, "", "get_mfccs"], [36, 1, 1, "", "get_padded_features"]], "data.transforms.audio_bytes": [[35, 2, 1, "", "TorchaudioSave"]], "data.transforms.audio_bytes.TorchaudioSave": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.base_transforms": [[35, 2, 1, "", "BaseTransformation"]], "data.transforms.base_transforms.BaseTransformation": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.common": [[35, 2, 1, "", "Compose"]], "data.transforms.common.Compose": [[35, 3, 1, "", "__init__"]], "data.transforms.image_bytes": [[35, 2, 1, "", "BytePermutation"], [35, 2, 1, "", "MaskPositions"], [35, 2, 1, "", "PILSave"], [35, 2, 1, "", "RandomUniformNoise"], [35, 2, 1, "", "ShuffleBytes"]], "data.transforms.image_bytes.BytePermutation": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_bytes.MaskPositions": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_bytes.PILSave": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_bytes.RandomUniformNoise": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_bytes.ShuffleBytes": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil": [[35, 2, 1, "", "AutoAugment"], [35, 2, 1, "", "BoxPercentCoords"], [35, 2, 1, "", "CenterCrop"], [35, 2, 1, "", "FixedSizeCrop"], [35, 2, 1, "", "InstanceProcessor"], [35, 2, 1, "", "PhotometricDistort"], [35, 2, 1, "", "RandAugment"], [35, 2, 1, "", "RandAugmentTimm"], [35, 2, 1, "", "RandomCrop"], [35, 2, 1, "", "RandomErasing"], [35, 2, 1, "", "RandomGaussianBlur"], [35, 2, 1, "", "RandomHorizontalFlip"], [35, 2, 1, "", "RandomOrder"], [35, 2, 1, "", "RandomResize"], [35, 2, 1, "", "RandomResizedCrop"], [35, 2, 1, "", "RandomRotate"], [35, 2, 1, "", "RandomShortSizeResize"], [35, 2, 1, "", "Resize"], [35, 2, 1, "", "SSDCroping"], [35, 2, 1, "", "ScaleJitter"], [35, 2, 1, "", "ToTensor"], [35, 2, 1, "", "TrivialAugmentWide"]], "data.transforms.image_pil.AutoAugment": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil.BoxPercentCoords": [[35, 3, 1, "", "__init__"]], "data.transforms.image_pil.CenterCrop": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil.FixedSizeCrop": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil.InstanceProcessor": [[35, 3, 1, "", "__init__"]], "data.transforms.image_pil.PhotometricDistort": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil.RandAugment": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil.RandAugmentTimm": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil.RandomCrop": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"], [35, 3, 1, "", "get_params"], [35, 3, 1, "", "get_params_from_box"], [35, 3, 1, "", "get_params_from_mask"]], "data.transforms.image_pil.RandomErasing": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil.RandomGaussianBlur": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil.RandomHorizontalFlip": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil.RandomOrder": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil.RandomResize": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil.RandomResizedCrop": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"], [35, 3, 1, "", "get_rrc_params"]], "data.transforms.image_pil.RandomRotate": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil.RandomShortSizeResize": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil.Resize": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil.SSDCroping": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil.ScaleJitter": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil.ToTensor": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_pil.TrivialAugmentWide": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_torch": [[35, 2, 1, "", "RandomCutmix"], [35, 2, 1, "", "RandomMixup"], [35, 1, 1, "", "apply_mixing_transforms"]], "data.transforms.image_torch.RandomCutmix": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.image_torch.RandomMixup": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.utils": [[35, 1, 1, "", "intersect"], [35, 1, 1, "", "jaccard_numpy"], [35, 1, 1, "", "setup_size"]], "data.transforms.video": [[35, 2, 1, "", "CenterCrop"], [35, 2, 1, "", "CropByBoundingBox"], [35, 2, 1, "", "RandomCrop"], [35, 2, 1, "", "RandomHorizontalFlip"], [35, 2, 1, "", "RandomResizedCrop"], [35, 2, 1, "", "RandomShortSizeResizeCrop"], [35, 2, 1, "", "Resize"], [35, 2, 1, "", "SaveInputs"], [35, 2, 1, "", "ShuffleAudios"], [35, 2, 1, "", "ToTensor"]], "data.transforms.video.CenterCrop": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.video.CropByBoundingBox": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"], [35, 3, 1, "", "expand_boxes"]], "data.transforms.video.RandomCrop": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"], [35, 3, 1, "", "get_params"]], "data.transforms.video.RandomHorizontalFlip": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.video.RandomResizedCrop": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"], [35, 3, 1, "", "get_params"]], "data.transforms.video.RandomShortSizeResizeCrop": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"], [35, 3, 1, "", "get_params"]], "data.transforms.video.Resize": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.video.SaveInputs": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"], [35, 3, 1, "", "save_video_with_annotations"]], "data.transforms.video.ShuffleAudios": [[35, 3, 1, "", "__init__"], [35, 3, 1, "", "add_arguments"]], "data.transforms.video.ToTensor": [[35, 3, 1, "", "__init__"]], "data.video_reader": [[37, 1, 1, "", "arguments_video_reader"], [37, 0, 0, "-", "base_av_reader"], [37, 0, 0, "-", "decord_reader"], [37, 1, 1, "", "get_video_reader"], [37, 0, 0, "-", "pyav_reader"]], "data.video_reader.base_av_reader": [[37, 2, 1, "", "BaseAVReader"], [37, 6, 1, "", "VideoDurationDoesNotMatchAudioDurationError"]], "data.video_reader.base_av_reader.BaseAVReader": [[37, 3, 1, "", "__init__"], [37, 3, 1, "", "add_arguments"], [37, 3, 1, "", "check_video"], [37, 3, 1, "", "dummy_audio_video_clips"], [37, 3, 1, "", "get_frame_transform"], [37, 3, 1, "", "num_frames"], [37, 3, 1, "", "random_sampling"], [37, 3, 1, "", "read_video"], [37, 3, 1, "", "read_video_file_into_clips"], [37, 3, 1, "", "uniform_sampling"]], "data.video_reader.decord_reader": [[37, 2, 1, "", "DecordAVReader"]], "data.video_reader.decord_reader.DecordAVReader": [[37, 3, 1, "", "__init__"], [37, 3, 1, "", "read_video"]], "data.video_reader.pyav_reader": [[37, 2, 1, "", "PyAVReader"]], "data.video_reader.pyav_reader.PyAVReader": [[37, 3, 1, "", "read_video"]], "engine": [[39, 0, 0, "-", "detection_utils"], [38, 0, 0, "-", "eval_detection"], [38, 0, 0, "-", "eval_segmentation"], [38, 0, 0, "-", "evaluation_engine"], [40, 0, 0, "-", "segmentation_utils"], [38, 0, 0, "-", "training_engine"], [38, 0, 0, "-", "utils"]], "engine.detection_utils": [[39, 0, 0, "-", "coco_map"]], "engine.detection_utils.coco_map": [[39, 1, 1, "", "coco_evaluation"], [39, 1, 1, "", "compute_quant_scores"]], "engine.eval_detection": [[38, 1, 1, "", "main_detection_evaluation"], [38, 1, 1, "", "predict_and_save"], [38, 1, 1, "", "predict_image"], [38, 1, 1, "", "predict_images_in_folder"], [38, 1, 1, "", "predict_labeled_dataset"], [38, 1, 1, "", "read_and_process_image"]], "engine.eval_segmentation": [[38, 1, 1, "", "draw_binary_masks"], [38, 1, 1, "", "draw_colored_masks"], [38, 1, 1, "", "main_segmentation_evaluation"], [38, 1, 1, "", "predict_and_save"], [38, 1, 1, "", "predict_image"], [38, 1, 1, "", "predict_images_in_folder"], [38, 1, 1, "", "predict_labeled_dataset"], [38, 1, 1, "", "read_and_process_image"]], "engine.evaluation_engine": [[38, 2, 1, "", "Evaluator"]], "engine.evaluation_engine.Evaluator": [[38, 3, 1, "", "__init__"], [38, 3, 1, "", "eval_fn_image"], [38, 3, 1, "", "eval_fn_video"], [38, 3, 1, "", "run"]], "engine.segmentation_utils": [[40, 0, 0, "-", "cityscapes_iou"]], "engine.segmentation_utils.cityscapes_iou": [[40, 1, 1, "", "eval_cityscapes"]], "engine.training_engine": [[38, 2, 1, "", "Trainer"]], "engine.training_engine.Trainer": [[38, 3, 1, "", "__init__"], [38, 3, 1, "", "compute_grad_norm"], [38, 3, 1, "", "find_easy_samples"], [38, 3, 1, "", "run"], [38, 3, 1, "", "run_loss_landscape"], [38, 3, 1, "", "train_epoch"], [38, 3, 1, "", "val_epoch"]], "engine.utils": [[38, 1, 1, "", "autocast_fn"], [38, 1, 1, "", "get_batch_size"], [38, 1, 1, "", "get_log_writers"], [38, 1, 1, "", "log_metrics"]], "loss_fn": [[41, 1, 1, "", "add_loss_fn_arguments"], [41, 0, 0, "-", "base_criteria"], [41, 1, 1, "", "build_loss_fn"], [42, 0, 0, "-", "classification"], [41, 0, 0, "-", "composite_loss"], [43, 0, 0, "-", "detection"], [44, 0, 0, "-", "distillation"], [45, 0, 0, "-", "multi_modal_img_text"], [41, 0, 0, "-", "neural_augmentation"], [46, 0, 0, "-", "segmentation"], [47, 0, 0, "-", "utils"]], "loss_fn.base_criteria": [[41, 2, 1, "", "BaseCriteria"]], "loss_fn.base_criteria.BaseCriteria": [[41, 3, 1, "", "__init__"], [41, 3, 1, "", "add_arguments"], [41, 3, 1, "", "extra_repr"], [41, 3, 1, "", "forward"]], "loss_fn.classification": [[42, 0, 0, "-", "base_classification_criteria"], [42, 0, 0, "-", "binary_cross_entropy"], [42, 0, 0, "-", "cross_entropy"]], "loss_fn.classification.base_classification_criteria": [[42, 2, 1, "", "BaseClassificationCriteria"]], "loss_fn.classification.base_classification_criteria.BaseClassificationCriteria": [[42, 3, 1, "", "__init__"], [42, 3, 1, "", "add_arguments"], [42, 3, 1, "", "forward"]], "loss_fn.classification.binary_cross_entropy": [[42, 2, 1, "", "BinaryCrossEntropy"]], "loss_fn.classification.binary_cross_entropy.BinaryCrossEntropy": [[42, 3, 1, "", "__init__"], [42, 3, 1, "", "add_arguments"], [42, 3, 1, "", "extra_repr"]], "loss_fn.classification.cross_entropy": [[42, 2, 1, "", "CrossEntropy"]], "loss_fn.classification.cross_entropy.CrossEntropy": [[42, 3, 1, "", "__init__"], [42, 3, 1, "", "add_arguments"], [42, 3, 1, "", "extra_repr"]], "loss_fn.composite_loss": [[41, 2, 1, "", "CompositeLoss"]], "loss_fn.composite_loss.CompositeLoss": [[41, 3, 1, "", "__init__"], [41, 3, 1, "", "add_arguments"], [41, 3, 1, "", "build_composite_loss_fn"], [41, 3, 1, "", "eval"], [41, 3, 1, "", "forward"], [41, 3, 1, "", "train"]], "loss_fn.detection": [[43, 0, 0, "-", "base_detection_criteria"], [43, 0, 0, "-", "mask_rcnn_loss"], [43, 0, 0, "-", "ssd_multibox_loss"]], "loss_fn.detection.base_detection_criteria": [[43, 2, 1, "", "BaseDetectionCriteria"]], "loss_fn.detection.base_detection_criteria.BaseDetectionCriteria": [[43, 3, 1, "", "__init__"], [43, 3, 1, "", "add_arguments"]], "loss_fn.detection.mask_rcnn_loss": [[43, 2, 1, "", "MaskRCNNLoss"]], "loss_fn.detection.mask_rcnn_loss.MaskRCNNLoss": [[43, 3, 1, "", "__init__"], [43, 3, 1, "", "add_arguments"], [43, 3, 1, "", "extra_repr"], [43, 3, 1, "", "forward"]], "loss_fn.detection.ssd_multibox_loss": [[43, 2, 1, "", "SSDLoss"]], "loss_fn.detection.ssd_multibox_loss.SSDLoss": [[43, 3, 1, "", "__init__"], [43, 3, 1, "", "add_arguments"], [43, 3, 1, "", "extra_repr"], [43, 3, 1, "", "forward"], [43, 3, 1, "", "reset_unscaled_loss_values"]], "loss_fn.distillation": [[44, 0, 0, "-", "base_distillation"], [44, 0, 0, "-", "hard_distillation"], [44, 0, 0, "-", "soft_kl_distillation"]], "loss_fn.distillation.base_distillation": [[44, 2, 1, "", "BaseDistillationCriteria"]], "loss_fn.distillation.base_distillation.BaseDistillationCriteria": [[44, 3, 1, "", "__init__"], [44, 3, 1, "", "add_arguments"], [44, 3, 1, "", "forward"]], "loss_fn.distillation.hard_distillation": [[44, 2, 1, "", "HardDistillationLoss"]], "loss_fn.distillation.hard_distillation.HardDistillationLoss": [[44, 3, 1, "", "__init__"], [44, 3, 1, "", "add_arguments"], [44, 3, 1, "", "extra_repr"]], "loss_fn.distillation.soft_kl_distillation": [[44, 2, 1, "", "SoftKLLoss"]], "loss_fn.distillation.soft_kl_distillation.SoftKLLoss": [[44, 3, 1, "", "__init__"], [44, 3, 1, "", "add_arguments"], [44, 3, 1, "", "extra_repr"]], "loss_fn.multi_modal_img_text": [[45, 0, 0, "-", "base_multi_modal_img_text_criteria"], [45, 0, 0, "-", "contrastive_loss_clip"]], "loss_fn.multi_modal_img_text.base_multi_modal_img_text_criteria": [[45, 2, 1, "", "BaseMultiModalImageTextCriteria"]], "loss_fn.multi_modal_img_text.base_multi_modal_img_text_criteria.BaseMultiModalImageTextCriteria": [[45, 3, 1, "", "__init__"], [45, 3, 1, "", "add_arguments"]], "loss_fn.multi_modal_img_text.contrastive_loss_clip": [[45, 2, 1, "", "ContrastiveLossClip"], [45, 1, 1, "", "gather_features"]], "loss_fn.multi_modal_img_text.contrastive_loss_clip.ContrastiveLossClip": [[45, 3, 1, "", "__init__"], [45, 3, 1, "", "forward"]], "loss_fn.neural_augmentation": [[41, 2, 1, "", "NeuralAugmentation"], [41, 1, 1, "", "cosine_curriculum"], [41, 1, 1, "", "linear_curriculum"]], "loss_fn.neural_augmentation.NeuralAugmentation": [[41, 3, 1, "", "__init__"], [41, 3, 1, "", "add_arguments"], [41, 3, 1, "", "extra_repr"], [41, 3, 1, "", "forward"]], "loss_fn.segmentation": [[46, 0, 0, "-", "base_segmentation_criteria"], [46, 0, 0, "-", "cross_entropy"]], "loss_fn.segmentation.base_segmentation_criteria": [[46, 2, 1, "", "BaseSegmentationCriteria"]], "loss_fn.segmentation.base_segmentation_criteria.BaseSegmentationCriteria": [[46, 3, 1, "", "__init__"], [46, 3, 1, "", "add_arguments"]], "loss_fn.segmentation.cross_entropy": [[46, 2, 1, "", "SegCrossEntropy"]], "loss_fn.segmentation.cross_entropy.SegCrossEntropy": [[46, 3, 1, "", "__init__"], [46, 3, 1, "", "add_arguments"], [46, 3, 1, "", "extra_repr"], [46, 3, 1, "", "forward"]], "loss_fn.utils": [[47, 0, 0, "-", "build_helper"], [47, 0, 0, "-", "class_weighting"]], "loss_fn.utils.build_helper": [[47, 1, 1, "", "build_cls_teacher_from_opts"]], "loss_fn.utils.class_weighting": [[47, 1, 1, "", "compute_class_weights"]], "loss_landscape": [[48, 0, 0, "-", "landscape_utils"]], "loss_landscape.landscape_utils": [[48, 1, 1, "", "create_bases"], [48, 1, 1, "", "generate_plots"], [48, 1, 1, "", "ignore_bn"], [48, 1, 1, "", "normalize_filter"], [48, 1, 1, "", "plot_save_graphs"], [48, 1, 1, "", "rand_basis"]], "metrics": [[49, 1, 1, "", "arguments_stats"], [49, 0, 0, "-", "average_precision"], [49, 0, 0, "-", "coco_map"], [49, 0, 0, "-", "confusion_mat"], [49, 0, 0, "-", "image_text_retrieval"], [49, 0, 0, "-", "intersection_over_union"], [49, 0, 0, "-", "metric_base"], [49, 0, 0, "-", "metric_base_test"], [49, 0, 0, "-", "misc"], [49, 0, 0, "-", "probability_histograms"], [49, 0, 0, "-", "psnr"], [49, 0, 0, "-", "retrieval_cmc"], [49, 0, 0, "-", "stats"], [49, 0, 0, "-", "topk_accuracy"]], "metrics.average_precision": [[49, 2, 1, "", "AveragePrecisionMetric"]], "metrics.average_precision.AveragePrecisionMetric": [[49, 3, 1, "", "compute_with_aggregates"]], "metrics.coco_map": [[49, 2, 1, "", "COCOEvaluator"]], "metrics.coco_map.COCOEvaluator": [[49, 3, 1, "", "__init__"], [49, 3, 1, "", "compute"], [49, 3, 1, "", "prepare_cache_results"], [49, 3, 1, "", "reset"], [49, 3, 1, "", "summarize_coco_results"], [49, 3, 1, "", "update"]], "metrics.confusion_mat": [[49, 2, 1, "", "ConfusionMatrix"]], "metrics.confusion_mat.ConfusionMatrix": [[49, 3, 1, "", "compute"], [49, 3, 1, "", "reset"], [49, 3, 1, "", "update"]], "metrics.image_text_retrieval": [[49, 2, 1, "", "ImageTextRetrievalMetric"]], "metrics.image_text_retrieval.ImageTextRetrievalMetric": [[49, 3, 1, "", "__init__"], [49, 3, 1, "", "add_arguments"], [49, 3, 1, "", "compute"], [49, 3, 1, "", "get_aggregates"], [49, 3, 1, "", "reset"], [49, 3, 1, "", "update"]], "metrics.intersection_over_union": [[49, 2, 1, "", "IOUMetric"], [49, 1, 1, "", "compute_miou_batch"]], "metrics.intersection_over_union.IOUMetric": [[49, 3, 1, "", "compute"], [49, 3, 1, "", "gather_metrics"]], "metrics.metric_base": [[49, 2, 1, "", "AverageMetric"], [49, 2, 1, "", "BaseMetric"], [49, 2, 1, "", "EpochMetric"]], "metrics.metric_base.AverageMetric": [[49, 3, 1, "", "compute"], [49, 3, 1, "", "gather_metrics"], [49, 3, 1, "", "reset"], [49, 3, 1, "", "update"]], "metrics.metric_base.BaseMetric": [[49, 3, 1, "", "__init__"], [49, 3, 1, "", "add_arguments"], [49, 3, 1, "", "compute"], [49, 3, 1, "", "preprocess_predictions"], [49, 3, 1, "", "preprocess_targets"], [49, 3, 1, "", "reset"], [49, 3, 1, "", "update"]], "metrics.metric_base.EpochMetric": [[49, 3, 1, "", "__init__"], [49, 3, 1, "", "compute"], [49, 3, 1, "", "compute_with_aggregates"], [49, 3, 1, "", "get_aggregates"], [49, 3, 1, "", "reset"], [49, 3, 1, "", "update"]], "metrics.metric_base_test": [[49, 2, 1, "", "DummyMetric"], [49, 1, 1, "", "test_average_metric_distributed_batchsize"]], "metrics.metric_base_test.DummyMetric": [[49, 3, 1, "", "gather_metrics"]], "metrics.misc": [[49, 2, 1, "", "GradNormMetric"], [49, 2, 1, "", "LossMetric"]], "metrics.misc.GradNormMetric": [[49, 3, 1, "", "gather_metrics"]], "metrics.misc.LossMetric": [[49, 3, 1, "", "gather_metrics"]], "metrics.probability_histograms": [[49, 2, 1, "", "ProbabilityHistogramMetric"]], "metrics.probability_histograms.ProbabilityHistogramMetric": [[49, 3, 1, "", "__init__"], [49, 3, 1, "", "add_arguments"], [49, 3, 1, "", "compute_with_aggregates"]], "metrics.psnr": [[49, 2, 1, "", "PSNRMetric"], [49, 1, 1, "", "compute_psnr"]], "metrics.psnr.PSNRMetric": [[49, 3, 1, "", "gather_metrics"]], "metrics.retrieval_cmc": [[49, 2, 1, "", "RetrievalCMC"], [49, 1, 1, "", "cmc_calculation"], [49, 1, 1, "", "cosine_distance_matrix"], [49, 1, 1, "", "l2_distance_matrix"], [49, 1, 1, "", "mean_ap"]], "metrics.retrieval_cmc.RetrievalCMC": [[49, 3, 1, "", "__init__"], [49, 3, 1, "", "add_arguments"], [49, 3, 1, "", "compute_with_aggregates"]], "metrics.stats": [[49, 2, 1, "", "Statistics"]], "metrics.stats.Statistics": [[49, 3, 1, "", "__init__"], [49, 3, 1, "", "avg_statistics"], [49, 3, 1, "", "epoch_summary"], [49, 3, 1, "", "iter_summary"], [49, 3, 1, "", "update"]], "metrics.topk_accuracy": [[49, 2, 1, "", "Top1Metric"], [49, 2, 1, "", "Top5Metric"], [49, 2, 1, "", "TopKMetric"], [49, 1, 1, "", "top_k_accuracy"]], "metrics.topk_accuracy.Top1Metric": [[49, 4, 1, "", "K"]], "metrics.topk_accuracy.Top5Metric": [[49, 4, 1, "", "K"]], "metrics.topk_accuracy.TopKMetric": [[49, 4, 1, "", "K"], [49, 3, 1, "", "gather_metrics"]], "optim": [[50, 0, 0, "-", "adam"], [50, 0, 0, "-", "adamw"], [50, 1, 1, "", "arguments_optimizer"], [50, 0, 0, "-", "base_optim"], [50, 1, 1, "", "build_optimizer"], [50, 1, 1, "", "check_trainable_parameters"], [50, 1, 1, "", "remove_param_name_key"], [51, 0, 0, "-", "scheduler"], [50, 0, 0, "-", "sgd"]], "optim.adam": [[50, 2, 1, "", "AdamOptimizer"]], "optim.adam.AdamOptimizer": [[50, 3, 1, "", "__init__"], [50, 3, 1, "", "add_arguments"]], "optim.adamw": [[50, 2, 1, "", "AdamWOptimizer"]], "optim.adamw.AdamWOptimizer": [[50, 3, 1, "", "__init__"], [50, 3, 1, "", "add_arguments"]], "optim.base_optim": [[50, 2, 1, "", "BaseOptim"]], "optim.base_optim.BaseOptim": [[50, 3, 1, "", "__init__"], [50, 3, 1, "", "add_arguments"]], "optim.scheduler": [[51, 1, 1, "", "arguments_scheduler"], [51, 0, 0, "-", "base_scheduler"], [51, 1, 1, "", "build_scheduler"], [51, 0, 0, "-", "cosine"], [51, 0, 0, "-", "cyclic"], [51, 0, 0, "-", "fixed"], [51, 1, 1, "", "general_lr_sch_args"], [51, 0, 0, "-", "multi_step"], [51, 0, 0, "-", "polynomial"]], "optim.scheduler.base_scheduler": [[51, 2, 1, "", "BaseLRScheduler"]], "optim.scheduler.base_scheduler.BaseLRScheduler": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "add_arguments"], [51, 3, 1, "", "extra_repr"], [51, 3, 1, "", "get_lr"], [51, 3, 1, "", "retrieve_lr"], [51, 3, 1, "", "update_lr"]], "optim.scheduler.cosine": [[51, 2, 1, "", "CosineScheduler"]], "optim.scheduler.cosine.CosineScheduler": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "add_arguments"], [51, 3, 1, "", "get_lr"]], "optim.scheduler.cyclic": [[51, 2, 1, "", "CyclicLRScheduler"]], "optim.scheduler.cyclic.CyclicLRScheduler": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "add_arguments"], [51, 3, 1, "", "get_lr"]], "optim.scheduler.fixed": [[51, 2, 1, "", "FixedLRScheduler"]], "optim.scheduler.fixed.FixedLRScheduler": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "add_arguments"], [51, 3, 1, "", "get_lr"]], "optim.scheduler.multi_step": [[51, 2, 1, "", "MultiStepLRScheduler"]], "optim.scheduler.multi_step.MultiStepLRScheduler": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "add_arguments"], [51, 3, 1, "", "get_lr"]], "optim.scheduler.polynomial": [[51, 2, 1, "", "PolynomialScheduler"]], "optim.scheduler.polynomial.PolynomialScheduler": [[51, 3, 1, "", "__init__"], [51, 3, 1, "", "add_arguments"], [51, 3, 1, "", "get_lr"]], "optim.sgd": [[50, 2, 1, "", "SGDOptimizer"]], "optim.sgd.SGDOptimizer": [[50, 3, 1, "", "__init__"], [50, 3, 1, "", "add_arguments"]], "options": [[52, 0, 0, "-", "errors"], [52, 0, 0, "-", "opts"], [52, 0, 0, "-", "parse_args"], [52, 0, 0, "-", "utils"]], "options.errors": [[52, 6, 1, "", "UnrecognizedYamlConfigEntry"]], "options.errors.UnrecognizedYamlConfigEntry": [[52, 3, 1, "", "__init__"]], "options.opts": [[52, 2, 1, "", "ParseKwargs"], [52, 1, 1, "", "arguments_common"], [52, 1, 1, "", "arguments_ddp"], [52, 1, 1, "", "get_benchmarking_arguments"], [52, 1, 1, "", "get_conversion_arguments"], [52, 1, 1, "", "get_eval_arguments"], [52, 1, 1, "", "get_loss_landscape_args"], [52, 1, 1, "", "get_training_arguments"], [52, 1, 1, "", "parser_to_opts"]], "options.parse_args": [[52, 2, 1, "", "JsonValidator"], [52, 1, 1, "", "parse_validation_metric_names"]], "options.parse_args.JsonValidator": [[52, 3, 1, "", "__init__"]], "options.utils": [[52, 1, 1, "", "extend_selected_args_with_prefix"], [52, 1, 1, "", "extract_opts_with_prefix_replacement"], [52, 1, 1, "", "flatten_yaml_as_dict"], [52, 1, 1, "", "load_config_file"]], "utils": [[53, 0, 0, "-", "checkpoint_utils"], [53, 0, 0, "-", "color_map"], [53, 0, 0, "-", "common_utils"], [53, 0, 0, "-", "ddp_utils"], [53, 0, 0, "-", "dict_utils"], [53, 0, 0, "-", "download_utils"], [53, 0, 0, "-", "download_utils_base"], [53, 0, 0, "-", "import_utils"], [53, 0, 0, "-", "logger"], [53, 0, 0, "-", "math_utils"], [53, 0, 0, "-", "object_utils"], [53, 0, 0, "-", "object_utils_test"], [53, 0, 0, "-", "pytorch_to_coreml"], [53, 0, 0, "-", "registry"], [53, 0, 0, "-", "registry_test"], [53, 0, 0, "-", "resources"], [53, 0, 0, "-", "tensor_utils"], [54, 0, 0, "-", "third_party"], [53, 0, 0, "-", "visualization_utils"]], "utils.checkpoint_utils": [[53, 1, 1, "", "average_ckpts"], [53, 1, 1, "", "avg_and_save_k_checkpoints"], [53, 1, 1, "", "copy_weights"], [53, 1, 1, "", "get_model_state_dict"], [53, 1, 1, "", "get_training_state"], [53, 1, 1, "", "load_checkpoint"], [53, 1, 1, "", "load_model_state"], [53, 1, 1, "", "load_state_dict"], [53, 1, 1, "", "save_checkpoint"], [53, 1, 1, "", "save_interval_checkpoint"]], "utils.color_map": [[53, 2, 1, "", "Colormap"]], "utils.color_map.Colormap": [[53, 3, 1, "", "__init__"], [53, 3, 1, "", "get_bit_at_idx"], [53, 3, 1, "", "get_box_color_codes"], [53, 3, 1, "", "get_color_map"], [53, 3, 1, "", "get_color_map_list"]], "utils.common_utils": [[53, 1, 1, "", "check_compatibility"], [53, 1, 1, "", "check_frozen_norm_layer"], [53, 1, 1, "", "create_directories"], [53, 1, 1, "", "device_setup"], [53, 1, 1, "", "is_coreml_conversion"], [53, 1, 1, "", "move_to_device"], [53, 1, 1, "", "unwrap_model_fn"]], "utils.ddp_utils": [[53, 1, 1, "", "dist_barrier"], [53, 1, 1, "", "dist_monitored_barrier"], [53, 1, 1, "", "distributed_init"], [53, 1, 1, "", "get_node_rank"], [53, 1, 1, "", "get_world_size"], [53, 1, 1, "", "is_master"], [53, 1, 1, "", "is_start_rank_node"]], "utils.dict_utils": [[53, 1, 1, "", "filter_keys"]], "utils.download_utils_base": [[53, 1, 1, "", "get_basic_local_path"]], "utils.import_utils": [[53, 1, 1, "", "import_modules_from_folder"]], "utils.logger": [[53, 1, 1, "", "color_text"], [53, 1, 1, "", "debug"], [53, 1, 1, "", "disable_printing"], [53, 1, 1, "", "double_dash_line"], [53, 1, 1, "", "enable_printing"], [53, 1, 1, "", "error"], [53, 1, 1, "", "get_curr_time_stamp"], [53, 1, 1, "", "ignore_exception_with_warning"], [53, 1, 1, "", "info"], [53, 1, 1, "", "log"], [53, 1, 1, "", "print_header"], [53, 1, 1, "", "print_header_minor"], [53, 1, 1, "", "singe_dash_line"], [53, 1, 1, "", "warning"]], "utils.math_utils": [[53, 1, 1, "", "bound_fn"], [53, 1, 1, "", "make_divisible"]], "utils.object_utils": [[53, 1, 1, "", "apply_recursively"], [53, 1, 1, "", "flatten_to_dict"], [53, 1, 1, "", "is_iterable"], [53, 1, 1, "", "is_pytest_environment"]], "utils.object_utils_test": [[53, 1, 1, "", "test_apply_on_values"], [53, 1, 1, "", "test_flatten_to_dict"]], "utils.pytorch_to_coreml": [[53, 1, 1, "", "assertion_check"], [53, 1, 1, "", "convert_pytorch_to_coreml"]], "utils.registry": [[53, 2, 1, "", "Registry"]], "utils.registry.Registry": [[53, 3, 1, "", "__init__"], [53, 3, 1, "", "all_arguments"], [53, 3, 1, "", "items"], [53, 3, 1, "", "keys"], [53, 3, 1, "", "parse_key"], [53, 3, 1, "", "register"]], "utils.registry_test": [[53, 1, 1, "", "test_basic_registration"], [53, 1, 1, "", "test_functional_registry"]], "utils.resources": [[53, 1, 1, "", "cpu_count"]], "utils.tensor_utils": [[53, 1, 1, "", "all_gather_list"], [53, 1, 1, "", "create_rand_tensor"], [53, 1, 1, "", "gather_all_features"], [53, 1, 1, "", "image_size_from_opts"], [53, 1, 1, "", "reduce_tensor"], [53, 1, 1, "", "reduce_tensor_sum"], [53, 1, 1, "", "tensor_to_python_float"], [53, 1, 1, "", "to_numpy"], [53, 1, 1, "", "video_size_from_opts"]], "utils.third_party": [[54, 0, 0, "-", "ddp_functional_utils"]], "utils.third_party.ddp_functional_utils": [[54, 1, 1, "", "all_gather"], [54, 1, 1, "", "all_reduce"], [54, 1, 1, "", "all_to_all"], [54, 1, 1, "", "all_to_all_single"], [54, 1, 1, "", "broadcast"], [54, 1, 1, "", "gather"], [54, 1, 1, "", "reduce"], [54, 1, 1, "", "reduce_scatter"], [54, 1, 1, "", "scatter"]], "utils.visualization_utils": [[53, 1, 1, "", "convert_to_cityscape_format"], [53, 1, 1, "", "create_colored_mask"], [53, 1, 1, "", "draw_bounding_boxes"], [53, 1, 1, "", "visualize_boxes_xyxy"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:attribute", "5": "py:property", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"cvnet": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 60, 73], "packag": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "subpackag": [0, 3, 7, 9, 11, 13, 16, 19, 22, 24, 28, 35, 38, 41, 50, 53], "modul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57], "content": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73], "anchor_gener": 1, "submodul": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "base_anchor_gener": 1, "ssd_anchor_gener": 1, "image_projection_lay": 2, "attention_pool_2d": 2, "base_image_project": 2, "global_pool_2d": 2, "simple_projection_head": 2, "layer": [3, 4, 5], "adaptive_pool": 3, "base_lay": 3, "conv_lay": 3, "dropout": 3, "embed": 3, "flatten": 3, "global_pool": 3, "ident": 3, "linear_attent": 3, "linear_lay": 3, "multi_head_attent": 3, "normalization_lay": 3, "pixel_shuffl": 3, "pool": 3, "positional_embed": 3, "positional_encod": 3, "random_lay": 3, "single_head_attent": 3, "softmax": 3, "stochastic_depth": 3, "token_merg": 3, "upsampl": 3, "activ": 4, "gelu": 4, "hard_sigmoid": 4, "hard_swish": 4, "leaky_relu": 4, "prelu": 4, "relu": 4, "relu6": 4, "sigmoid": 4, "swish": 4, "tanh": 4, "normal": 5, "batch_norm": 5, "group_norm": 5, "instance_norm": 5, "layer_norm": 5, "sync_batch_norm": 5, "matcher_det": 6, "base_match": 6, "ssd_matcher": 6, "misc": [7, 8, 49], "averaging_util": 7, "box_util": 7, "common": [7, 31, 35], "init_util": 7, "third_parti": [8, 54], "ssd_util": 8, "model": [9, 10, 11, 12, 13, 14, 15, 16, 17, 56, 57, 58, 60, 61, 64, 66, 75], "base_model": 9, "audio_classif": [10, 25], "audio_byteform": 10, "base_audio_classif": 10, "classif": [11, 12, 26, 42, 58, 60, 61, 66], "base_image_encod": 11, "byteform": [11, 12], "efficientnet": [11, 12, 18], "fastvit": [11, 12, 18], "mobilenetv1": [11, 12, 75], "mobilenetv2": [11, 12, 18, 75], "mobilenetv3": [11, 12, 75], "mobileon": [11, 12], "mobilevit": [11, 12, 63, 75], "mobilevit_v2": [11, 12], "regnet": [11, 12], "resnet": [11, 12, 65, 75], "swin_transform": [11, 12], "vit": [11, 12, 75], "config": [12, 56], "detect": [13, 14, 27, 43, 58, 60, 67, 68], "base_detect": [13, 27], "mask_rcnn": 13, "ssd": 13, "util": [14, 20, 31, 33, 35, 38, 47, 52, 53, 54], "rcnn_util": 14, "multi_modal_img_text": [15, 28, 29, 45], "base_multi_modal_img_text": [15, 28], "clip": 15, "segment": [16, 17, 30, 46, 58, 60, 69, 70], "base_seg": 16, "enc_dec": 16, "head": 17, "base_seg_head": 17, "deeplabv3": [17, 69], "pspnet": 17, "simple_seg_head": 17, "aspp_block": 18, "base_modul": 18, "feature_pyramid": 18, "mobileone_block": 18, "mobilevit_block": 18, "pspnet_modul": 18, "regnet_modul": 18, "resnet_modul": 18, "squeeze_excit": 18, "ssd_head": 18, "swin_transformer_block": 18, "transform": [18, 21, 35, 36], "windowed_transform": 18, "neural_augmentor": [19, 20], "neural_aug": 19, "neural_aug_util": 20, "text_encod": 21, "base_text_encod": 21, "data": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 55, 56, 76], "data_load": 22, "collate_fn": 23, "byteformer_collate_funct": 23, "collate_funct": 23, "dataset": [24, 25, 26, 27, 28, 29, 30, 31, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68], "dataset_bas": 24, "speech_commands_v2": 25, "base_image_classification_dataset": 26, "base_imagenet_shift_dataset": 26, "imagenet": [26, 29, 58, 61, 62, 63, 64, 65, 66], "imagenet_a": 26, "imagenet_r": 26, "imagenet_sketch": 26, "imagenet_synset": 26, "imagenet_v2": 26, "places365": 26, "coco_bas": 27, "coco_mask_rcnn": 27, "coco_ssd": 27, "flickr": 28, "img_text_tar_dataset": 28, "zero_shot": 29, "base_zero_shot": 29, "imagenet_class_nam": 29, "templat": 29, "ade20k": [30, 58], "base_segment": 30, "coco_segment": 30, "pascal_voc": 30, "text": 31, "video": [31, 35, 55, 58], "loader": 32, "dataload": 32, "sampler": [33, 55, 56], "base_sampl": 33, "batch_sampl": 33, "chain_sampl": 33, "multi_scale_sampl": 33, "variable_batch_sampl": 33, "text_token": 34, "base_token": 34, "clip_token": 34, "audio": 35, "audio_byt": 35, "base_transform": 35, "image_byt": 35, "image_pil": 35, "image_torch": 35, "audio_aux": 36, "mfcc": 36, "video_read": 37, "base_av_read": 37, "decord_read": 37, "pyav_read": 37, "engin": [38, 39, 40, 57], "eval_detect": 38, "eval_segment": 38, "evaluation_engin": 38, "training_engin": 38, "detection_util": 39, "coco_map": [39, 49], "segmentation_util": 40, "cityscapes_i": 40, "loss_fn": [41, 42, 43, 44, 45, 46, 47], "base_criteria": 41, "composite_loss": 41, "neural_augment": 41, "base_classification_criteria": 42, "binary_cross_entropi": 42, "cross_entropi": [42, 46], "base_detection_criteria": 43, "mask_rcnn_loss": 43, "ssd_multibox_loss": 43, "distil": 44, "base_distil": 44, "hard_distil": 44, "soft_kl_distil": 44, "base_multi_modal_img_text_criteria": 45, "contrastive_loss_clip": 45, "base_segmentation_criteria": 46, "build_help": 47, "class_weight": 47, "loss_landscap": 48, "landscape_util": 48, "metric": 49, "average_precis": 49, "confusion_mat": 49, "image_text_retriev": 49, "intersection_over_union": 49, "metric_bas": 49, "metric_base_test": 49, "probability_histogram": 49, "psnr": 49, "retrieval_cmc": 49, "stat": 49, "topk_accuraci": 49, "optim": [50, 51, 56], "adam": 50, "adamw": 50, "base_optim": 50, "sgd": 50, "schedul": [51, 56], "base_schedul": 51, "cosin": 51, "cyclic": 51, "fix": [51, 55], "multi_step": 51, "polynomi": 51, "option": 52, "error": 52, "opt": 52, "parse_arg": 52, "checkpoint_util": 53, "color_map": 53, "common_util": 53, "ddp_util": 53, "dict_util": 53, "download_util": 53, "download_utils_bas": 53, "import_util": 53, "logger": 53, "math_util": 53, "object_util": 53, "object_utils_test": 53, "pytorch_to_coreml": 53, "registri": 53, "registry_test": 53, "resourc": 53, "tensor_util": 53, "visualization_util": 53, "ddp_functional_util": 54, "singl": 55, "scale": 55, "batch": 55, "size": 55, "ssc": 55, "fb": 55, "multi": 55, "msc": 55, "variabl": 55, "vb": 55, "object": [55, 58, 67, 68], "file": 56, "introduct": 56, "walkthrough": 56, "augment": 56, "lr": 56, "ema": 56, "train": [56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70], "statist": 56, "directori": 57, "structur": 57, "evalu": [57, 61, 66, 67, 68, 69, 70], "zoo": 58, "1k": [58, 64], "mobilevitv1": 58, "legaci": 58, "mobilevitv2": [58, 60, 64, 70], "256x256": [58, 64], "finetun": [58, 61, 64], "384x384": [58, 64], "21k": [58, 64], "m": [58, 67, 68], "coco": [58, 67, 68], "pascal": 58, "voc": 58, "2012": 58, "kinet": 58, "400": 58, "how": [59, 72], "creat": 59, "new": 59, "type": 59, "extend": 59, "an": 59, "exist": 59, "convert": 60, "us": [60, 67, 68, 69], "coreml": 60, "network": [60, 67, 68, 69, 70], "exampl": [60, 68, 69], "mobilenet": 62, "citat": [62, 63, 64, 65, 67, 68, 69, 70, 73], "p": 64, "pre": 64, "fine": 64, "tune": 64, "from": 64, "resolut": 64, "distribut": 66, "shift": 66, "download": 66, "ssdlite": [67, 68], "quantit": [67, 68, 69, 70], "qualit": [67, 68, 69, 70], "semant": [69, 70], "usng": 70, "get": 71, "start": 71, "To": 72, "welcom": 73, "document": 73, "tabl": 73, "indic": 73, "instal": 74, "avail": 75, "sampl": 77, "recip": 77}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"cvnets package": [[0, "cvnets-package"]], "Subpackages": [[0, "subpackages"], [3, "subpackages"], [7, "subpackages"], [9, "subpackages"], [11, "subpackages"], [13, "subpackages"], [16, "subpackages"], [19, "subpackages"], [22, "subpackages"], [24, "subpackages"], [28, "subpackages"], [35, "subpackages"], [38, "subpackages"], [41, "subpackages"], [50, "subpackages"], [53, "subpackages"]], "Module contents": [[0, "module-cvnets"], [1, "module-cvnets.anchor_generator"], [2, "module-cvnets.image_projection_layers"], [3, "module-cvnets.layers"], [4, "module-cvnets.layers.activation"], [5, "module-cvnets.layers.normalization"], [6, "module-cvnets.matcher_det"], [7, "module-cvnets.misc"], [8, "module-cvnets.misc.third_party"], [9, "module-cvnets.models"], [10, "module-cvnets.models.audio_classification"], [11, "module-cvnets.models.classification"], [12, "module-cvnets.models.classification.config"], [13, "module-cvnets.models.detection"], [14, "module-cvnets.models.detection.utils"], [15, "module-cvnets.models.multi_modal_img_text"], [16, "module-cvnets.models.segmentation"], [17, "module-cvnets.models.segmentation.heads"], [18, "module-cvnets.modules"], [19, "module-cvnets.neural_augmentor"], [20, "module-cvnets.neural_augmentor.utils"], [21, "module-cvnets.text_encoders"], [22, "module-data"], [23, "module-data.collate_fns"], [24, "module-data.datasets"], [25, "module-data.datasets.audio_classification"], [26, "module-data.datasets.classification"], [27, "module-data.datasets.detection"], [28, "module-data.datasets.multi_modal_img_text"], [29, "module-data.datasets.multi_modal_img_text.zero_shot"], [30, "module-data.datasets.segmentation"], [31, "module-data.datasets.utils"], [32, "module-data.loader"], [33, "module-data.sampler"], [34, "module-data.text_tokenizer"], [35, "module-data.transforms"], [36, "module-data.transforms.audio_aux"], [37, "module-data.video_reader"], [38, "module-engine"], [39, "module-engine.detection_utils"], [40, "module-engine.segmentation_utils"], [41, "module-loss_fn"], [42, "module-loss_fn.classification"], [43, "module-loss_fn.detection"], [44, "module-loss_fn.distillation"], [45, "module-loss_fn.multi_modal_img_text"], [46, "module-loss_fn.segmentation"], [47, "module-loss_fn.utils"], [48, "module-loss_landscape"], [49, "module-metrics"], [50, "module-optim"], [51, "module-optim.scheduler"], [52, "module-options"], [53, "module-utils"], [54, "module-utils.third_party"]], "cvnets.anchor_generator package": [[1, "cvnets-anchor-generator-package"]], "Submodules": [[1, "submodules"], [2, "submodules"], [3, "submodules"], [4, "submodules"], [5, "submodules"], [6, "submodules"], [7, "submodules"], [8, "submodules"], [9, "submodules"], [10, "submodules"], [11, "submodules"], [12, "submodules"], [13, "submodules"], [14, "submodules"], [15, "submodules"], [16, "submodules"], [17, "submodules"], [18, "submodules"], [19, "submodules"], [20, "submodules"], [21, "submodules"], [22, "submodules"], [23, "submodules"], [24, "submodules"], [25, "submodules"], [26, "submodules"], [27, "submodules"], [28, "submodules"], [29, "submodules"], [30, "submodules"], [31, "submodules"], [32, "submodules"], [33, "submodules"], [34, "submodules"], [35, "submodules"], [36, "submodules"], [37, "submodules"], [38, "submodules"], [39, "submodules"], [40, "submodules"], [41, "submodules"], [42, "submodules"], [43, "submodules"], [44, "submodules"], [45, "submodules"], [46, "submodules"], [47, "submodules"], [48, "submodules"], [49, "submodules"], [50, "submodules"], [51, "submodules"], [52, "submodules"], [53, "submodules"], [54, "submodules"]], "cvnets.anchor_generator.base_anchor_generator module": [[1, "module-cvnets.anchor_generator.base_anchor_generator"]], "cvnets.anchor_generator.ssd_anchor_generator module": [[1, "module-cvnets.anchor_generator.ssd_anchor_generator"]], "cvnets.image_projection_layers package": [[2, "cvnets-image-projection-layers-package"]], "cvnets.image_projection_layers.attention_pool_2d module": [[2, "module-cvnets.image_projection_layers.attention_pool_2d"]], "cvnets.image_projection_layers.base_image_projection module": [[2, "module-cvnets.image_projection_layers.base_image_projection"]], "cvnets.image_projection_layers.global_pool_2d module": [[2, "module-cvnets.image_projection_layers.global_pool_2d"]], "cvnets.image_projection_layers.simple_projection_head module": [[2, "module-cvnets.image_projection_layers.simple_projection_head"]], "cvnets.layers package": [[3, "cvnets-layers-package"]], "cvnets.layers.adaptive_pool module": [[3, "module-cvnets.layers.adaptive_pool"]], "cvnets.layers.base_layer module": [[3, "module-cvnets.layers.base_layer"]], "cvnets.layers.conv_layer module": [[3, "module-cvnets.layers.conv_layer"]], "cvnets.layers.dropout module": [[3, "module-cvnets.layers.dropout"]], "cvnets.layers.embedding module": [[3, "module-cvnets.layers.embedding"]], "cvnets.layers.flatten module": [[3, "module-cvnets.layers.flatten"]], "cvnets.layers.global_pool module": [[3, "module-cvnets.layers.global_pool"]], "cvnets.layers.identity module": [[3, "module-cvnets.layers.identity"]], "cvnets.layers.linear_attention module": [[3, "module-cvnets.layers.linear_attention"]], "cvnets.layers.linear_layer module": [[3, "module-cvnets.layers.linear_layer"]], "cvnets.layers.multi_head_attention module": [[3, "module-cvnets.layers.multi_head_attention"]], "cvnets.layers.normalization_layers module": [[3, "module-cvnets.layers.normalization_layers"]], "cvnets.layers.pixel_shuffle module": [[3, "module-cvnets.layers.pixel_shuffle"]], "cvnets.layers.pooling module": [[3, "module-cvnets.layers.pooling"]], "cvnets.layers.positional_embedding module": [[3, "module-cvnets.layers.positional_embedding"]], "cvnets.layers.positional_encoding module": [[3, "module-cvnets.layers.positional_encoding"]], "cvnets.layers.random_layers module": [[3, "module-cvnets.layers.random_layers"]], "cvnets.layers.single_head_attention module": [[3, "module-cvnets.layers.single_head_attention"]], "cvnets.layers.softmax module": [[3, "module-cvnets.layers.softmax"]], "cvnets.layers.stochastic_depth module": [[3, "module-cvnets.layers.stochastic_depth"]], "cvnets.layers.token_merging module": [[3, "module-cvnets.layers.token_merging"]], "cvnets.layers.upsample module": [[3, "module-cvnets.layers.upsample"]], "cvnets.layers.activation package": [[4, "cvnets-layers-activation-package"]], "cvnets.layers.activation.gelu module": [[4, "module-cvnets.layers.activation.gelu"]], "cvnets.layers.activation.hard_sigmoid module": [[4, "module-cvnets.layers.activation.hard_sigmoid"]], "cvnets.layers.activation.hard_swish module": [[4, "module-cvnets.layers.activation.hard_swish"]], "cvnets.layers.activation.leaky_relu module": [[4, "module-cvnets.layers.activation.leaky_relu"]], "cvnets.layers.activation.prelu module": [[4, "module-cvnets.layers.activation.prelu"]], "cvnets.layers.activation.relu module": [[4, "module-cvnets.layers.activation.relu"]], "cvnets.layers.activation.relu6 module": [[4, "module-cvnets.layers.activation.relu6"]], "cvnets.layers.activation.sigmoid module": [[4, "module-cvnets.layers.activation.sigmoid"]], "cvnets.layers.activation.swish module": [[4, "module-cvnets.layers.activation.swish"]], "cvnets.layers.activation.tanh module": [[4, "module-cvnets.layers.activation.tanh"]], "cvnets.layers.normalization package": [[5, "cvnets-layers-normalization-package"]], "cvnets.layers.normalization.batch_norm module": [[5, "module-cvnets.layers.normalization.batch_norm"]], "cvnets.layers.normalization.group_norm module": [[5, "module-cvnets.layers.normalization.group_norm"]], "cvnets.layers.normalization.instance_norm module": [[5, "module-cvnets.layers.normalization.instance_norm"]], "cvnets.layers.normalization.layer_norm module": [[5, "module-cvnets.layers.normalization.layer_norm"]], "cvnets.layers.normalization.sync_batch_norm module": [[5, "module-cvnets.layers.normalization.sync_batch_norm"]], "cvnets.matcher_det package": [[6, "cvnets-matcher-det-package"]], "cvnets.matcher_det.base_matcher module": [[6, "module-cvnets.matcher_det.base_matcher"]], "cvnets.matcher_det.ssd_matcher module": [[6, "module-cvnets.matcher_det.ssd_matcher"]], "cvnets.misc package": [[7, "cvnets-misc-package"]], "cvnets.misc.averaging_utils module": [[7, "module-cvnets.misc.averaging_utils"]], "cvnets.misc.box_utils module": [[7, "module-cvnets.misc.box_utils"]], "cvnets.misc.common module": [[7, "module-cvnets.misc.common"]], "cvnets.misc.init_utils module": [[7, "module-cvnets.misc.init_utils"]], "cvnets.misc.third_party package": [[8, "cvnets-misc-third-party-package"]], "cvnets.misc.third_party.ssd_utils module": [[8, "module-cvnets.misc.third_party.ssd_utils"]], "cvnets.models package": [[9, "cvnets-models-package"]], "cvnets.models.base_model module": [[9, "module-cvnets.models.base_model"]], "cvnets.models.audio_classification package": [[10, "cvnets-models-audio-classification-package"]], "cvnets.models.audio_classification.audio_byteformer module": [[10, "module-cvnets.models.audio_classification.audio_byteformer"]], "cvnets.models.audio_classification.base_audio_classification module": [[10, "module-cvnets.models.audio_classification.base_audio_classification"]], "cvnets.models.classification package": [[11, "cvnets-models-classification-package"]], "cvnets.models.classification.base_image_encoder module": [[11, "module-cvnets.models.classification.base_image_encoder"]], "cvnets.models.classification.byteformer module": [[11, "module-cvnets.models.classification.byteformer"]], "cvnets.models.classification.efficientnet module": [[11, "module-cvnets.models.classification.efficientnet"]], "cvnets.models.classification.fastvit module": [[11, "module-cvnets.models.classification.fastvit"]], "cvnets.models.classification.mobilenetv1 module": [[11, "module-cvnets.models.classification.mobilenetv1"]], "cvnets.models.classification.mobilenetv2 module": [[11, "module-cvnets.models.classification.mobilenetv2"]], "cvnets.models.classification.mobilenetv3 module": [[11, "module-cvnets.models.classification.mobilenetv3"]], "cvnets.models.classification.mobileone module": [[11, "module-cvnets.models.classification.mobileone"]], "cvnets.models.classification.mobilevit module": [[11, "module-cvnets.models.classification.mobilevit"]], "cvnets.models.classification.mobilevit_v2 module": [[11, "module-cvnets.models.classification.mobilevit_v2"]], "cvnets.models.classification.regnet module": [[11, "module-cvnets.models.classification.regnet"]], "cvnets.models.classification.resnet module": [[11, "module-cvnets.models.classification.resnet"]], "cvnets.models.classification.swin_transformer module": [[11, "module-cvnets.models.classification.swin_transformer"]], "cvnets.models.classification.vit module": [[11, "module-cvnets.models.classification.vit"]], "cvnets.models.classification.config package": [[12, "cvnets-models-classification-config-package"]], "cvnets.models.classification.config.byteformer module": [[12, "module-cvnets.models.classification.config.byteformer"]], "cvnets.models.classification.config.efficientnet module": [[12, "module-cvnets.models.classification.config.efficientnet"]], "cvnets.models.classification.config.fastvit module": [[12, "module-cvnets.models.classification.config.fastvit"]], "cvnets.models.classification.config.mobilenetv1 module": [[12, "module-cvnets.models.classification.config.mobilenetv1"]], "cvnets.models.classification.config.mobilenetv2 module": [[12, "module-cvnets.models.classification.config.mobilenetv2"]], "cvnets.models.classification.config.mobilenetv3 module": [[12, "module-cvnets.models.classification.config.mobilenetv3"]], "cvnets.models.classification.config.mobileone module": [[12, "module-cvnets.models.classification.config.mobileone"]], "cvnets.models.classification.config.mobilevit module": [[12, "module-cvnets.models.classification.config.mobilevit"]], "cvnets.models.classification.config.mobilevit_v2 module": [[12, "module-cvnets.models.classification.config.mobilevit_v2"]], "cvnets.models.classification.config.regnet module": [[12, "module-cvnets.models.classification.config.regnet"]], "cvnets.models.classification.config.resnet module": [[12, "module-cvnets.models.classification.config.resnet"]], "cvnets.models.classification.config.swin_transformer module": [[12, "module-cvnets.models.classification.config.swin_transformer"]], "cvnets.models.classification.config.vit module": [[12, "module-cvnets.models.classification.config.vit"]], "cvnets.models.detection package": [[13, "cvnets-models-detection-package"]], "cvnets.models.detection.base_detection module": [[13, "module-cvnets.models.detection.base_detection"]], "cvnets.models.detection.mask_rcnn module": [[13, "module-cvnets.models.detection.mask_rcnn"]], "cvnets.models.detection.ssd module": [[13, "module-cvnets.models.detection.ssd"]], "cvnets.models.detection.utils package": [[14, "cvnets-models-detection-utils-package"]], "cvnets.models.detection.utils.rcnn_utils module": [[14, "module-cvnets.models.detection.utils.rcnn_utils"]], "cvnets.models.multi_modal_img_text package": [[15, "cvnets-models-multi-modal-img-text-package"]], "cvnets.models.multi_modal_img_text.base_multi_modal_img_text module": [[15, "module-cvnets.models.multi_modal_img_text.base_multi_modal_img_text"]], "cvnets.models.multi_modal_img_text.clip module": [[15, "module-cvnets.models.multi_modal_img_text.clip"]], "cvnets.models.segmentation package": [[16, "cvnets-models-segmentation-package"]], "cvnets.models.segmentation.base_seg module": [[16, "module-cvnets.models.segmentation.base_seg"]], "cvnets.models.segmentation.enc_dec module": [[16, "module-cvnets.models.segmentation.enc_dec"]], "cvnets.models.segmentation.heads package": [[17, "cvnets-models-segmentation-heads-package"]], "cvnets.models.segmentation.heads.base_seg_head module": [[17, "module-cvnets.models.segmentation.heads.base_seg_head"]], "cvnets.models.segmentation.heads.deeplabv3 module": [[17, "module-cvnets.models.segmentation.heads.deeplabv3"]], "cvnets.models.segmentation.heads.pspnet module": [[17, "module-cvnets.models.segmentation.heads.pspnet"]], "cvnets.models.segmentation.heads.simple_seg_head module": [[17, "module-cvnets.models.segmentation.heads.simple_seg_head"]], "cvnets.modules package": [[18, "cvnets-modules-package"]], "cvnets.modules.aspp_block module": [[18, "module-cvnets.modules.aspp_block"]], "cvnets.modules.base_module module": [[18, "module-cvnets.modules.base_module"]], "cvnets.modules.efficientnet module": [[18, "module-cvnets.modules.efficientnet"]], "cvnets.modules.fastvit module": [[18, "module-cvnets.modules.fastvit"]], "cvnets.modules.feature_pyramid module": [[18, "module-cvnets.modules.feature_pyramid"]], "cvnets.modules.mobilenetv2 module": [[18, "module-cvnets.modules.mobilenetv2"]], "cvnets.modules.mobileone_block module": [[18, "module-cvnets.modules.mobileone_block"]], "cvnets.modules.mobilevit_block module": [[18, "module-cvnets.modules.mobilevit_block"]], "cvnets.modules.pspnet_module module": [[18, "module-cvnets.modules.pspnet_module"]], "cvnets.modules.regnet_modules module": [[18, "module-cvnets.modules.regnet_modules"]], "cvnets.modules.resnet_modules module": [[18, "module-cvnets.modules.resnet_modules"]], "cvnets.modules.squeeze_excitation module": [[18, "module-cvnets.modules.squeeze_excitation"]], "cvnets.modules.ssd_heads module": [[18, "module-cvnets.modules.ssd_heads"]], "cvnets.modules.swin_transformer_block module": [[18, "module-cvnets.modules.swin_transformer_block"]], "cvnets.modules.transformer module": [[18, "module-cvnets.modules.transformer"]], "cvnets.modules.windowed_transformer module": [[18, "module-cvnets.modules.windowed_transformer"]], "cvnets.neural_augmentor package": [[19, "cvnets-neural-augmentor-package"]], "cvnets.neural_augmentor.neural_aug module": [[19, "module-cvnets.neural_augmentor.neural_aug"]], "cvnets.neural_augmentor.utils package": [[20, "cvnets-neural-augmentor-utils-package"]], "cvnets.neural_augmentor.utils.neural_aug_utils module": [[20, "module-cvnets.neural_augmentor.utils.neural_aug_utils"]], "cvnets.text_encoders package": [[21, "cvnets-text-encoders-package"]], "cvnets.text_encoders.base_text_encoder module": [[21, "module-cvnets.text_encoders.base_text_encoder"]], "cvnets.text_encoders.transformer module": [[21, "module-cvnets.text_encoders.transformer"]], "data package": [[22, "data-package"]], "data.data_loaders module": [[22, "module-data.data_loaders"]], "data.collate_fns package": [[23, "data-collate-fns-package"]], "data.collate_fns.byteformer_collate_functions module": [[23, "module-data.collate_fns.byteformer_collate_functions"]], "data.collate_fns.collate_functions module": [[23, "module-data.collate_fns.collate_functions"]], "data.datasets package": [[24, "data-datasets-package"]], "data.datasets.dataset_base module": [[24, "module-data.datasets.dataset_base"]], "data.datasets.audio_classification package": [[25, "data-datasets-audio-classification-package"]], "data.datasets.audio_classification.speech_commands_v2 module": [[25, "module-data.datasets.audio_classification.speech_commands_v2"]], "data.datasets.classification package": [[26, "data-datasets-classification-package"]], "data.datasets.classification.base_image_classification_dataset module": [[26, "module-data.datasets.classification.base_image_classification_dataset"]], "data.datasets.classification.base_imagenet_shift_dataset module": [[26, "module-data.datasets.classification.base_imagenet_shift_dataset"]], "data.datasets.classification.imagenet module": [[26, "module-data.datasets.classification.imagenet"]], "data.datasets.classification.imagenet_a module": [[26, "module-data.datasets.classification.imagenet_a"]], "data.datasets.classification.imagenet_r module": [[26, "module-data.datasets.classification.imagenet_r"]], "data.datasets.classification.imagenet_sketch module": [[26, "module-data.datasets.classification.imagenet_sketch"]], "data.datasets.classification.imagenet_synsets module": [[26, "module-data.datasets.classification.imagenet_synsets"]], "data.datasets.classification.imagenet_v2 module": [[26, "module-data.datasets.classification.imagenet_v2"]], "data.datasets.classification.places365 module": [[26, "module-data.datasets.classification.places365"]], "data.datasets.detection package": [[27, "data-datasets-detection-package"]], "data.datasets.detection.base_detection module": [[27, "module-data.datasets.detection.base_detection"]], "data.datasets.detection.coco_base module": [[27, "module-data.datasets.detection.coco_base"]], "data.datasets.detection.coco_mask_rcnn module": [[27, "module-data.datasets.detection.coco_mask_rcnn"]], "data.datasets.detection.coco_ssd module": [[27, "module-data.datasets.detection.coco_ssd"]], "data.datasets.multi_modal_img_text package": [[28, "data-datasets-multi-modal-img-text-package"]], "data.datasets.multi_modal_img_text.base_multi_modal_img_text module": [[28, "module-data.datasets.multi_modal_img_text.base_multi_modal_img_text"]], "data.datasets.multi_modal_img_text.flickr module": [[28, "module-data.datasets.multi_modal_img_text.flickr"]], "data.datasets.multi_modal_img_text.img_text_tar_dataset module": [[28, "module-data.datasets.multi_modal_img_text.img_text_tar_dataset"]], "data.datasets.multi_modal_img_text.zero_shot package": [[29, "data-datasets-multi-modal-img-text-zero-shot-package"]], "data.datasets.multi_modal_img_text.zero_shot.base_zero_shot module": [[29, "module-data.datasets.multi_modal_img_text.zero_shot.base_zero_shot"]], "data.datasets.multi_modal_img_text.zero_shot.imagenet module": [[29, "module-data.datasets.multi_modal_img_text.zero_shot.imagenet"]], "data.datasets.multi_modal_img_text.zero_shot.imagenet_class_names module": [[29, "module-data.datasets.multi_modal_img_text.zero_shot.imagenet_class_names"]], "data.datasets.multi_modal_img_text.zero_shot.templates module": [[29, "module-data.datasets.multi_modal_img_text.zero_shot.templates"]], "data.datasets.segmentation package": [[30, "data-datasets-segmentation-package"]], "data.datasets.segmentation.ade20k module": [[30, "module-data.datasets.segmentation.ade20k"]], "data.datasets.segmentation.base_segmentation module": [[30, "module-data.datasets.segmentation.base_segmentation"]], "data.datasets.segmentation.coco_segmentation module": [[30, "module-data.datasets.segmentation.coco_segmentation"]], "data.datasets.segmentation.pascal_voc module": [[30, "module-data.datasets.segmentation.pascal_voc"]], "data.datasets.utils package": [[31, "data-datasets-utils-package"]], "data.datasets.utils.common module": [[31, "module-data.datasets.utils.common"]], "data.datasets.utils.text module": [[31, "module-data.datasets.utils.text"]], "data.datasets.utils.video module": [[31, "module-data.datasets.utils.video"]], "data.loader package": [[32, "data-loader-package"]], "data.loader.dataloader module": [[32, "module-data.loader.dataloader"]], "data.sampler package": [[33, "data-sampler-package"]], "data.sampler.base_sampler module": [[33, "module-data.sampler.base_sampler"]], "data.sampler.batch_sampler module": [[33, "module-data.sampler.batch_sampler"]], "data.sampler.chain_sampler module": [[33, "module-data.sampler.chain_sampler"]], "data.sampler.multi_scale_sampler module": [[33, "module-data.sampler.multi_scale_sampler"]], "data.sampler.utils module": [[33, "module-data.sampler.utils"]], "data.sampler.variable_batch_sampler module": [[33, "module-data.sampler.variable_batch_sampler"]], "data.text_tokenizer package": [[34, "data-text-tokenizer-package"]], "data.text_tokenizer.base_tokenizer module": [[34, "module-data.text_tokenizer.base_tokenizer"]], "data.text_tokenizer.clip_tokenizer module": [[34, "module-data.text_tokenizer.clip_tokenizer"]], "data.transforms package": [[35, "data-transforms-package"]], "data.transforms.audio module": [[35, "module-data.transforms.audio"]], "data.transforms.audio_bytes module": [[35, "module-data.transforms.audio_bytes"]], "data.transforms.base_transforms module": [[35, "module-data.transforms.base_transforms"]], "data.transforms.common module": [[35, "module-data.transforms.common"]], "data.transforms.image_bytes module": [[35, "module-data.transforms.image_bytes"]], "data.transforms.image_pil module": [[35, "module-data.transforms.image_pil"]], "data.transforms.image_torch module": [[35, "module-data.transforms.image_torch"]], "data.transforms.utils module": [[35, "module-data.transforms.utils"]], "data.transforms.video module": [[35, "module-data.transforms.video"]], "data.transforms.audio_aux package": [[36, "data-transforms-audio-aux-package"]], "data.transforms.audio_aux.mfccs module": [[36, "module-data.transforms.audio_aux.mfccs"]], "data.video_reader package": [[37, "data-video-reader-package"]], "data.video_reader.base_av_reader module": [[37, "module-data.video_reader.base_av_reader"]], "data.video_reader.decord_reader module": [[37, "module-data.video_reader.decord_reader"]], "data.video_reader.pyav_reader module": [[37, "module-data.video_reader.pyav_reader"]], "engine package": [[38, "engine-package"]], "engine.eval_detection module": [[38, "module-engine.eval_detection"]], "engine.eval_segmentation module": [[38, "module-engine.eval_segmentation"]], "engine.evaluation_engine module": [[38, "module-engine.evaluation_engine"]], "engine.training_engine module": [[38, "module-engine.training_engine"]], "engine.utils module": [[38, "module-engine.utils"]], "engine.detection_utils package": [[39, "engine-detection-utils-package"]], "engine.detection_utils.coco_map module": [[39, "module-engine.detection_utils.coco_map"]], "engine.segmentation_utils package": [[40, "engine-segmentation-utils-package"]], "engine.segmentation_utils.cityscapes_iou module": [[40, "module-engine.segmentation_utils.cityscapes_iou"]], "loss_fn package": [[41, "loss-fn-package"]], "loss_fn.base_criteria module": [[41, "module-loss_fn.base_criteria"]], "loss_fn.composite_loss module": [[41, "module-loss_fn.composite_loss"]], "loss_fn.neural_augmentation module": [[41, "module-loss_fn.neural_augmentation"]], "loss_fn.classification package": [[42, "loss-fn-classification-package"]], "loss_fn.classification.base_classification_criteria module": [[42, "module-loss_fn.classification.base_classification_criteria"]], "loss_fn.classification.binary_cross_entropy module": [[42, "module-loss_fn.classification.binary_cross_entropy"]], "loss_fn.classification.cross_entropy module": [[42, "module-loss_fn.classification.cross_entropy"]], "loss_fn.detection package": [[43, "loss-fn-detection-package"]], "loss_fn.detection.base_detection_criteria module": [[43, "module-loss_fn.detection.base_detection_criteria"]], "loss_fn.detection.mask_rcnn_loss module": [[43, "module-loss_fn.detection.mask_rcnn_loss"]], "loss_fn.detection.ssd_multibox_loss module": [[43, "module-loss_fn.detection.ssd_multibox_loss"]], "loss_fn.distillation package": [[44, "loss-fn-distillation-package"]], "loss_fn.distillation.base_distillation module": [[44, "module-loss_fn.distillation.base_distillation"]], "loss_fn.distillation.hard_distillation module": [[44, "module-loss_fn.distillation.hard_distillation"]], "loss_fn.distillation.soft_kl_distillation module": [[44, "module-loss_fn.distillation.soft_kl_distillation"]], "loss_fn.multi_modal_img_text package": [[45, "loss-fn-multi-modal-img-text-package"]], "loss_fn.multi_modal_img_text.base_multi_modal_img_text_criteria module": [[45, "module-loss_fn.multi_modal_img_text.base_multi_modal_img_text_criteria"]], "loss_fn.multi_modal_img_text.contrastive_loss_clip module": [[45, "module-loss_fn.multi_modal_img_text.contrastive_loss_clip"]], "loss_fn.segmentation package": [[46, "loss-fn-segmentation-package"]], "loss_fn.segmentation.base_segmentation_criteria module": [[46, "module-loss_fn.segmentation.base_segmentation_criteria"]], "loss_fn.segmentation.cross_entropy module": [[46, "module-loss_fn.segmentation.cross_entropy"]], "loss_fn.utils package": [[47, "loss-fn-utils-package"]], "loss_fn.utils.build_helper module": [[47, "module-loss_fn.utils.build_helper"]], "loss_fn.utils.class_weighting module": [[47, "module-loss_fn.utils.class_weighting"]], "loss_landscape package": [[48, "loss-landscape-package"]], "loss_landscape.landscape_utils module": [[48, "module-loss_landscape.landscape_utils"]], "metrics package": [[49, "metrics-package"]], "metrics.average_precision module": [[49, "module-metrics.average_precision"]], "metrics.coco_map module": [[49, "module-metrics.coco_map"]], "metrics.confusion_mat module": [[49, "module-metrics.confusion_mat"]], "metrics.image_text_retrieval module": [[49, "module-metrics.image_text_retrieval"]], "metrics.intersection_over_union module": [[49, "module-metrics.intersection_over_union"]], "metrics.metric_base module": [[49, "module-metrics.metric_base"]], "metrics.metric_base_test module": [[49, "module-metrics.metric_base_test"]], "metrics.misc module": [[49, "module-metrics.misc"]], "metrics.probability_histograms module": [[49, "module-metrics.probability_histograms"]], "metrics.psnr module": [[49, "module-metrics.psnr"]], "metrics.retrieval_cmc module": [[49, "module-metrics.retrieval_cmc"]], "metrics.stats module": [[49, "module-metrics.stats"]], "metrics.topk_accuracy module": [[49, "module-metrics.topk_accuracy"]], "optim package": [[50, "optim-package"]], "optim.adam module": [[50, "module-optim.adam"]], "optim.adamw module": [[50, "module-optim.adamw"]], "optim.base_optim module": [[50, "module-optim.base_optim"]], "optim.sgd module": [[50, "module-optim.sgd"]], "optim.scheduler package": [[51, "optim-scheduler-package"]], "optim.scheduler.base_scheduler module": [[51, "module-optim.scheduler.base_scheduler"]], "optim.scheduler.cosine module": [[51, "module-optim.scheduler.cosine"]], "optim.scheduler.cyclic module": [[51, "module-optim.scheduler.cyclic"]], "optim.scheduler.fixed module": [[51, "module-optim.scheduler.fixed"]], "optim.scheduler.multi_step module": [[51, "module-optim.scheduler.multi_step"]], "optim.scheduler.polynomial module": [[51, "module-optim.scheduler.polynomial"]], "options package": [[52, "options-package"]], "options.errors module": [[52, "module-options.errors"]], "options.opts module": [[52, "module-options.opts"]], "options.parse_args module": [[52, "module-options.parse_args"]], "options.utils module": [[52, "module-options.utils"]], "utils package": [[53, "utils-package"]], "utils.checkpoint_utils module": [[53, "module-utils.checkpoint_utils"]], "utils.color_map module": [[53, "module-utils.color_map"]], "utils.common_utils module": [[53, "module-utils.common_utils"]], "utils.ddp_utils module": [[53, "module-utils.ddp_utils"]], "utils.dict_utils module": [[53, "module-utils.dict_utils"]], "utils.download_utils module": [[53, "module-utils.download_utils"]], "utils.download_utils_base module": [[53, "module-utils.download_utils_base"]], "utils.import_utils module": [[53, "module-utils.import_utils"]], "utils.logger module": [[53, "module-utils.logger"]], "utils.math_utils module": [[53, "module-utils.math_utils"]], "utils.object_utils module": [[53, "module-utils.object_utils"]], "utils.object_utils_test module": [[53, "module-utils.object_utils_test"]], "utils.pytorch_to_coreml module": [[53, "module-utils.pytorch_to_coreml"]], "utils.registry module": [[53, "module-utils.registry"]], "utils.registry_test module": [[53, "module-utils.registry_test"]], "utils.resources module": [[53, "module-utils.resources"]], "utils.tensor_utils module": [[53, "module-utils.tensor_utils"]], "utils.visualization_utils module": [[53, "module-utils.visualization_utils"]], "utils.third_party package": [[54, "utils-third-party-package"]], "utils.third_party.ddp_functional_utils module": [[54, "module-utils.third_party.ddp_functional_utils"]], "Data Samplers": [[55, "data-samplers"]], "Single-scale with fixed batch size (SSc-FBS)": [[55, "single-scale-with-fixed-batch-size-ssc-fbs"]], "Multi-scale with fixed batch size (MSc-FBS)": [[55, "multi-scale-with-fixed-batch-size-msc-fbs"]], "Multi-scale with variable batch size (MSc-VBS):": [[55, "multi-scale-with-variable-batch-size-msc-vbs"]], "Variably-sized video sampler": [[55, "variably-sized-video-sampler"]], "Data Sampler Objects": [[55, "module-data.sampler.batch_sampler"]], "Config Files: Introduction and Walkthrough": [[56, "config-files-introduction-and-walkthrough"]], "Dataset": [[56, "dataset"]], "Data augmentation": [[56, "data-augmentation"]], "Sampler": [[56, "sampler"]], "Optimizer and LR scheduler": [[56, "optimizer-and-lr-scheduler"]], "Model": [[56, "model"]], "EMA and Training statistics": [[56, "ema-and-training-statistics"]], "Directory Structure": [[57, "directory-structure"]], "Models": [[57, "models"]], "Modules": [[57, "modules"]], "Datasets": [[57, "datasets"]], "Training/Evaluation Engine": [[57, "training-evaluation-engine"]], "Model Zoo": [[58, "model-zoo"]], "Classification (ImageNet-1k)": [[58, "classification-imagenet-1k"]], "MobileViTv1 (Legacy)": [[58, "mobilevitv1-legacy"]], "MobileViTv2 (256x256)": [[58, "mobilevitv2-256x256"]], "MobileViTv2 (Trained on 256x256 and Finetuned on 384x384)": [[58, "mobilevitv2-trained-on-256x256-and-finetuned-on-384x384"]], "MobileViTv2 (Trained on ImageNet-21k and Finetuned on ImageNet-1k 256x256)": [[58, "mobilevitv2-trained-on-imagenet-21k-and-finetuned-on-imagenet-1k-256x256"]], "MobileViTv2 (Trained on ImageNet-21k, Finetuned on ImageNet-1k 256x256, and Finetuned on ImageNet-1k 384x384)": [[58, "mobilevitv2-trained-on-imagenet-21k-finetuned-on-imagenet-1k-256x256-and-finetuned-on-imagenet-1k-384x384"]], "Object Detection (MS-COCO)": [[58, "object-detection-ms-coco"]], "Segmentation": [[58, "segmentation"]], "ADE20K Dataset": [[58, "ade20k-dataset"]], "Pascal VOC 2012 Dataset": [[58, "pascal-voc-2012-dataset"]], "Video Classification (Kinetics-400)": [[58, "video-classification-kinetics-400"]], "How to Create a New Dataset Type": [[59, "how-to-create-a-new-dataset-type"]], "Extending an Existing Dataset": [[59, "extending-an-existing-dataset"]], "Converting models trained using CVNets to CoreML": [[60, "converting-models-trained-using-cvnets-to-coreml"]], "Classification networks": [[60, "classification-networks"]], "Detection networks": [[60, "detection-networks"]], "Segmentation networks": [[60, "segmentation-networks"]], "Example to convert MobileViTv2 model": [[60, "example-to-convert-mobilevitv2-model"]], "Training Classification Models on the ImageNet dataset": [[61, "training-classification-models-on-the-imagenet-dataset"]], "Training on the ImageNet dataset": [[61, "training-on-the-imagenet-dataset"]], "Finetuning the classification model": [[61, "finetuning-the-classification-model"]], "Evaluating the classification model": [[61, "evaluating-the-classification-model"]], "Training MobileNets on the ImageNet dataset": [[62, "training-mobilenets-on-the-imagenet-dataset"]], "Citation": [[62, "citation"], [63, "citation"], [64, "citation"], [65, "citation"], [67, "citation"], [68, "citation"], [69, "citation"], [70, "citation"], [73, "citation"]], "Training MobileViT on the ImageNet dataset": [[63, "training-mobilevit-on-the-imagenet-dataset"]], "Training MobileViTv2 Models": [[64, "training-mobilevitv2-models"]], "ImageNet-1k Training": [[64, "imagenet-1k-training"]], "ImageNet-21k-P Pre-training": [[64, "imagenet-21k-p-pre-training"]], "ImageNet-1k Fine-tuning": [[64, "imagenet-1k-fine-tuning"]], "Finetune from ImageNet-1k pre-training at 384x384 resolution": [[64, "finetune-from-imagenet-1k-pre-training-at-384x384-resolution"]], "Finetune from ImageNet-21k-P pre-training at 256x256 resolution": [[64, "finetune-from-imagenet-21k-p-pre-training-at-256x256-resolution"]], "Finetune from ImageNet-21k-P+ImageNet-1k pre-training at 384x384 resolution": [[64, "finetune-from-imagenet-21k-p-imagenet-1k-pre-training-at-384x384-resolution"]], "Training ResNets on the ImageNet dataset": [[65, "training-resnets-on-the-imagenet-dataset"]], "Evaluating classification models on ImageNet distribution shift datasets": [[66, "evaluating-classification-models-on-imagenet-distribution-shift-datasets"]], "Downloading datasets": [[66, "downloading-datasets"]], "Evaluating a classification model": [[66, "evaluating-a-classification-model"]], "Object detection using SSDLite on MS-COCO": [[67, "object-detection-using-ssdlite-on-ms-coco"], [68, "object-detection-using-ssdlite-on-ms-coco"]], "Training detection network on the MS-COCO dataset": [[67, "training-detection-network-on-the-ms-coco-dataset"], [68, "training-detection-network-on-the-ms-coco-dataset"]], "Quantitative evaluation": [[67, "quantitative-evaluation"], [68, "quantitative-evaluation"], [69, "quantitative-evaluation"], [70, "quantitative-evaluation"]], "Qualitative evaluation": [[67, "qualitative-evaluation"], [68, "qualitative-evaluation"], [69, "qualitative-evaluation"], [70, "qualitative-evaluation"]], "Example": [[68, "example"], [69, "example"]], "Semantic Segmentation using DeepLabv3": [[69, "semantic-segmentation-using-deeplabv3"]], "Training segmentation network": [[69, "training-segmentation-network"], [70, "training-segmentation-network"]], "Semantic segmentation usng MobileViTv2": [[70, "semantic-segmentation-usng-mobilevitv2"]], "Getting Started": [[71, "getting-started"]], "How To": [[72, "how-to"]], "Welcome to CVNets documentation!": [[73, "welcome-to-cvnets-documentation"]], "Table of Contents": [[73, null]], "Indices and tables": [[73, "indices-and-tables"]], "Installation": [[74, "installation"]], "Available Models": [[75, "available-models"]], "ResNet": [[75, "resnet"]], "MobileNetv1": [[75, "mobilenetv1"]], "MobileNetv2": [[75, "mobilenetv2"]], "MobileNetv3": [[75, "mobilenetv3"]], "ViT": [[75, "vit"]], "MobileViT": [[75, "mobilevit"]], "data": [[76, "data"]], "Sample Recipes": [[77, "sample-recipes"]]}, "indexentries": {"cvnets": [[0, "module-cvnets"]], "modeling_arguments() (in module cvnets)": [[0, "cvnets.modeling_arguments"]], "module": [[0, "module-cvnets"], [1, "module-cvnets.anchor_generator"], [1, "module-cvnets.anchor_generator.base_anchor_generator"], [1, "module-cvnets.anchor_generator.ssd_anchor_generator"], [2, "module-cvnets.image_projection_layers"], [2, "module-cvnets.image_projection_layers.attention_pool_2d"], [2, "module-cvnets.image_projection_layers.base_image_projection"], [2, "module-cvnets.image_projection_layers.global_pool_2d"], [2, "module-cvnets.image_projection_layers.simple_projection_head"], [3, "module-cvnets.layers"], [3, "module-cvnets.layers.adaptive_pool"], [3, "module-cvnets.layers.base_layer"], [3, "module-cvnets.layers.conv_layer"], [3, "module-cvnets.layers.dropout"], [3, "module-cvnets.layers.embedding"], [3, "module-cvnets.layers.flatten"], [3, "module-cvnets.layers.global_pool"], [3, "module-cvnets.layers.identity"], [3, "module-cvnets.layers.linear_attention"], [3, "module-cvnets.layers.linear_layer"], [3, "module-cvnets.layers.multi_head_attention"], [3, "module-cvnets.layers.normalization_layers"], [3, "module-cvnets.layers.pixel_shuffle"], [3, "module-cvnets.layers.pooling"], [3, "module-cvnets.layers.positional_embedding"], [3, "module-cvnets.layers.positional_encoding"], [3, "module-cvnets.layers.random_layers"], [3, "module-cvnets.layers.single_head_attention"], [3, "module-cvnets.layers.softmax"], [3, "module-cvnets.layers.stochastic_depth"], [3, "module-cvnets.layers.token_merging"], [3, "module-cvnets.layers.upsample"], [4, "module-cvnets.layers.activation"], [4, "module-cvnets.layers.activation.gelu"], [4, "module-cvnets.layers.activation.hard_sigmoid"], [4, "module-cvnets.layers.activation.hard_swish"], [4, "module-cvnets.layers.activation.leaky_relu"], [4, "module-cvnets.layers.activation.prelu"], [4, "module-cvnets.layers.activation.relu"], [4, "module-cvnets.layers.activation.relu6"], [4, "module-cvnets.layers.activation.sigmoid"], [4, "module-cvnets.layers.activation.swish"], [4, "module-cvnets.layers.activation.tanh"], [5, "module-cvnets.layers.normalization"], [5, "module-cvnets.layers.normalization.batch_norm"], [5, "module-cvnets.layers.normalization.group_norm"], [5, "module-cvnets.layers.normalization.instance_norm"], [5, "module-cvnets.layers.normalization.layer_norm"], [5, "module-cvnets.layers.normalization.sync_batch_norm"], [6, "module-cvnets.matcher_det"], [6, "module-cvnets.matcher_det.base_matcher"], [6, "module-cvnets.matcher_det.ssd_matcher"], [7, "module-cvnets.misc"], [7, "module-cvnets.misc.averaging_utils"], [7, "module-cvnets.misc.box_utils"], [7, "module-cvnets.misc.common"], [7, "module-cvnets.misc.init_utils"], [8, "module-cvnets.misc.third_party"], [8, "module-cvnets.misc.third_party.ssd_utils"], [9, "module-cvnets.models"], [9, "module-cvnets.models.base_model"], [10, "module-cvnets.models.audio_classification"], [10, "module-cvnets.models.audio_classification.audio_byteformer"], [10, "module-cvnets.models.audio_classification.base_audio_classification"], [11, "module-cvnets.models.classification"], [11, "module-cvnets.models.classification.base_image_encoder"], [11, "module-cvnets.models.classification.byteformer"], [11, "module-cvnets.models.classification.efficientnet"], [11, "module-cvnets.models.classification.fastvit"], [11, "module-cvnets.models.classification.mobilenetv1"], [11, "module-cvnets.models.classification.mobilenetv2"], [11, "module-cvnets.models.classification.mobilenetv3"], [11, "module-cvnets.models.classification.mobileone"], [11, "module-cvnets.models.classification.mobilevit"], [11, "module-cvnets.models.classification.mobilevit_v2"], [11, "module-cvnets.models.classification.regnet"], [11, "module-cvnets.models.classification.resnet"], [11, "module-cvnets.models.classification.swin_transformer"], [11, "module-cvnets.models.classification.vit"], [12, "module-cvnets.models.classification.config"], [12, "module-cvnets.models.classification.config.byteformer"], [12, "module-cvnets.models.classification.config.efficientnet"], [12, "module-cvnets.models.classification.config.fastvit"], [12, "module-cvnets.models.classification.config.mobilenetv1"], [12, "module-cvnets.models.classification.config.mobilenetv2"], [12, "module-cvnets.models.classification.config.mobilenetv3"], [12, "module-cvnets.models.classification.config.mobileone"], [12, "module-cvnets.models.classification.config.mobilevit"], [12, "module-cvnets.models.classification.config.mobilevit_v2"], [12, "module-cvnets.models.classification.config.regnet"], [12, "module-cvnets.models.classification.config.resnet"], [12, "module-cvnets.models.classification.config.swin_transformer"], [12, "module-cvnets.models.classification.config.vit"], [13, "module-cvnets.models.detection"], [13, "module-cvnets.models.detection.base_detection"], [13, "module-cvnets.models.detection.mask_rcnn"], [13, "module-cvnets.models.detection.ssd"], [14, "module-cvnets.models.detection.utils"], [14, "module-cvnets.models.detection.utils.rcnn_utils"], [15, "module-cvnets.models.multi_modal_img_text"], [15, "module-cvnets.models.multi_modal_img_text.base_multi_modal_img_text"], [15, "module-cvnets.models.multi_modal_img_text.clip"], [16, "module-cvnets.models.segmentation"], [16, "module-cvnets.models.segmentation.base_seg"], [16, "module-cvnets.models.segmentation.enc_dec"], [17, "module-cvnets.models.segmentation.heads"], [17, "module-cvnets.models.segmentation.heads.base_seg_head"], [17, "module-cvnets.models.segmentation.heads.deeplabv3"], [17, "module-cvnets.models.segmentation.heads.pspnet"], [17, "module-cvnets.models.segmentation.heads.simple_seg_head"], [18, "module-cvnets.modules"], [18, "module-cvnets.modules.aspp_block"], [18, "module-cvnets.modules.base_module"], [18, "module-cvnets.modules.efficientnet"], [18, "module-cvnets.modules.fastvit"], [18, "module-cvnets.modules.feature_pyramid"], [18, "module-cvnets.modules.mobilenetv2"], [18, "module-cvnets.modules.mobileone_block"], [18, "module-cvnets.modules.mobilevit_block"], [18, "module-cvnets.modules.pspnet_module"], [18, "module-cvnets.modules.regnet_modules"], [18, "module-cvnets.modules.resnet_modules"], [18, "module-cvnets.modules.squeeze_excitation"], [18, "module-cvnets.modules.ssd_heads"], [18, "module-cvnets.modules.swin_transformer_block"], [18, "module-cvnets.modules.transformer"], [18, "module-cvnets.modules.windowed_transformer"], [19, "module-cvnets.neural_augmentor"], [19, "module-cvnets.neural_augmentor.neural_aug"], [20, "module-cvnets.neural_augmentor.utils"], [20, "module-cvnets.neural_augmentor.utils.neural_aug_utils"], [21, "module-cvnets.text_encoders"], [21, "module-cvnets.text_encoders.base_text_encoder"], [21, "module-cvnets.text_encoders.transformer"], [22, "module-data"], [22, "module-data.data_loaders"], [23, "module-data.collate_fns"], [23, "module-data.collate_fns.byteformer_collate_functions"], [23, "module-data.collate_fns.collate_functions"], [24, "module-data.datasets"], [24, "module-data.datasets.dataset_base"], [25, "module-data.datasets.audio_classification"], [25, "module-data.datasets.audio_classification.speech_commands_v2"], [26, "module-data.datasets.classification"], [26, "module-data.datasets.classification.base_image_classification_dataset"], [26, "module-data.datasets.classification.base_imagenet_shift_dataset"], [26, "module-data.datasets.classification.imagenet"], [26, "module-data.datasets.classification.imagenet_a"], [26, "module-data.datasets.classification.imagenet_r"], [26, "module-data.datasets.classification.imagenet_sketch"], [26, "module-data.datasets.classification.imagenet_synsets"], [26, "module-data.datasets.classification.imagenet_v2"], [26, "module-data.datasets.classification.places365"], [27, "module-data.datasets.detection"], [27, "module-data.datasets.detection.base_detection"], [27, "module-data.datasets.detection.coco_base"], [27, "module-data.datasets.detection.coco_mask_rcnn"], [27, "module-data.datasets.detection.coco_ssd"], [28, "module-data.datasets.multi_modal_img_text"], [28, "module-data.datasets.multi_modal_img_text.base_multi_modal_img_text"], [28, "module-data.datasets.multi_modal_img_text.flickr"], [28, "module-data.datasets.multi_modal_img_text.img_text_tar_dataset"], [29, "module-data.datasets.multi_modal_img_text.zero_shot"], [29, "module-data.datasets.multi_modal_img_text.zero_shot.base_zero_shot"], [29, "module-data.datasets.multi_modal_img_text.zero_shot.imagenet"], [29, "module-data.datasets.multi_modal_img_text.zero_shot.imagenet_class_names"], [29, "module-data.datasets.multi_modal_img_text.zero_shot.templates"], [30, "module-data.datasets.segmentation"], [30, "module-data.datasets.segmentation.ade20k"], [30, "module-data.datasets.segmentation.base_segmentation"], [30, "module-data.datasets.segmentation.coco_segmentation"], [30, "module-data.datasets.segmentation.pascal_voc"], [31, "module-data.datasets.utils"], [31, "module-data.datasets.utils.common"], [31, "module-data.datasets.utils.text"], [31, "module-data.datasets.utils.video"], [32, "module-data.loader"], [32, "module-data.loader.dataloader"], [33, "module-data.sampler"], [33, "module-data.sampler.base_sampler"], [33, "module-data.sampler.batch_sampler"], [33, "module-data.sampler.chain_sampler"], [33, "module-data.sampler.multi_scale_sampler"], [33, "module-data.sampler.utils"], [33, "module-data.sampler.variable_batch_sampler"], [34, "module-data.text_tokenizer"], [34, "module-data.text_tokenizer.base_tokenizer"], [34, "module-data.text_tokenizer.clip_tokenizer"], [35, "module-data.transforms"], [35, "module-data.transforms.audio"], [35, "module-data.transforms.audio_bytes"], [35, "module-data.transforms.base_transforms"], [35, "module-data.transforms.common"], [35, "module-data.transforms.image_bytes"], [35, "module-data.transforms.image_pil"], [35, "module-data.transforms.image_torch"], [35, "module-data.transforms.utils"], [35, "module-data.transforms.video"], [36, "module-data.transforms.audio_aux"], [36, "module-data.transforms.audio_aux.mfccs"], [37, "module-data.video_reader"], [37, "module-data.video_reader.base_av_reader"], [37, "module-data.video_reader.decord_reader"], [37, "module-data.video_reader.pyav_reader"], [38, "module-engine"], [38, "module-engine.eval_detection"], [38, "module-engine.eval_segmentation"], [38, "module-engine.evaluation_engine"], [38, "module-engine.training_engine"], [38, "module-engine.utils"], [39, "module-engine.detection_utils"], [39, "module-engine.detection_utils.coco_map"], [40, "module-engine.segmentation_utils"], [40, "module-engine.segmentation_utils.cityscapes_iou"], [41, "module-loss_fn"], [41, "module-loss_fn.base_criteria"], [41, "module-loss_fn.composite_loss"], [41, "module-loss_fn.neural_augmentation"], [42, "module-loss_fn.classification"], [42, "module-loss_fn.classification.base_classification_criteria"], [42, "module-loss_fn.classification.binary_cross_entropy"], [42, "module-loss_fn.classification.cross_entropy"], [43, "module-loss_fn.detection"], [43, "module-loss_fn.detection.base_detection_criteria"], [43, "module-loss_fn.detection.mask_rcnn_loss"], [43, "module-loss_fn.detection.ssd_multibox_loss"], [44, "module-loss_fn.distillation"], [44, "module-loss_fn.distillation.base_distillation"], [44, "module-loss_fn.distillation.hard_distillation"], [44, "module-loss_fn.distillation.soft_kl_distillation"], [45, "module-loss_fn.multi_modal_img_text"], [45, "module-loss_fn.multi_modal_img_text.base_multi_modal_img_text_criteria"], [45, "module-loss_fn.multi_modal_img_text.contrastive_loss_clip"], [46, "module-loss_fn.segmentation"], [46, "module-loss_fn.segmentation.base_segmentation_criteria"], [46, "module-loss_fn.segmentation.cross_entropy"], [47, "module-loss_fn.utils"], [47, "module-loss_fn.utils.build_helper"], [47, "module-loss_fn.utils.class_weighting"], [48, "module-loss_landscape"], [48, "module-loss_landscape.landscape_utils"], [49, "module-metrics"], [49, "module-metrics.average_precision"], [49, "module-metrics.coco_map"], [49, "module-metrics.confusion_mat"], [49, "module-metrics.image_text_retrieval"], [49, "module-metrics.intersection_over_union"], [49, "module-metrics.metric_base"], [49, "module-metrics.metric_base_test"], [49, "module-metrics.misc"], [49, "module-metrics.probability_histograms"], [49, "module-metrics.psnr"], [49, "module-metrics.retrieval_cmc"], [49, "module-metrics.stats"], [49, "module-metrics.topk_accuracy"], [50, "module-optim"], [50, "module-optim.adam"], [50, "module-optim.adamw"], [50, "module-optim.base_optim"], [50, "module-optim.sgd"], [51, "module-optim.scheduler"], [51, "module-optim.scheduler.base_scheduler"], [51, "module-optim.scheduler.cosine"], [51, "module-optim.scheduler.cyclic"], [51, "module-optim.scheduler.fixed"], [51, "module-optim.scheduler.multi_step"], [51, "module-optim.scheduler.polynomial"], [52, "module-options"], [52, "module-options.errors"], [52, "module-options.opts"], [52, "module-options.parse_args"], [52, "module-options.utils"], [53, "module-utils"], [53, "module-utils.checkpoint_utils"], [53, "module-utils.color_map"], [53, "module-utils.common_utils"], [53, "module-utils.ddp_utils"], [53, "module-utils.dict_utils"], [53, "module-utils.download_utils"], [53, "module-utils.download_utils_base"], [53, "module-utils.import_utils"], [53, "module-utils.logger"], [53, "module-utils.math_utils"], [53, "module-utils.object_utils"], [53, "module-utils.object_utils_test"], [53, "module-utils.pytorch_to_coreml"], [53, "module-utils.registry"], [53, "module-utils.registry_test"], [53, "module-utils.resources"], [53, "module-utils.tensor_utils"], [53, "module-utils.visualization_utils"], [54, "module-utils.third_party"], [54, "module-utils.third_party.ddp_functional_utils"], [55, "module-data.sampler.batch_sampler"], [55, "module-data.sampler.multi_scale_sampler"], [55, "module-data.sampler.variable_batch_sampler"]], "baseanchorgenerator (class in cvnets.anchor_generator.base_anchor_generator)": [[1, "cvnets.anchor_generator.base_anchor_generator.BaseAnchorGenerator"]], "ssdanchorgenerator (class in cvnets.anchor_generator.ssd_anchor_generator)": [[1, "cvnets.anchor_generator.ssd_anchor_generator.SSDAnchorGenerator"]], "__init__() (cvnets.anchor_generator.base_anchor_generator.baseanchorgenerator method)": [[1, "cvnets.anchor_generator.base_anchor_generator.BaseAnchorGenerator.__init__"]], "__init__() (cvnets.anchor_generator.ssd_anchor_generator.ssdanchorgenerator method)": [[1, "cvnets.anchor_generator.ssd_anchor_generator.SSDAnchorGenerator.__init__"]], "add_arguments() (cvnets.anchor_generator.base_anchor_generator.baseanchorgenerator class method)": [[1, "cvnets.anchor_generator.base_anchor_generator.BaseAnchorGenerator.add_arguments"]], "add_arguments() (cvnets.anchor_generator.ssd_anchor_generator.ssdanchorgenerator class method)": [[1, "cvnets.anchor_generator.ssd_anchor_generator.SSDAnchorGenerator.add_arguments"]], "arguments_anchor_gen() (in module cvnets.anchor_generator)": [[1, "cvnets.anchor_generator.arguments_anchor_gen"]], "build_anchor_generator() (in module cvnets.anchor_generator)": [[1, "cvnets.anchor_generator.build_anchor_generator"]], "cvnets.anchor_generator": [[1, "module-cvnets.anchor_generator"]], "cvnets.anchor_generator.base_anchor_generator": [[1, "module-cvnets.anchor_generator.base_anchor_generator"]], "cvnets.anchor_generator.ssd_anchor_generator": [[1, "module-cvnets.anchor_generator.ssd_anchor_generator"]], "forward() (cvnets.anchor_generator.base_anchor_generator.baseanchorgenerator method)": [[1, "cvnets.anchor_generator.base_anchor_generator.BaseAnchorGenerator.forward"]], "num_anchors_per_os() (cvnets.anchor_generator.base_anchor_generator.baseanchorgenerator method)": [[1, "cvnets.anchor_generator.base_anchor_generator.BaseAnchorGenerator.num_anchors_per_os"]], "num_anchors_per_os() (cvnets.anchor_generator.ssd_anchor_generator.ssdanchorgenerator method)": [[1, "cvnets.anchor_generator.ssd_anchor_generator.SSDAnchorGenerator.num_anchors_per_os"]], "attentionpool2dhead (class in cvnets.image_projection_layers.attention_pool_2d)": [[2, "cvnets.image_projection_layers.attention_pool_2d.AttentionPool2dHead"]], "baseimageprojectionhead (class in cvnets.image_projection_layers.base_image_projection)": [[2, "cvnets.image_projection_layers.base_image_projection.BaseImageProjectionHead"]], "globalpool2d (class in cvnets.image_projection_layers.global_pool_2d)": [[2, "cvnets.image_projection_layers.global_pool_2d.GlobalPool2D"]], "simpleimageprojectionhead (class in cvnets.image_projection_layers.simple_projection_head)": [[2, "cvnets.image_projection_layers.simple_projection_head.SimpleImageProjectionHead"]], "__init__() (cvnets.image_projection_layers.attention_pool_2d.attentionpool2dhead method)": [[2, "cvnets.image_projection_layers.attention_pool_2d.AttentionPool2dHead.__init__"]], "__init__() (cvnets.image_projection_layers.base_image_projection.baseimageprojectionhead method)": [[2, "cvnets.image_projection_layers.base_image_projection.BaseImageProjectionHead.__init__"]], "__init__() (cvnets.image_projection_layers.global_pool_2d.globalpool2d method)": [[2, "cvnets.image_projection_layers.global_pool_2d.GlobalPool2D.__init__"]], "__init__() (cvnets.image_projection_layers.simple_projection_head.simpleimageprojectionhead method)": [[2, "cvnets.image_projection_layers.simple_projection_head.SimpleImageProjectionHead.__init__"]], "add_arguments() (cvnets.image_projection_layers.attention_pool_2d.attentionpool2dhead class method)": [[2, "cvnets.image_projection_layers.attention_pool_2d.AttentionPool2dHead.add_arguments"]], "add_arguments() (cvnets.image_projection_layers.base_image_projection.baseimageprojectionhead class method)": [[2, "cvnets.image_projection_layers.base_image_projection.BaseImageProjectionHead.add_arguments"]], "add_arguments() (cvnets.image_projection_layers.global_pool_2d.globalpool2d class method)": [[2, "cvnets.image_projection_layers.global_pool_2d.GlobalPool2D.add_arguments"]], "add_arguments() (cvnets.image_projection_layers.simple_projection_head.simpleimageprojectionhead class method)": [[2, "cvnets.image_projection_layers.simple_projection_head.SimpleImageProjectionHead.add_arguments"]], "arguments_image_projection_head() (in module cvnets.image_projection_layers)": [[2, "cvnets.image_projection_layers.arguments_image_projection_head"]], "build_image_projection_head() (in module cvnets.image_projection_layers)": [[2, "cvnets.image_projection_layers.build_image_projection_head"]], "cvnets.image_projection_layers": [[2, "module-cvnets.image_projection_layers"]], "cvnets.image_projection_layers.attention_pool_2d": [[2, "module-cvnets.image_projection_layers.attention_pool_2d"]], "cvnets.image_projection_layers.base_image_projection": [[2, "module-cvnets.image_projection_layers.base_image_projection"]], "cvnets.image_projection_layers.global_pool_2d": [[2, "module-cvnets.image_projection_layers.global_pool_2d"]], "cvnets.image_projection_layers.simple_projection_head": [[2, "module-cvnets.image_projection_layers.simple_projection_head"]], "forward() (cvnets.image_projection_layers.attention_pool_2d.attentionpool2dhead method)": [[2, "cvnets.image_projection_layers.attention_pool_2d.AttentionPool2dHead.forward"]], "forward() (cvnets.image_projection_layers.base_image_projection.baseimageprojectionhead method)": [[2, "cvnets.image_projection_layers.base_image_projection.BaseImageProjectionHead.forward"]], "forward() (cvnets.image_projection_layers.global_pool_2d.globalpool2d method)": [[2, "cvnets.image_projection_layers.global_pool_2d.GlobalPool2D.forward"]], "forward() (cvnets.image_projection_layers.simple_projection_head.simpleimageprojectionhead method)": [[2, "cvnets.image_projection_layers.simple_projection_head.SimpleImageProjectionHead.forward"]], "get_in_feature_dimension() (in module cvnets.image_projection_layers.base_image_projection)": [[2, "cvnets.image_projection_layers.base_image_projection.get_in_feature_dimension"]], "get_trainable_parameters() (cvnets.image_projection_layers.base_image_projection.baseimageprojectionhead method)": [[2, "cvnets.image_projection_layers.base_image_projection.BaseImageProjectionHead.get_trainable_parameters"]], "reset_parameters() (cvnets.image_projection_layers.attention_pool_2d.attentionpool2dhead method)": [[2, "cvnets.image_projection_layers.attention_pool_2d.AttentionPool2dHead.reset_parameters"]], "reset_parameters() (cvnets.image_projection_layers.base_image_projection.baseimageprojectionhead method)": [[2, "cvnets.image_projection_layers.base_image_projection.BaseImageProjectionHead.reset_parameters"]], "reset_parameters() (cvnets.image_projection_layers.global_pool_2d.globalpool2d method)": [[2, "cvnets.image_projection_layers.global_pool_2d.GlobalPool2D.reset_parameters"]], "reset_parameters() (cvnets.image_projection_layers.simple_projection_head.simpleimageprojectionhead method)": [[2, "cvnets.image_projection_layers.simple_projection_head.SimpleImageProjectionHead.reset_parameters"]], "adaptiveavgpool2d (class in cvnets.layers.adaptive_pool)": [[3, "cvnets.layers.adaptive_pool.AdaptiveAvgPool2d"]], "adjustbatchnormmomentum (class in cvnets.layers)": [[3, "cvnets.layers.AdjustBatchNormMomentum"]], "adjustbatchnormmomentum (class in cvnets.layers.normalization_layers)": [[3, "cvnets.layers.normalization_layers.AdjustBatchNormMomentum"]], "avgpool2d (class in cvnets.layers)": [[3, "cvnets.layers.AvgPool2d"]], "avgpool2d (class in cvnets.layers.pooling)": [[3, "cvnets.layers.pooling.AvgPool2d"]], "baselayer (class in cvnets.layers.base_layer)": [[3, "cvnets.layers.base_layer.BaseLayer"]], "conv2d (class in cvnets.layers.conv_layer)": [[3, "cvnets.layers.conv_layer.Conv2d"]], "convlayer1d (class in cvnets.layers)": [[3, "cvnets.layers.ConvLayer1d"]], "convlayer1d (class in cvnets.layers.conv_layer)": [[3, "cvnets.layers.conv_layer.ConvLayer1d"]], "convlayer2d (class in cvnets.layers)": [[3, "cvnets.layers.ConvLayer2d"]], "convlayer2d (class in cvnets.layers.conv_layer)": [[3, "cvnets.layers.conv_layer.ConvLayer2d"]], "convlayer3d (class in cvnets.layers)": [[3, "cvnets.layers.ConvLayer3d"]], "convlayer3d (class in cvnets.layers.conv_layer)": [[3, "cvnets.layers.conv_layer.ConvLayer3d"]], "dropout (class in cvnets.layers)": [[3, "cvnets.layers.Dropout"]], "dropout (class in cvnets.layers.dropout)": [[3, "cvnets.layers.dropout.Dropout"]], "dropout2d (class in cvnets.layers)": [[3, "cvnets.layers.Dropout2d"]], "dropout2d (class in cvnets.layers.dropout)": [[3, "cvnets.layers.dropout.Dropout2d"]], "embedding (class in cvnets.layers)": [[3, "cvnets.layers.Embedding"]], "embedding (class in cvnets.layers.embedding)": [[3, "cvnets.layers.embedding.Embedding"]], "flatten (class in cvnets.layers)": [[3, "cvnets.layers.Flatten"]], "flatten (class in cvnets.layers.flatten)": [[3, "cvnets.layers.flatten.Flatten"]], "globalpool (class in cvnets.layers)": [[3, "cvnets.layers.GlobalPool"]], "globalpool (class in cvnets.layers.global_pool)": [[3, "cvnets.layers.global_pool.GlobalPool"]], "grouplinear (class in cvnets.layers)": [[3, "cvnets.layers.GroupLinear"]], "grouplinear (class in cvnets.layers.linear_layer)": [[3, "cvnets.layers.linear_layer.GroupLinear"]], "identity (class in cvnets.layers)": [[3, "cvnets.layers.Identity"]], "identity (class in cvnets.layers.identity)": [[3, "cvnets.layers.identity.Identity"]], "learnablepositionencoding (class in cvnets.layers.positional_encoding)": [[3, "cvnets.layers.positional_encoding.LearnablePositionEncoding"]], "learnablepositionalembedding (class in cvnets.layers.positional_embedding)": [[3, "cvnets.layers.positional_embedding.LearnablePositionalEmbedding"]], "linearlayer (class in cvnets.layers)": [[3, "cvnets.layers.LinearLayer"]], "linearlayer (class in cvnets.layers.linear_layer)": [[3, "cvnets.layers.linear_layer.LinearLayer"]], "linearselfattention (class in cvnets.layers)": [[3, "cvnets.layers.LinearSelfAttention"]], "linearselfattention (class in cvnets.layers.linear_attention)": [[3, "cvnets.layers.linear_attention.LinearSelfAttention"]], "maxpool2d (class in cvnets.layers)": [[3, "cvnets.layers.MaxPool2d"]], "maxpool2d (class in cvnets.layers.pooling)": [[3, "cvnets.layers.pooling.MaxPool2d"]], "multiheadattention (class in cvnets.layers)": [[3, "cvnets.layers.MultiHeadAttention"]], "multiheadattention (class in cvnets.layers.multi_head_attention)": [[3, "cvnets.layers.multi_head_attention.MultiHeadAttention"]], "normactlayer (class in cvnets.layers)": [[3, "cvnets.layers.NormActLayer"]], "normactlayer (class in cvnets.layers.conv_layer)": [[3, "cvnets.layers.conv_layer.NormActLayer"]], "pixelshuffle (class in cvnets.layers)": [[3, "cvnets.layers.PixelShuffle"]], "pixelshuffle (class in cvnets.layers.pixel_shuffle)": [[3, "cvnets.layers.pixel_shuffle.PixelShuffle"]], "positionalembedding (class in cvnets.layers)": [[3, "cvnets.layers.PositionalEmbedding"]], "positionalembedding (class in cvnets.layers.positional_embedding)": [[3, "cvnets.layers.positional_embedding.PositionalEmbedding"]], "randomapply (class in cvnets.layers.random_layers)": [[3, "cvnets.layers.random_layers.RandomApply"]], "separableconv1d (class in cvnets.layers)": [[3, "cvnets.layers.SeparableConv1d"]], "separableconv1d (class in cvnets.layers.conv_layer)": [[3, "cvnets.layers.conv_layer.SeparableConv1d"]], "separableconv2d (class in cvnets.layers)": [[3, "cvnets.layers.SeparableConv2d"]], "separableconv2d (class in cvnets.layers.conv_layer)": [[3, "cvnets.layers.conv_layer.SeparableConv2d"]], "separableconv3d (class in cvnets.layers)": [[3, "cvnets.layers.SeparableConv3d"]], "separableconv3d (class in cvnets.layers.conv_layer)": [[3, "cvnets.layers.conv_layer.SeparableConv3d"]], "singleheadattention (class in cvnets.layers)": [[3, "cvnets.layers.SingleHeadAttention"]], "singleheadattention (class in cvnets.layers.single_head_attention)": [[3, "cvnets.layers.single_head_attention.SingleHeadAttention"]], "sinusoidalpositionalembedding (class in cvnets.layers.positional_embedding)": [[3, "cvnets.layers.positional_embedding.SinusoidalPositionalEmbedding"]], "sinusoidalpositionalencoding (class in cvnets.layers.positional_encoding)": [[3, "cvnets.layers.positional_encoding.SinusoidalPositionalEncoding"]], "softmax (class in cvnets.layers)": [[3, "cvnets.layers.Softmax"]], "softmax (class in cvnets.layers.softmax)": [[3, "cvnets.layers.softmax.Softmax"]], "stochasticdepth (class in cvnets.layers)": [[3, "cvnets.layers.StochasticDepth"]], "stochasticdepth (class in cvnets.layers.stochastic_depth)": [[3, "cvnets.layers.stochastic_depth.StochasticDepth"]], "tokenmerging (class in cvnets.layers.token_merging)": [[3, "cvnets.layers.token_merging.TokenMerging"]], "transposeconvlayer2d (class in cvnets.layers)": [[3, "cvnets.layers.TransposeConvLayer2d"]], "transposeconvlayer2d (class in cvnets.layers.conv_layer)": [[3, "cvnets.layers.conv_layer.TransposeConvLayer2d"]], "upsample (class in cvnets.layers)": [[3, "cvnets.layers.UpSample"]], "upsample (class in cvnets.layers.upsample)": [[3, "cvnets.layers.upsample.UpSample"]], "__init__() (cvnets.layers.adjustbatchnormmomentum method)": [[3, "cvnets.layers.AdjustBatchNormMomentum.__init__"]], "__init__() (cvnets.layers.avgpool2d method)": [[3, "cvnets.layers.AvgPool2d.__init__"]], "__init__() (cvnets.layers.dropout method)": [[3, "cvnets.layers.Dropout.__init__"]], "__init__() (cvnets.layers.dropout2d method)": [[3, "cvnets.layers.Dropout2d.__init__"]], "__init__() (cvnets.layers.embedding method)": [[3, "cvnets.layers.Embedding.__init__"]], "__init__() (cvnets.layers.flatten method)": [[3, "cvnets.layers.Flatten.__init__"]], "__init__() (cvnets.layers.globalpool method)": [[3, "cvnets.layers.GlobalPool.__init__"]], "__init__() (cvnets.layers.grouplinear method)": [[3, "cvnets.layers.GroupLinear.__init__"]], "__init__() (cvnets.layers.identity method)": [[3, "cvnets.layers.Identity.__init__"]], "__init__() (cvnets.layers.linearlayer method)": [[3, "cvnets.layers.LinearLayer.__init__"]], "__init__() (cvnets.layers.linearselfattention method)": [[3, "cvnets.layers.LinearSelfAttention.__init__"]], "__init__() (cvnets.layers.maxpool2d method)": [[3, "cvnets.layers.MaxPool2d.__init__"]], "__init__() (cvnets.layers.multiheadattention method)": [[3, "cvnets.layers.MultiHeadAttention.__init__"]], "__init__() (cvnets.layers.normactlayer method)": [[3, "cvnets.layers.NormActLayer.__init__"]], "__init__() (cvnets.layers.pixelshuffle method)": [[3, "cvnets.layers.PixelShuffle.__init__"]], "__init__() (cvnets.layers.positionalembedding method)": [[3, "cvnets.layers.PositionalEmbedding.__init__"]], "__init__() (cvnets.layers.singleheadattention method)": [[3, "cvnets.layers.SingleHeadAttention.__init__"]], "__init__() (cvnets.layers.softmax method)": [[3, "cvnets.layers.Softmax.__init__"]], "__init__() (cvnets.layers.stochasticdepth method)": [[3, "cvnets.layers.StochasticDepth.__init__"]], "__init__() (cvnets.layers.transposeconvlayer2d method)": [[3, "cvnets.layers.TransposeConvLayer2d.__init__"]], "__init__() (cvnets.layers.upsample method)": [[3, "cvnets.layers.UpSample.__init__"]], "__init__() (cvnets.layers.adaptive_pool.adaptiveavgpool2d method)": [[3, "cvnets.layers.adaptive_pool.AdaptiveAvgPool2d.__init__"]], "__init__() (cvnets.layers.base_layer.baselayer method)": [[3, "cvnets.layers.base_layer.BaseLayer.__init__"]], "__init__() (cvnets.layers.conv_layer.conv2d method)": [[3, "cvnets.layers.conv_layer.Conv2d.__init__"]], "__init__() (cvnets.layers.conv_layer.normactlayer method)": [[3, "cvnets.layers.conv_layer.NormActLayer.__init__"]], "__init__() (cvnets.layers.conv_layer.transposeconvlayer2d method)": [[3, "cvnets.layers.conv_layer.TransposeConvLayer2d.__init__"]], "__init__() (cvnets.layers.dropout.dropout method)": [[3, "cvnets.layers.dropout.Dropout.__init__"]], "__init__() (cvnets.layers.dropout.dropout2d method)": [[3, "cvnets.layers.dropout.Dropout2d.__init__"]], "__init__() (cvnets.layers.embedding.embedding method)": [[3, "cvnets.layers.embedding.Embedding.__init__"]], "__init__() (cvnets.layers.flatten.flatten method)": [[3, "cvnets.layers.flatten.Flatten.__init__"]], "__init__() (cvnets.layers.global_pool.globalpool method)": [[3, "cvnets.layers.global_pool.GlobalPool.__init__"]], "__init__() (cvnets.layers.identity.identity method)": [[3, "cvnets.layers.identity.Identity.__init__"]], "__init__() (cvnets.layers.linear_attention.linearselfattention method)": [[3, "cvnets.layers.linear_attention.LinearSelfAttention.__init__"]], "__init__() (cvnets.layers.linear_layer.grouplinear method)": [[3, "cvnets.layers.linear_layer.GroupLinear.__init__"]], "__init__() (cvnets.layers.linear_layer.linearlayer method)": [[3, "cvnets.layers.linear_layer.LinearLayer.__init__"]], "__init__() (cvnets.layers.multi_head_attention.multiheadattention method)": [[3, "cvnets.layers.multi_head_attention.MultiHeadAttention.__init__"]], "__init__() (cvnets.layers.normalization_layers.adjustbatchnormmomentum method)": [[3, "cvnets.layers.normalization_layers.AdjustBatchNormMomentum.__init__"]], "__init__() (cvnets.layers.pixel_shuffle.pixelshuffle method)": [[3, "cvnets.layers.pixel_shuffle.PixelShuffle.__init__"]], "__init__() (cvnets.layers.pooling.avgpool2d method)": [[3, "cvnets.layers.pooling.AvgPool2d.__init__"]], "__init__() (cvnets.layers.pooling.maxpool2d method)": [[3, "cvnets.layers.pooling.MaxPool2d.__init__"]], "__init__() (cvnets.layers.positional_embedding.learnablepositionalembedding method)": [[3, "cvnets.layers.positional_embedding.LearnablePositionalEmbedding.__init__"]], "__init__() (cvnets.layers.positional_embedding.positionalembedding method)": [[3, "cvnets.layers.positional_embedding.PositionalEmbedding.__init__"]], "__init__() (cvnets.layers.positional_embedding.sinusoidalpositionalembedding method)": [[3, "cvnets.layers.positional_embedding.SinusoidalPositionalEmbedding.__init__"]], "__init__() (cvnets.layers.positional_encoding.learnablepositionencoding method)": [[3, "cvnets.layers.positional_encoding.LearnablePositionEncoding.__init__"]], "__init__() (cvnets.layers.positional_encoding.sinusoidalpositionalencoding method)": [[3, "cvnets.layers.positional_encoding.SinusoidalPositionalEncoding.__init__"]], "__init__() (cvnets.layers.random_layers.randomapply method)": [[3, "cvnets.layers.random_layers.RandomApply.__init__"]], "__init__() (cvnets.layers.single_head_attention.singleheadattention method)": [[3, "cvnets.layers.single_head_attention.SingleHeadAttention.__init__"]], "__init__() (cvnets.layers.softmax.softmax method)": [[3, "cvnets.layers.softmax.Softmax.__init__"]], "__init__() (cvnets.layers.stochastic_depth.stochasticdepth method)": [[3, "cvnets.layers.stochastic_depth.StochasticDepth.__init__"]], "__init__() (cvnets.layers.token_merging.tokenmerging method)": [[3, "cvnets.layers.token_merging.TokenMerging.__init__"]], "__init__() (cvnets.layers.upsample.upsample method)": [[3, "cvnets.layers.upsample.UpSample.__init__"]], "add_arguments() (cvnets.layers.globalpool class method)": [[3, "cvnets.layers.GlobalPool.add_arguments"]], "add_arguments() (cvnets.layers.grouplinear class method)": [[3, "cvnets.layers.GroupLinear.add_arguments"]], "add_arguments() (cvnets.layers.linearlayer class method)": [[3, "cvnets.layers.LinearLayer.add_arguments"]], "add_arguments() (cvnets.layers.base_layer.baselayer class method)": [[3, "cvnets.layers.base_layer.BaseLayer.add_arguments"]], "add_arguments() (cvnets.layers.global_pool.globalpool class method)": [[3, "cvnets.layers.global_pool.GlobalPool.add_arguments"]], "add_arguments() (cvnets.layers.linear_layer.grouplinear class method)": [[3, "cvnets.layers.linear_layer.GroupLinear.add_arguments"]], "add_arguments() (cvnets.layers.linear_layer.linearlayer class method)": [[3, "cvnets.layers.linear_layer.LinearLayer.add_arguments"]], "adjust_momentum() (cvnets.layers.adjustbatchnormmomentum method)": [[3, "cvnets.layers.AdjustBatchNormMomentum.adjust_momentum"]], "adjust_momentum() (cvnets.layers.normalization_layers.adjustbatchnormmomentum method)": [[3, "cvnets.layers.normalization_layers.AdjustBatchNormMomentum.adjust_momentum"]], "conv_layer_cls (cvnets.layers.separableconv1d attribute)": [[3, "cvnets.layers.SeparableConv1d.conv_layer_cls"]], "conv_layer_cls (cvnets.layers.separableconv2d attribute)": [[3, "cvnets.layers.SeparableConv2d.conv_layer_cls"]], "conv_layer_cls (cvnets.layers.separableconv3d attribute)": [[3, "cvnets.layers.SeparableConv3d.conv_layer_cls"]], "conv_layer_cls (cvnets.layers.conv_layer.separableconv1d attribute)": [[3, "cvnets.layers.conv_layer.SeparableConv1d.conv_layer_cls"]], "conv_layer_cls (cvnets.layers.conv_layer.separableconv2d attribute)": [[3, "cvnets.layers.conv_layer.SeparableConv2d.conv_layer_cls"]], "conv_layer_cls (cvnets.layers.conv_layer.separableconv3d attribute)": [[3, "cvnets.layers.conv_layer.SeparableConv3d.conv_layer_cls"]], "cvnets.layers": [[3, "module-cvnets.layers"]], "cvnets.layers.adaptive_pool": [[3, "module-cvnets.layers.adaptive_pool"]], "cvnets.layers.base_layer": [[3, "module-cvnets.layers.base_layer"]], "cvnets.layers.conv_layer": [[3, "module-cvnets.layers.conv_layer"]], "cvnets.layers.dropout": [[3, "module-cvnets.layers.dropout"]], "cvnets.layers.embedding": [[3, "module-cvnets.layers.embedding"]], "cvnets.layers.flatten": [[3, "module-cvnets.layers.flatten"]], "cvnets.layers.global_pool": [[3, "module-cvnets.layers.global_pool"]], "cvnets.layers.identity": [[3, "module-cvnets.layers.identity"]], "cvnets.layers.linear_attention": [[3, "module-cvnets.layers.linear_attention"]], "cvnets.layers.linear_layer": [[3, "module-cvnets.layers.linear_layer"]], "cvnets.layers.multi_head_attention": [[3, "module-cvnets.layers.multi_head_attention"]], "cvnets.layers.normalization_layers": [[3, "module-cvnets.layers.normalization_layers"]], "cvnets.layers.pixel_shuffle": [[3, "module-cvnets.layers.pixel_shuffle"]], "cvnets.layers.pooling": [[3, "module-cvnets.layers.pooling"]], "cvnets.layers.positional_embedding": [[3, "module-cvnets.layers.positional_embedding"]], "cvnets.layers.positional_encoding": [[3, "module-cvnets.layers.positional_encoding"]], "cvnets.layers.random_layers": [[3, "module-cvnets.layers.random_layers"]], "cvnets.layers.single_head_attention": [[3, "module-cvnets.layers.single_head_attention"]], "cvnets.layers.softmax": [[3, "module-cvnets.layers.softmax"]], "cvnets.layers.stochastic_depth": [[3, "module-cvnets.layers.stochastic_depth"]], "cvnets.layers.token_merging": [[3, "module-cvnets.layers.token_merging"]], "cvnets.layers.upsample": [[3, "module-cvnets.layers.upsample"]], "extra_repr() (cvnets.layers.token_merging.tokenmerging method)": [[3, "cvnets.layers.token_merging.TokenMerging.extra_repr"]], "forward() (cvnets.layers.globalpool method)": [[3, "cvnets.layers.GlobalPool.forward"]], "forward() (cvnets.layers.grouplinear method)": [[3, "cvnets.layers.GroupLinear.forward"]], "forward() (cvnets.layers.identity method)": [[3, "cvnets.layers.Identity.forward"]], "forward() (cvnets.layers.linearlayer method)": [[3, "cvnets.layers.LinearLayer.forward"]], "forward() (cvnets.layers.linearselfattention method)": [[3, "cvnets.layers.LinearSelfAttention.forward"]], "forward() (cvnets.layers.multiheadattention method)": [[3, "cvnets.layers.MultiHeadAttention.forward"]], "forward() (cvnets.layers.normactlayer method)": [[3, "cvnets.layers.NormActLayer.forward"]], "forward() (cvnets.layers.positionalembedding method)": [[3, "cvnets.layers.PositionalEmbedding.forward"]], "forward() (cvnets.layers.singleheadattention method)": [[3, "cvnets.layers.SingleHeadAttention.forward"]], "forward() (cvnets.layers.transposeconvlayer2d method)": [[3, "cvnets.layers.TransposeConvLayer2d.forward"]], "forward() (cvnets.layers.base_layer.baselayer method)": [[3, "cvnets.layers.base_layer.BaseLayer.forward"]], "forward() (cvnets.layers.conv_layer.normactlayer method)": [[3, "cvnets.layers.conv_layer.NormActLayer.forward"]], "forward() (cvnets.layers.conv_layer.transposeconvlayer2d method)": [[3, "cvnets.layers.conv_layer.TransposeConvLayer2d.forward"]], "forward() (cvnets.layers.global_pool.globalpool method)": [[3, "cvnets.layers.global_pool.GlobalPool.forward"]], "forward() (cvnets.layers.identity.identity method)": [[3, "cvnets.layers.identity.Identity.forward"]], "forward() (cvnets.layers.linear_attention.linearselfattention method)": [[3, "cvnets.layers.linear_attention.LinearSelfAttention.forward"]], "forward() (cvnets.layers.linear_layer.grouplinear method)": [[3, "cvnets.layers.linear_layer.GroupLinear.forward"]], "forward() (cvnets.layers.linear_layer.linearlayer method)": [[3, "cvnets.layers.linear_layer.LinearLayer.forward"]], "forward() (cvnets.layers.multi_head_attention.multiheadattention method)": [[3, "cvnets.layers.multi_head_attention.MultiHeadAttention.forward"]], "forward() (cvnets.layers.positional_embedding.learnablepositionalembedding method)": [[3, "cvnets.layers.positional_embedding.LearnablePositionalEmbedding.forward"]], "forward() (cvnets.layers.positional_embedding.positionalembedding method)": [[3, "cvnets.layers.positional_embedding.PositionalEmbedding.forward"]], "forward() (cvnets.layers.positional_embedding.sinusoidalpositionalembedding method)": [[3, "cvnets.layers.positional_embedding.SinusoidalPositionalEmbedding.forward"]], "forward() (cvnets.layers.positional_encoding.learnablepositionencoding method)": [[3, "cvnets.layers.positional_encoding.LearnablePositionEncoding.forward"]], "forward() (cvnets.layers.positional_encoding.sinusoidalpositionalencoding method)": [[3, "cvnets.layers.positional_encoding.SinusoidalPositionalEncoding.forward"]], "forward() (cvnets.layers.random_layers.randomapply method)": [[3, "cvnets.layers.random_layers.RandomApply.forward"]], "forward() (cvnets.layers.single_head_attention.singleheadattention method)": [[3, "cvnets.layers.single_head_attention.SingleHeadAttention.forward"]], "forward() (cvnets.layers.token_merging.tokenmerging method)": [[3, "cvnets.layers.token_merging.TokenMerging.forward"]], "forward_default() (cvnets.layers.multiheadattention method)": [[3, "cvnets.layers.MultiHeadAttention.forward_default"]], "forward_default() (cvnets.layers.multi_head_attention.multiheadattention method)": [[3, "cvnets.layers.multi_head_attention.MultiHeadAttention.forward_default"]], "forward_others() (cvnets.layers.positional_encoding.sinusoidalpositionalencoding method)": [[3, "cvnets.layers.positional_encoding.SinusoidalPositionalEncoding.forward_others"]], "forward_patch_last() (cvnets.layers.positional_encoding.sinusoidalpositionalencoding method)": [[3, "cvnets.layers.positional_encoding.SinusoidalPositionalEncoding.forward_patch_last"]], "forward_pytorch() (cvnets.layers.multiheadattention method)": [[3, "cvnets.layers.MultiHeadAttention.forward_pytorch"]], "forward_pytorch() (cvnets.layers.multi_head_attention.multiheadattention method)": [[3, "cvnets.layers.multi_head_attention.MultiHeadAttention.forward_pytorch"]], "forward_tracing() (cvnets.layers.multiheadattention method)": [[3, "cvnets.layers.MultiHeadAttention.forward_tracing"]], "forward_tracing() (cvnets.layers.multi_head_attention.multiheadattention method)": [[3, "cvnets.layers.multi_head_attention.MultiHeadAttention.forward_tracing"]], "get_normalization_layer() (in module cvnets.layers)": [[3, "cvnets.layers.get_normalization_layer"]], "get_trainable_parameters() (cvnets.layers.base_layer.baselayer method)": [[3, "cvnets.layers.base_layer.BaseLayer.get_trainable_parameters"]], "get_weights() (cvnets.layers.positional_embedding.sinusoidalpositionalembedding method)": [[3, "cvnets.layers.positional_embedding.SinusoidalPositionalEmbedding.get_weights"]], "module_cls (cvnets.layers.convlayer1d attribute)": [[3, "cvnets.layers.ConvLayer1d.module_cls"]], "module_cls (cvnets.layers.convlayer2d attribute)": [[3, "cvnets.layers.ConvLayer2d.module_cls"]], "module_cls (cvnets.layers.convlayer3d attribute)": [[3, "cvnets.layers.ConvLayer3d.module_cls"]], "module_cls (cvnets.layers.conv_layer.convlayer1d attribute)": [[3, "cvnets.layers.conv_layer.ConvLayer1d.module_cls"]], "module_cls (cvnets.layers.conv_layer.convlayer2d attribute)": [[3, "cvnets.layers.conv_layer.ConvLayer2d.module_cls"]], "module_cls (cvnets.layers.conv_layer.convlayer3d attribute)": [[3, "cvnets.layers.conv_layer.ConvLayer3d.module_cls"]], "ndim (cvnets.layers.convlayer1d attribute)": [[3, "cvnets.layers.ConvLayer1d.ndim"]], "ndim (cvnets.layers.convlayer2d attribute)": [[3, "cvnets.layers.ConvLayer2d.ndim"]], "ndim (cvnets.layers.convlayer3d attribute)": [[3, "cvnets.layers.ConvLayer3d.ndim"]], "ndim (cvnets.layers.conv_layer.convlayer1d attribute)": [[3, "cvnets.layers.conv_layer.ConvLayer1d.ndim"]], "ndim (cvnets.layers.conv_layer.convlayer2d attribute)": [[3, "cvnets.layers.conv_layer.ConvLayer2d.ndim"]], "ndim (cvnets.layers.conv_layer.convlayer3d attribute)": [[3, "cvnets.layers.conv_layer.ConvLayer3d.ndim"]], "pad_x_and_mask() (in module cvnets.layers.token_merging)": [[3, "cvnets.layers.token_merging.pad_x_and_mask"]], "pool_types (cvnets.layers.globalpool attribute)": [[3, "cvnets.layers.GlobalPool.pool_types"]], "pool_types (cvnets.layers.global_pool.globalpool attribute)": [[3, "cvnets.layers.global_pool.GlobalPool.pool_types"]], "reset_parameters() (cvnets.layers.embedding method)": [[3, "cvnets.layers.Embedding.reset_parameters"]], "reset_parameters() (cvnets.layers.embedding.embedding method)": [[3, "cvnets.layers.embedding.Embedding.reset_parameters"]], "reset_parameters() (cvnets.layers.positional_embedding.learnablepositionalembedding method)": [[3, "cvnets.layers.positional_embedding.LearnablePositionalEmbedding.reset_parameters"]], "reset_params() (cvnets.layers.grouplinear method)": [[3, "cvnets.layers.GroupLinear.reset_params"]], "reset_params() (cvnets.layers.linearlayer method)": [[3, "cvnets.layers.LinearLayer.reset_params"]], "reset_params() (cvnets.layers.linear_layer.grouplinear method)": [[3, "cvnets.layers.linear_layer.GroupLinear.reset_params"]], "reset_params() (cvnets.layers.linear_layer.linearlayer method)": [[3, "cvnets.layers.linear_layer.LinearLayer.reset_params"]], "round_places (cvnets.layers.adjustbatchnormmomentum attribute)": [[3, "cvnets.layers.AdjustBatchNormMomentum.round_places"]], "round_places (cvnets.layers.normalization_layers.adjustbatchnormmomentum attribute)": [[3, "cvnets.layers.normalization_layers.AdjustBatchNormMomentum.round_places"]], "training (cvnets.layers.convlayer1d attribute)": [[3, "cvnets.layers.ConvLayer1d.training"]], "training (cvnets.layers.convlayer2d attribute)": [[3, "cvnets.layers.ConvLayer2d.training"]], "training (cvnets.layers.convlayer3d attribute)": [[3, "cvnets.layers.ConvLayer3d.training"]], "training (cvnets.layers.globalpool attribute)": [[3, "cvnets.layers.GlobalPool.training"]], "visualize_context_scores() (cvnets.layers.linearselfattention static method)": [[3, "cvnets.layers.LinearSelfAttention.visualize_context_scores"]], "visualize_context_scores() (cvnets.layers.linear_attention.linearselfattention static method)": [[3, "cvnets.layers.linear_attention.LinearSelfAttention.visualize_context_scores"]], "gelu (class in cvnets.layers.activation.gelu)": [[4, "cvnets.layers.activation.gelu.GELU"]], "hardsigmoid (class in cvnets.layers.activation.hard_sigmoid)": [[4, "cvnets.layers.activation.hard_sigmoid.Hardsigmoid"]], "hardswish (class in cvnets.layers.activation.hard_swish)": [[4, "cvnets.layers.activation.hard_swish.Hardswish"]], "leakyrelu (class in cvnets.layers.activation.leaky_relu)": [[4, "cvnets.layers.activation.leaky_relu.LeakyReLU"]], "prelu (class in cvnets.layers.activation.prelu)": [[4, "cvnets.layers.activation.prelu.PReLU"]], "relu (class in cvnets.layers.activation.relu)": [[4, "cvnets.layers.activation.relu.ReLU"]], "relu6 (class in cvnets.layers.activation.relu6)": [[4, "cvnets.layers.activation.relu6.ReLU6"]], "sigmoid (class in cvnets.layers.activation.sigmoid)": [[4, "cvnets.layers.activation.sigmoid.Sigmoid"]], "swish (class in cvnets.layers.activation.swish)": [[4, "cvnets.layers.activation.swish.Swish"]], "tanh (class in cvnets.layers.activation.tanh)": [[4, "cvnets.layers.activation.tanh.Tanh"]], "__init__() (cvnets.layers.activation.gelu.gelu method)": [[4, "cvnets.layers.activation.gelu.GELU.__init__"]], "__init__() (cvnets.layers.activation.hard_sigmoid.hardsigmoid method)": [[4, "cvnets.layers.activation.hard_sigmoid.Hardsigmoid.__init__"]], "__init__() (cvnets.layers.activation.hard_swish.hardswish method)": [[4, "cvnets.layers.activation.hard_swish.Hardswish.__init__"]], "__init__() (cvnets.layers.activation.leaky_relu.leakyrelu method)": [[4, "cvnets.layers.activation.leaky_relu.LeakyReLU.__init__"]], "__init__() (cvnets.layers.activation.prelu.prelu method)": [[4, "cvnets.layers.activation.prelu.PReLU.__init__"]], "__init__() (cvnets.layers.activation.relu.relu method)": [[4, "cvnets.layers.activation.relu.ReLU.__init__"]], "__init__() (cvnets.layers.activation.relu6.relu6 method)": [[4, "cvnets.layers.activation.relu6.ReLU6.__init__"]], "__init__() (cvnets.layers.activation.sigmoid.sigmoid method)": [[4, "cvnets.layers.activation.sigmoid.Sigmoid.__init__"]], "__init__() (cvnets.layers.activation.swish.swish method)": [[4, "cvnets.layers.activation.swish.Swish.__init__"]], "__init__() (cvnets.layers.activation.tanh.tanh method)": [[4, "cvnets.layers.activation.tanh.Tanh.__init__"]], "arguments_activation_fn() (in module cvnets.layers.activation)": [[4, "cvnets.layers.activation.arguments_activation_fn"]], "build_activation_layer() (in module cvnets.layers.activation)": [[4, "cvnets.layers.activation.build_activation_layer"]], "cvnets.layers.activation": [[4, "module-cvnets.layers.activation"]], "cvnets.layers.activation.gelu": [[4, "module-cvnets.layers.activation.gelu"]], "cvnets.layers.activation.hard_sigmoid": [[4, "module-cvnets.layers.activation.hard_sigmoid"]], "cvnets.layers.activation.hard_swish": [[4, "module-cvnets.layers.activation.hard_swish"]], "cvnets.layers.activation.leaky_relu": [[4, "module-cvnets.layers.activation.leaky_relu"]], "cvnets.layers.activation.prelu": [[4, "module-cvnets.layers.activation.prelu"]], "cvnets.layers.activation.relu": [[4, "module-cvnets.layers.activation.relu"]], "cvnets.layers.activation.relu6": [[4, "module-cvnets.layers.activation.relu6"]], "cvnets.layers.activation.sigmoid": [[4, "module-cvnets.layers.activation.sigmoid"]], "cvnets.layers.activation.swish": [[4, "module-cvnets.layers.activation.swish"]], "cvnets.layers.activation.tanh": [[4, "module-cvnets.layers.activation.tanh"]], "forward() (cvnets.layers.activation.hard_sigmoid.hardsigmoid method)": [[4, "cvnets.layers.activation.hard_sigmoid.Hardsigmoid.forward"]], "forward() (cvnets.layers.activation.hard_swish.hardswish method)": [[4, "cvnets.layers.activation.hard_swish.Hardswish.forward"]], "register_act_fn() (in module cvnets.layers.activation)": [[4, "cvnets.layers.activation.register_act_fn"]], "batchnorm1d (class in cvnets.layers.normalization.batch_norm)": [[5, "cvnets.layers.normalization.batch_norm.BatchNorm1d"]], "batchnorm2d (class in cvnets.layers.normalization.batch_norm)": [[5, "cvnets.layers.normalization.batch_norm.BatchNorm2d"]], "batchnorm2dfp32 (class in cvnets.layers.normalization.batch_norm)": [[5, "cvnets.layers.normalization.batch_norm.BatchNorm2dFP32"]], "batchnorm3d (class in cvnets.layers.normalization.batch_norm)": [[5, "cvnets.layers.normalization.batch_norm.BatchNorm3d"]], "groupnorm (class in cvnets.layers.normalization.group_norm)": [[5, "cvnets.layers.normalization.group_norm.GroupNorm"]], "instancenorm1d (class in cvnets.layers.normalization.instance_norm)": [[5, "cvnets.layers.normalization.instance_norm.InstanceNorm1d"]], "instancenorm2d (class in cvnets.layers.normalization.instance_norm)": [[5, "cvnets.layers.normalization.instance_norm.InstanceNorm2d"]], "layernorm (class in cvnets.layers.normalization.layer_norm)": [[5, "cvnets.layers.normalization.layer_norm.LayerNorm"]], "layernorm2d_nchw (class in cvnets.layers.normalization.layer_norm)": [[5, "cvnets.layers.normalization.layer_norm.LayerNorm2D_NCHW"]], "layernormfp32 (class in cvnets.layers.normalization.layer_norm)": [[5, "cvnets.layers.normalization.layer_norm.LayerNormFP32"]], "syncbatchnorm (class in cvnets.layers.normalization.sync_batch_norm)": [[5, "cvnets.layers.normalization.sync_batch_norm.SyncBatchNorm"]], "syncbatchnormfp32 (class in cvnets.layers.normalization.sync_batch_norm)": [[5, "cvnets.layers.normalization.sync_batch_norm.SyncBatchNormFP32"]], "__init__() (cvnets.layers.normalization.batch_norm.batchnorm1d method)": [[5, "cvnets.layers.normalization.batch_norm.BatchNorm1d.__init__"]], "__init__() (cvnets.layers.normalization.batch_norm.batchnorm2d method)": [[5, "cvnets.layers.normalization.batch_norm.BatchNorm2d.__init__"]], "__init__() (cvnets.layers.normalization.batch_norm.batchnorm2dfp32 method)": [[5, "cvnets.layers.normalization.batch_norm.BatchNorm2dFP32.__init__"]], "__init__() (cvnets.layers.normalization.batch_norm.batchnorm3d method)": [[5, "cvnets.layers.normalization.batch_norm.BatchNorm3d.__init__"]], "__init__() (cvnets.layers.normalization.group_norm.groupnorm method)": [[5, "cvnets.layers.normalization.group_norm.GroupNorm.__init__"]], "__init__() (cvnets.layers.normalization.instance_norm.instancenorm1d method)": [[5, "cvnets.layers.normalization.instance_norm.InstanceNorm1d.__init__"]], "__init__() (cvnets.layers.normalization.instance_norm.instancenorm2d method)": [[5, "cvnets.layers.normalization.instance_norm.InstanceNorm2d.__init__"]], "__init__() (cvnets.layers.normalization.layer_norm.layernorm method)": [[5, "cvnets.layers.normalization.layer_norm.LayerNorm.__init__"]], "__init__() (cvnets.layers.normalization.layer_norm.layernorm2d_nchw method)": [[5, "cvnets.layers.normalization.layer_norm.LayerNorm2D_NCHW.__init__"]], "__init__() (cvnets.layers.normalization.layer_norm.layernormfp32 method)": [[5, "cvnets.layers.normalization.layer_norm.LayerNormFP32.__init__"]], "__init__() (cvnets.layers.normalization.sync_batch_norm.syncbatchnorm method)": [[5, "cvnets.layers.normalization.sync_batch_norm.SyncBatchNorm.__init__"]], "__init__() (cvnets.layers.normalization.sync_batch_norm.syncbatchnormfp32 method)": [[5, "cvnets.layers.normalization.sync_batch_norm.SyncBatchNormFP32.__init__"]], "arguments_norm_layers() (in module cvnets.layers.normalization)": [[5, "cvnets.layers.normalization.arguments_norm_layers"]], "build_normalization_layer() (in module cvnets.layers.normalization)": [[5, "cvnets.layers.normalization.build_normalization_layer"]], "cvnets.layers.normalization": [[5, "module-cvnets.layers.normalization"]], "cvnets.layers.normalization.batch_norm": [[5, "module-cvnets.layers.normalization.batch_norm"]], "cvnets.layers.normalization.group_norm": [[5, "module-cvnets.layers.normalization.group_norm"]], "cvnets.layers.normalization.instance_norm": [[5, "module-cvnets.layers.normalization.instance_norm"]], "cvnets.layers.normalization.layer_norm": [[5, "module-cvnets.layers.normalization.layer_norm"]], "cvnets.layers.normalization.sync_batch_norm": [[5, "module-cvnets.layers.normalization.sync_batch_norm"]], "forward() (cvnets.layers.normalization.batch_norm.batchnorm2dfp32 method)": [[5, "cvnets.layers.normalization.batch_norm.BatchNorm2dFP32.forward"]], "forward() (cvnets.layers.normalization.layer_norm.layernorm method)": [[5, "cvnets.layers.normalization.layer_norm.LayerNorm.forward"]], "forward() (cvnets.layers.normalization.layer_norm.layernormfp32 method)": [[5, "cvnets.layers.normalization.layer_norm.LayerNormFP32.forward"]], "forward() (cvnets.layers.normalization.sync_batch_norm.syncbatchnormfp32 method)": [[5, "cvnets.layers.normalization.sync_batch_norm.SyncBatchNormFP32.forward"]], "register_norm_fn() (in module cvnets.layers.normalization)": [[5, "cvnets.layers.normalization.register_norm_fn"]], "basematcher (class in cvnets.matcher_det.base_matcher)": [[6, "cvnets.matcher_det.base_matcher.BaseMatcher"]], "ssdmatcher (class in cvnets.matcher_det.ssd_matcher)": [[6, "cvnets.matcher_det.ssd_matcher.SSDMatcher"]], "__init__() (cvnets.matcher_det.base_matcher.basematcher method)": [[6, "cvnets.matcher_det.base_matcher.BaseMatcher.__init__"]], "__init__() (cvnets.matcher_det.ssd_matcher.ssdmatcher method)": [[6, "cvnets.matcher_det.ssd_matcher.SSDMatcher.__init__"]], "add_arguments() (cvnets.matcher_det.base_matcher.basematcher class method)": [[6, "cvnets.matcher_det.base_matcher.BaseMatcher.add_arguments"]], "add_arguments() (cvnets.matcher_det.ssd_matcher.ssdmatcher class method)": [[6, "cvnets.matcher_det.ssd_matcher.SSDMatcher.add_arguments"]], "arguments_box_matcher() (in module cvnets.matcher_det)": [[6, "cvnets.matcher_det.arguments_box_matcher"]], "build_matcher() (in module cvnets.matcher_det)": [[6, "cvnets.matcher_det.build_matcher"]], "check_variable() (in module cvnets.matcher_det.ssd_matcher)": [[6, "cvnets.matcher_det.ssd_matcher.check_variable"]], "convert_to_boxes() (cvnets.matcher_det.ssd_matcher.ssdmatcher method)": [[6, "cvnets.matcher_det.ssd_matcher.SSDMatcher.convert_to_boxes"]], "cvnets.matcher_det": [[6, "module-cvnets.matcher_det"]], "cvnets.matcher_det.base_matcher": [[6, "module-cvnets.matcher_det.base_matcher"]], "cvnets.matcher_det.ssd_matcher": [[6, "module-cvnets.matcher_det.ssd_matcher"]], "ema (class in cvnets.misc.averaging_utils)": [[7, "cvnets.misc.averaging_utils.EMA"]], "__init__() (cvnets.misc.averaging_utils.ema method)": [[7, "cvnets.misc.averaging_utils.EMA.__init__"]], "arguments_ema() (in module cvnets.misc.averaging_utils)": [[7, "cvnets.misc.averaging_utils.arguments_ema"]], "center_form_to_corner_form() (in module cvnets.misc.box_utils)": [[7, "cvnets.misc.box_utils.center_form_to_corner_form"]], "clean_strip() (in module cvnets.misc.common)": [[7, "cvnets.misc.common.clean_strip"]], "convert_boxes_to_locations() (in module cvnets.misc.box_utils)": [[7, "cvnets.misc.box_utils.convert_boxes_to_locations"]], "convert_locations_to_boxes() (in module cvnets.misc.box_utils)": [[7, "cvnets.misc.box_utils.convert_locations_to_boxes"]], "corner_form_to_center_form() (in module cvnets.misc.box_utils)": [[7, "cvnets.misc.box_utils.corner_form_to_center_form"]], "cvnets.misc": [[7, "module-cvnets.misc"]], "cvnets.misc.averaging_utils": [[7, "module-cvnets.misc.averaging_utils"]], "cvnets.misc.box_utils": [[7, "module-cvnets.misc.box_utils"]], "cvnets.misc.common": [[7, "module-cvnets.misc.common"]], "cvnets.misc.init_utils": [[7, "module-cvnets.misc.init_utils"]], "freeze_module() (in module cvnets.misc.common)": [[7, "cvnets.misc.common.freeze_module"]], "freeze_modules_based_on_opts() (in module cvnets.misc.common)": [[7, "cvnets.misc.common.freeze_modules_based_on_opts"]], "get_tensor_sizes() (in module cvnets.misc.common)": [[7, "cvnets.misc.common.get_tensor_sizes"]], "initialize_conv_layer() (in module cvnets.misc.init_utils)": [[7, "cvnets.misc.init_utils.initialize_conv_layer"]], "initialize_fc_layer() (in module cvnets.misc.init_utils)": [[7, "cvnets.misc.init_utils.initialize_fc_layer"]], "initialize_norm_layers() (in module cvnets.misc.init_utils)": [[7, "cvnets.misc.init_utils.initialize_norm_layers"]], "initialize_weights() (in module cvnets.misc.init_utils)": [[7, "cvnets.misc.init_utils.initialize_weights"]], "load_pretrained_model() (in module cvnets.misc.common)": [[7, "cvnets.misc.common.load_pretrained_model"]], "parameter_list() (in module cvnets.misc.common)": [[7, "cvnets.misc.common.parameter_list"]], "update_parameters() (cvnets.misc.averaging_utils.ema method)": [[7, "cvnets.misc.averaging_utils.EMA.update_parameters"]], "assign_priors() (in module cvnets.misc.third_party.ssd_utils)": [[8, "cvnets.misc.third_party.ssd_utils.assign_priors"]], "box_iou() (in module cvnets.misc.third_party.ssd_utils)": [[8, "cvnets.misc.third_party.ssd_utils.box_iou"]], "cvnets.misc.third_party": [[8, "module-cvnets.misc.third_party"]], "cvnets.misc.third_party.ssd_utils": [[8, "module-cvnets.misc.third_party.ssd_utils"]], "hard_negative_mining() (in module cvnets.misc.third_party.ssd_utils)": [[8, "cvnets.misc.third_party.ssd_utils.hard_negative_mining"]], "baseanynnmodel (class in cvnets.models.base_model)": [[9, "cvnets.models.base_model.BaseAnyNNModel"]], "__init__() (cvnets.models.base_model.baseanynnmodel method)": [[9, "cvnets.models.base_model.BaseAnyNNModel.__init__"]], "add_arguments() (cvnets.models.base_model.baseanynnmodel class method)": [[9, "cvnets.models.base_model.BaseAnyNNModel.add_arguments"]], "arguments_model() (in module cvnets.models)": [[9, "cvnets.models.arguments_model"]], "build_model() (cvnets.models.base_model.baseanynnmodel class method)": [[9, "cvnets.models.base_model.BaseAnyNNModel.build_model"]], "cvnets.models": [[9, "module-cvnets.models"]], "cvnets.models.base_model": [[9, "module-cvnets.models.base_model"]], "dummy_input_and_label() (cvnets.models.base_model.baseanynnmodel method)": [[9, "cvnets.models.base_model.BaseAnyNNModel.dummy_input_and_label"]], "forward() (cvnets.models.base_model.baseanynnmodel method)": [[9, "cvnets.models.base_model.BaseAnyNNModel.forward"]], "freeze_norm_layers() (cvnets.models.base_model.baseanynnmodel class method)": [[9, "cvnets.models.base_model.BaseAnyNNModel.freeze_norm_layers"]], "get_exportable_model() (cvnets.models.base_model.baseanynnmodel method)": [[9, "cvnets.models.base_model.BaseAnyNNModel.get_exportable_model"]], "get_model() (in module cvnets.models)": [[9, "cvnets.models.get_model"]], "get_trainable_parameters() (cvnets.models.base_model.baseanynnmodel method)": [[9, "cvnets.models.base_model.BaseAnyNNModel.get_trainable_parameters"]], "info() (cvnets.models.base_model.baseanynnmodel method)": [[9, "cvnets.models.base_model.BaseAnyNNModel.info"]], "reset_parameters() (cvnets.models.base_model.baseanynnmodel method)": [[9, "cvnets.models.base_model.BaseAnyNNModel.reset_parameters"]], "audiobyteformer (class in cvnets.models.audio_classification.audio_byteformer)": [[10, "cvnets.models.audio_classification.audio_byteformer.AudioByteFormer"]], "baseaudioclassification (class in cvnets.models.audio_classification.base_audio_classification)": [[10, "cvnets.models.audio_classification.base_audio_classification.BaseAudioClassification"]], "__init__() (cvnets.models.audio_classification.base_audio_classification.baseaudioclassification method)": [[10, "cvnets.models.audio_classification.base_audio_classification.BaseAudioClassification.__init__"]], "add_arguments() (cvnets.models.audio_classification.base_audio_classification.baseaudioclassification class method)": [[10, "cvnets.models.audio_classification.base_audio_classification.BaseAudioClassification.add_arguments"]], "cvnets.models.audio_classification": [[10, "module-cvnets.models.audio_classification"]], "cvnets.models.audio_classification.audio_byteformer": [[10, "module-cvnets.models.audio_classification.audio_byteformer"]], "cvnets.models.audio_classification.base_audio_classification": [[10, "module-cvnets.models.audio_classification.base_audio_classification"]], "dummy_input_and_label() (cvnets.models.audio_classification.audio_byteformer.audiobyteformer method)": [[10, "cvnets.models.audio_classification.audio_byteformer.AudioByteFormer.dummy_input_and_label"]], "forward() (cvnets.models.audio_classification.audio_byteformer.audiobyteformer method)": [[10, "cvnets.models.audio_classification.audio_byteformer.AudioByteFormer.forward"]], "baseimageencoder (class in cvnets.models.classification.base_image_encoder)": [[11, "cvnets.models.classification.base_image_encoder.BaseImageEncoder"]], "byteformer (class in cvnets.models.classification.byteformer)": [[11, "cvnets.models.classification.byteformer.ByteFormer"]], "efficientnet (class in cvnets.models.classification.efficientnet)": [[11, "cvnets.models.classification.efficientnet.EfficientNet"]], "fastvit (class in cvnets.models.classification.fastvit)": [[11, "cvnets.models.classification.fastvit.FastViT"]], "mobilenetv2 (class in cvnets.models.classification.mobilenetv2)": [[11, "cvnets.models.classification.mobilenetv2.MobileNetV2"]], "mobilenetv3 (class in cvnets.models.classification.mobilenetv3)": [[11, "cvnets.models.classification.mobilenetv3.MobileNetV3"]], "mobilenetv1 (class in cvnets.models.classification.mobilenetv1)": [[11, "cvnets.models.classification.mobilenetv1.MobileNetv1"]], "mobileone (class in cvnets.models.classification.mobileone)": [[11, "cvnets.models.classification.mobileone.MobileOne"]], "mobilevit (class in cvnets.models.classification.mobilevit)": [[11, "cvnets.models.classification.mobilevit.MobileViT"]], "mobilevitv2 (class in cvnets.models.classification.mobilevit_v2)": [[11, "cvnets.models.classification.mobilevit_v2.MobileViTv2"]], "regnet (class in cvnets.models.classification.regnet)": [[11, "cvnets.models.classification.regnet.RegNet"]], "resnet (class in cvnets.models.classification.resnet)": [[11, "cvnets.models.classification.resnet.ResNet"]], "swintransformer (class in cvnets.models.classification.swin_transformer)": [[11, "cvnets.models.classification.swin_transformer.SwinTransformer"]], "visiontransformer (class in cvnets.models.classification.vit)": [[11, "cvnets.models.classification.vit.VisionTransformer"]], "__init__() (cvnets.models.classification.base_image_encoder.baseimageencoder method)": [[11, "cvnets.models.classification.base_image_encoder.BaseImageEncoder.__init__"]], "__init__() (cvnets.models.classification.byteformer.byteformer method)": [[11, "cvnets.models.classification.byteformer.ByteFormer.__init__"]], "__init__() (cvnets.models.classification.efficientnet.efficientnet method)": [[11, "cvnets.models.classification.efficientnet.EfficientNet.__init__"]], "__init__() (cvnets.models.classification.fastvit.fastvit method)": [[11, "cvnets.models.classification.fastvit.FastViT.__init__"]], "__init__() (cvnets.models.classification.mobilenetv1.mobilenetv1 method)": [[11, "cvnets.models.classification.mobilenetv1.MobileNetv1.__init__"]], "__init__() (cvnets.models.classification.mobilenetv2.mobilenetv2 method)": [[11, "cvnets.models.classification.mobilenetv2.MobileNetV2.__init__"]], "__init__() (cvnets.models.classification.mobilenetv3.mobilenetv3 method)": [[11, "cvnets.models.classification.mobilenetv3.MobileNetV3.__init__"]], "__init__() (cvnets.models.classification.mobileone.mobileone method)": [[11, "cvnets.models.classification.mobileone.MobileOne.__init__"]], "__init__() (cvnets.models.classification.mobilevit.mobilevit method)": [[11, "cvnets.models.classification.mobilevit.MobileViT.__init__"]], "__init__() (cvnets.models.classification.mobilevit_v2.mobilevitv2 method)": [[11, "cvnets.models.classification.mobilevit_v2.MobileViTv2.__init__"]], "__init__() (cvnets.models.classification.regnet.regnet method)": [[11, "cvnets.models.classification.regnet.RegNet.__init__"]], "__init__() (cvnets.models.classification.resnet.resnet method)": [[11, "cvnets.models.classification.resnet.ResNet.__init__"]], "__init__() (cvnets.models.classification.swin_transformer.swintransformer method)": [[11, "cvnets.models.classification.swin_transformer.SwinTransformer.__init__"]], "__init__() (cvnets.models.classification.vit.visiontransformer method)": [[11, "cvnets.models.classification.vit.VisionTransformer.__init__"]], "add_arguments() (cvnets.models.classification.base_image_encoder.baseimageencoder class method)": [[11, "cvnets.models.classification.base_image_encoder.BaseImageEncoder.add_arguments"]], "add_arguments() (cvnets.models.classification.byteformer.byteformer class method)": [[11, "cvnets.models.classification.byteformer.ByteFormer.add_arguments"]], "add_arguments() (cvnets.models.classification.efficientnet.efficientnet class method)": [[11, "cvnets.models.classification.efficientnet.EfficientNet.add_arguments"]], "add_arguments() (cvnets.models.classification.fastvit.fastvit class method)": [[11, "cvnets.models.classification.fastvit.FastViT.add_arguments"]], "add_arguments() (cvnets.models.classification.mobilenetv1.mobilenetv1 class method)": [[11, "cvnets.models.classification.mobilenetv1.MobileNetv1.add_arguments"]], "add_arguments() (cvnets.models.classification.mobilenetv2.mobilenetv2 class method)": [[11, "cvnets.models.classification.mobilenetv2.MobileNetV2.add_arguments"]], "add_arguments() (cvnets.models.classification.mobilenetv3.mobilenetv3 class method)": [[11, "cvnets.models.classification.mobilenetv3.MobileNetV3.add_arguments"]], "add_arguments() (cvnets.models.classification.mobileone.mobileone class method)": [[11, "cvnets.models.classification.mobileone.MobileOne.add_arguments"]], "add_arguments() (cvnets.models.classification.mobilevit.mobilevit class method)": [[11, "cvnets.models.classification.mobilevit.MobileViT.add_arguments"]], "add_arguments() (cvnets.models.classification.mobilevit_v2.mobilevitv2 class method)": [[11, "cvnets.models.classification.mobilevit_v2.MobileViTv2.add_arguments"]], "add_arguments() (cvnets.models.classification.regnet.regnet class method)": [[11, "cvnets.models.classification.regnet.RegNet.add_arguments"]], "add_arguments() (cvnets.models.classification.resnet.resnet class method)": [[11, "cvnets.models.classification.resnet.ResNet.add_arguments"]], "add_arguments() (cvnets.models.classification.swin_transformer.swintransformer class method)": [[11, "cvnets.models.classification.swin_transformer.SwinTransformer.add_arguments"]], "add_arguments() (cvnets.models.classification.vit.visiontransformer class method)": [[11, "cvnets.models.classification.vit.VisionTransformer.add_arguments"]], "apply_token_reduction_net() (cvnets.models.classification.byteformer.byteformer method)": [[11, "cvnets.models.classification.byteformer.ByteFormer.apply_token_reduction_net"]], "backbone_forward() (cvnets.models.classification.byteformer.byteformer method)": [[11, "cvnets.models.classification.byteformer.ByteFormer.backbone_forward"]], "basic_blocks() (in module cvnets.models.classification.fastvit)": [[11, "cvnets.models.classification.fastvit.basic_blocks"]], "build_model() (cvnets.models.classification.base_image_encoder.baseimageencoder class method)": [[11, "cvnets.models.classification.base_image_encoder.BaseImageEncoder.build_model"]], "build_model() (cvnets.models.classification.byteformer.byteformer class method)": [[11, "cvnets.models.classification.byteformer.ByteFormer.build_model"]], "check_model() (cvnets.models.classification.base_image_encoder.baseimageencoder method)": [[11, "cvnets.models.classification.base_image_encoder.BaseImageEncoder.check_model"]], "cvnets.models.classification": [[11, "module-cvnets.models.classification"]], "cvnets.models.classification.base_image_encoder": [[11, "module-cvnets.models.classification.base_image_encoder"]], "cvnets.models.classification.byteformer": [[11, "module-cvnets.models.classification.byteformer"]], "cvnets.models.classification.efficientnet": [[11, "module-cvnets.models.classification.efficientnet"]], "cvnets.models.classification.fastvit": [[11, "module-cvnets.models.classification.fastvit"]], "cvnets.models.classification.mobilenetv1": [[11, "module-cvnets.models.classification.mobilenetv1"]], "cvnets.models.classification.mobilenetv2": [[11, "module-cvnets.models.classification.mobilenetv2"]], "cvnets.models.classification.mobilenetv3": [[11, "module-cvnets.models.classification.mobilenetv3"]], "cvnets.models.classification.mobileone": [[11, "module-cvnets.models.classification.mobileone"]], "cvnets.models.classification.mobilevit": [[11, "module-cvnets.models.classification.mobilevit"]], "cvnets.models.classification.mobilevit_v2": [[11, "module-cvnets.models.classification.mobilevit_v2"]], "cvnets.models.classification.regnet": [[11, "module-cvnets.models.classification.regnet"]], "cvnets.models.classification.resnet": [[11, "module-cvnets.models.classification.resnet"]], "cvnets.models.classification.swin_transformer": [[11, "module-cvnets.models.classification.swin_transformer"]], "cvnets.models.classification.vit": [[11, "module-cvnets.models.classification.vit"]], "dummy_input_and_label() (cvnets.models.classification.base_image_encoder.baseimageencoder method)": [[11, "cvnets.models.classification.base_image_encoder.BaseImageEncoder.dummy_input_and_label"]], "dummy_input_and_label() (cvnets.models.classification.byteformer.byteformer method)": [[11, "cvnets.models.classification.byteformer.ByteFormer.dummy_input_and_label"]], "extract_end_points_all() (cvnets.models.classification.base_image_encoder.baseimageencoder method)": [[11, "cvnets.models.classification.base_image_encoder.BaseImageEncoder.extract_end_points_all"]], "extract_end_points_all() (cvnets.models.classification.swin_transformer.swintransformer method)": [[11, "cvnets.models.classification.swin_transformer.SwinTransformer.extract_end_points_all"]], "extract_end_points_all() (cvnets.models.classification.vit.visiontransformer method)": [[11, "cvnets.models.classification.vit.VisionTransformer.extract_end_points_all"]], "extract_end_points_l4() (cvnets.models.classification.base_image_encoder.baseimageencoder method)": [[11, "cvnets.models.classification.base_image_encoder.BaseImageEncoder.extract_end_points_l4"]], "extract_features() (cvnets.models.classification.base_image_encoder.baseimageencoder method)": [[11, "cvnets.models.classification.base_image_encoder.BaseImageEncoder.extract_features"]], "extract_features() (cvnets.models.classification.vit.visiontransformer method)": [[11, "cvnets.models.classification.vit.VisionTransformer.extract_features"]], "extract_patch_embeddings() (cvnets.models.classification.vit.visiontransformer method)": [[11, "cvnets.models.classification.vit.VisionTransformer.extract_patch_embeddings"]], "forward() (cvnets.models.classification.base_image_encoder.baseimageencoder method)": [[11, "cvnets.models.classification.base_image_encoder.BaseImageEncoder.forward"]], "forward() (cvnets.models.classification.byteformer.byteformer method)": [[11, "cvnets.models.classification.byteformer.ByteFormer.forward"]], "forward() (cvnets.models.classification.vit.visiontransformer method)": [[11, "cvnets.models.classification.vit.VisionTransformer.forward"]], "forward_classifier() (cvnets.models.classification.base_image_encoder.baseimageencoder method)": [[11, "cvnets.models.classification.base_image_encoder.BaseImageEncoder.forward_classifier"]], "forward_classifier() (cvnets.models.classification.vit.visiontransformer method)": [[11, "cvnets.models.classification.vit.VisionTransformer.forward_classifier"]], "get_backbone_inputs() (cvnets.models.classification.byteformer.byteformer method)": [[11, "cvnets.models.classification.byteformer.ByteFormer.get_backbone_inputs"]], "get_downsampler() (cvnets.models.classification.byteformer.byteformer method)": [[11, "cvnets.models.classification.byteformer.ByteFormer.get_downsampler"]], "get_downsampler_name() (cvnets.models.classification.byteformer.byteformer method)": [[11, "cvnets.models.classification.byteformer.ByteFormer.get_downsampler_name"]], "get_exportable_model() (cvnets.models.classification.base_image_encoder.baseimageencoder method)": [[11, "cvnets.models.classification.base_image_encoder.BaseImageEncoder.get_exportable_model"]], "get_exportable_model() (cvnets.models.classification.fastvit.fastvit method)": [[11, "cvnets.models.classification.fastvit.FastViT.get_exportable_model"]], "get_exportable_model() (cvnets.models.classification.mobileone.mobileone method)": [[11, "cvnets.models.classification.mobileone.MobileOne.get_exportable_model"]], "get_trainable_parameters() (cvnets.models.classification.base_image_encoder.baseimageencoder method)": [[11, "cvnets.models.classification.base_image_encoder.BaseImageEncoder.get_trainable_parameters"]], "reset_simple_fpn_params() (cvnets.models.classification.vit.visiontransformer method)": [[11, "cvnets.models.classification.vit.VisionTransformer.reset_simple_fpn_params"]], "set_model_specific_opts_before_model_building() (in module cvnets.models.classification.base_image_encoder)": [[11, "cvnets.models.classification.base_image_encoder.set_model_specific_opts_before_model_building"]], "unfold_tokens() (in module cvnets.models.classification.byteformer)": [[11, "cvnets.models.classification.byteformer.unfold_tokens"]], "unset_model_specific_opts_after_model_building() (in module cvnets.models.classification.base_image_encoder)": [[11, "cvnets.models.classification.base_image_encoder.unset_model_specific_opts_after_model_building"]], "update_classifier() (cvnets.models.classification.base_image_encoder.baseimageencoder method)": [[11, "cvnets.models.classification.base_image_encoder.BaseImageEncoder.update_classifier"]], "update_layer_norm_eps() (cvnets.models.classification.vit.visiontransformer method)": [[11, "cvnets.models.classification.vit.VisionTransformer.update_layer_norm_eps"]], "blockparamsconfig (class in cvnets.models.classification.config.regnet)": [[12, "cvnets.models.classification.config.regnet.BlockParamsConfig"]], "compoundscalingconfig (class in cvnets.models.classification.config.efficientnet)": [[12, "cvnets.models.classification.config.efficientnet.CompoundScalingConfig"]], "efficientnetblockconfig (class in cvnets.models.classification.config.efficientnet)": [[12, "cvnets.models.classification.config.efficientnet.EfficientNetBlockConfig"]], "__init__() (cvnets.models.classification.config.efficientnet.compoundscalingconfig method)": [[12, "cvnets.models.classification.config.efficientnet.CompoundScalingConfig.__init__"]], "__init__() (cvnets.models.classification.config.efficientnet.efficientnetblockconfig method)": [[12, "cvnets.models.classification.config.efficientnet.EfficientNetBlockConfig.__init__"]], "__init__() (cvnets.models.classification.config.regnet.blockparamsconfig method)": [[12, "cvnets.models.classification.config.regnet.BlockParamsConfig.__init__"]], "add_squeeze_channels() (in module cvnets.models.classification.config.resnet)": [[12, "cvnets.models.classification.config.resnet.add_squeeze_channels"]], "cvnets.models.classification.config": [[12, "module-cvnets.models.classification.config"]], "cvnets.models.classification.config.byteformer": [[12, "module-cvnets.models.classification.config.byteformer"]], "cvnets.models.classification.config.efficientnet": [[12, "module-cvnets.models.classification.config.efficientnet"]], "cvnets.models.classification.config.fastvit": [[12, "module-cvnets.models.classification.config.fastvit"]], "cvnets.models.classification.config.mobilenetv1": [[12, "module-cvnets.models.classification.config.mobilenetv1"]], "cvnets.models.classification.config.mobilenetv2": [[12, "module-cvnets.models.classification.config.mobilenetv2"]], "cvnets.models.classification.config.mobilenetv3": [[12, "module-cvnets.models.classification.config.mobilenetv3"]], "cvnets.models.classification.config.mobileone": [[12, "module-cvnets.models.classification.config.mobileone"]], "cvnets.models.classification.config.mobilevit": [[12, "module-cvnets.models.classification.config.mobilevit"]], "cvnets.models.classification.config.mobilevit_v2": [[12, "module-cvnets.models.classification.config.mobilevit_v2"]], "cvnets.models.classification.config.regnet": [[12, "module-cvnets.models.classification.config.regnet"]], "cvnets.models.classification.config.resnet": [[12, "module-cvnets.models.classification.config.resnet"]], "cvnets.models.classification.config.swin_transformer": [[12, "module-cvnets.models.classification.config.swin_transformer"]], "cvnets.models.classification.config.vit": [[12, "module-cvnets.models.classification.config.vit"]], "depth_mult (cvnets.models.classification.config.efficientnet.compoundscalingconfig attribute)": [[12, "cvnets.models.classification.config.efficientnet.CompoundScalingConfig.depth_mult"]], "extra_repr() (cvnets.models.classification.config.regnet.blockparamsconfig method)": [[12, "cvnets.models.classification.config.regnet.BlockParamsConfig.extra_repr"]], "get_configuration() (in module cvnets.models.classification.config.byteformer)": [[12, "cvnets.models.classification.config.byteformer.get_configuration"]], "get_configuration() (in module cvnets.models.classification.config.efficientnet)": [[12, "cvnets.models.classification.config.efficientnet.get_configuration"]], "get_configuration() (in module cvnets.models.classification.config.fastvit)": [[12, "cvnets.models.classification.config.fastvit.get_configuration"]], "get_configuration() (in module cvnets.models.classification.config.mobilenetv1)": [[12, "cvnets.models.classification.config.mobilenetv1.get_configuration"]], "get_configuration() (in module cvnets.models.classification.config.mobilenetv2)": [[12, "cvnets.models.classification.config.mobilenetv2.get_configuration"]], "get_configuration() (in module cvnets.models.classification.config.mobilenetv3)": [[12, "cvnets.models.classification.config.mobilenetv3.get_configuration"]], "get_configuration() (in module cvnets.models.classification.config.mobileone)": [[12, "cvnets.models.classification.config.mobileone.get_configuration"]], "get_configuration() (in module cvnets.models.classification.config.mobilevit)": [[12, "cvnets.models.classification.config.mobilevit.get_configuration"]], "get_configuration() (in module cvnets.models.classification.config.mobilevit_v2)": [[12, "cvnets.models.classification.config.mobilevit_v2.get_configuration"]], "get_configuration() (in module cvnets.models.classification.config.regnet)": [[12, "cvnets.models.classification.config.regnet.get_configuration"]], "get_configuration() (in module cvnets.models.classification.config.resnet)": [[12, "cvnets.models.classification.config.resnet.get_configuration"]], "get_configuration() (in module cvnets.models.classification.config.swin_transformer)": [[12, "cvnets.models.classification.config.swin_transformer.get_configuration"]], "get_configuration() (in module cvnets.models.classification.config.vit)": [[12, "cvnets.models.classification.config.vit.get_configuration"]], "train_resolution (cvnets.models.classification.config.efficientnet.compoundscalingconfig attribute)": [[12, "cvnets.models.classification.config.efficientnet.CompoundScalingConfig.train_resolution"]], "width_mult (cvnets.models.classification.config.efficientnet.compoundscalingconfig attribute)": [[12, "cvnets.models.classification.config.efficientnet.CompoundScalingConfig.width_mult"]], "basedetection (class in cvnets.models.detection.base_detection)": [[13, "cvnets.models.detection.base_detection.BaseDetection"]], "detectionpredtuple (class in cvnets.models.detection)": [[13, "cvnets.models.detection.DetectionPredTuple"]], "maskrcnndetector (class in cvnets.models.detection.mask_rcnn)": [[13, "cvnets.models.detection.mask_rcnn.MaskRCNNDetector"]], "maskrcnnencoder (class in cvnets.models.detection.mask_rcnn)": [[13, "cvnets.models.detection.mask_rcnn.MaskRCNNEncoder"]], "singleshotmaskdetector (class in cvnets.models.detection.ssd)": [[13, "cvnets.models.detection.ssd.SingleShotMaskDetector"]], "__init__() (cvnets.models.detection.base_detection.basedetection method)": [[13, "cvnets.models.detection.base_detection.BaseDetection.__init__"]], "__init__() (cvnets.models.detection.mask_rcnn.maskrcnndetector method)": [[13, "cvnets.models.detection.mask_rcnn.MaskRCNNDetector.__init__"]], "__init__() (cvnets.models.detection.mask_rcnn.maskrcnnencoder method)": [[13, "cvnets.models.detection.mask_rcnn.MaskRCNNEncoder.__init__"]], "__init__() (cvnets.models.detection.ssd.singleshotmaskdetector method)": [[13, "cvnets.models.detection.ssd.SingleShotMaskDetector.__init__"]], "add_arguments() (cvnets.models.detection.base_detection.basedetection class method)": [[13, "cvnets.models.detection.base_detection.BaseDetection.add_arguments"]], "add_arguments() (cvnets.models.detection.mask_rcnn.maskrcnndetector class method)": [[13, "cvnets.models.detection.mask_rcnn.MaskRCNNDetector.add_arguments"]], "add_arguments() (cvnets.models.detection.ssd.singleshotmaskdetector class method)": [[13, "cvnets.models.detection.ssd.SingleShotMaskDetector.add_arguments"]], "boxes (cvnets.models.detection.detectionpredtuple attribute)": [[13, "cvnets.models.detection.DetectionPredTuple.boxes"]], "build_model() (cvnets.models.detection.base_detection.basedetection class method)": [[13, "cvnets.models.detection.base_detection.BaseDetection.build_model"]], "check_feature_map_output_channels() (in module cvnets.models.detection.base_detection)": [[13, "cvnets.models.detection.base_detection.check_feature_map_output_channels"]], "coordinates (cvnets.models.detection.ssd.singleshotmaskdetector attribute)": [[13, "cvnets.models.detection.ssd.SingleShotMaskDetector.coordinates"]], "cvnets.models.detection": [[13, "module-cvnets.models.detection"]], "cvnets.models.detection.base_detection": [[13, "module-cvnets.models.detection.base_detection"]], "cvnets.models.detection.mask_rcnn": [[13, "module-cvnets.models.detection.mask_rcnn"]], "cvnets.models.detection.ssd": [[13, "module-cvnets.models.detection.ssd"]], "dummy_input_and_label() (cvnets.models.detection.mask_rcnn.maskrcnndetector method)": [[13, "cvnets.models.detection.mask_rcnn.MaskRCNNDetector.dummy_input_and_label"]], "dummy_input_and_label() (cvnets.models.detection.ssd.singleshotmaskdetector method)": [[13, "cvnets.models.detection.ssd.SingleShotMaskDetector.dummy_input_and_label"]], "forward() (cvnets.models.detection.mask_rcnn.maskrcnndetector method)": [[13, "cvnets.models.detection.mask_rcnn.MaskRCNNDetector.forward"]], "forward() (cvnets.models.detection.mask_rcnn.maskrcnnencoder method)": [[13, "cvnets.models.detection.mask_rcnn.MaskRCNNEncoder.forward"]], "forward() (cvnets.models.detection.ssd.singleshotmaskdetector method)": [[13, "cvnets.models.detection.ssd.SingleShotMaskDetector.forward"]], "get_augmented_tensor() (cvnets.models.detection.mask_rcnn.maskrcnnencoder method)": [[13, "cvnets.models.detection.mask_rcnn.MaskRCNNEncoder.get_augmented_tensor"]], "get_backbone_features() (cvnets.models.detection.ssd.singleshotmaskdetector method)": [[13, "cvnets.models.detection.ssd.SingleShotMaskDetector.get_backbone_features"]], "get_trainable_parameters() (cvnets.models.detection.mask_rcnn.maskrcnndetector method)": [[13, "cvnets.models.detection.mask_rcnn.MaskRCNNDetector.get_trainable_parameters"]], "get_trainable_parameters() (cvnets.models.detection.mask_rcnn.maskrcnnencoder method)": [[13, "cvnets.models.detection.mask_rcnn.MaskRCNNEncoder.get_trainable_parameters"]], "labels (cvnets.models.detection.detectionpredtuple attribute)": [[13, "cvnets.models.detection.DetectionPredTuple.labels"]], "masks (cvnets.models.detection.detectionpredtuple attribute)": [[13, "cvnets.models.detection.DetectionPredTuple.masks"]], "postprocess_detections() (cvnets.models.detection.ssd.singleshotmaskdetector method)": [[13, "cvnets.models.detection.ssd.SingleShotMaskDetector.postprocess_detections"]], "predict() (cvnets.models.detection.mask_rcnn.maskrcnndetector method)": [[13, "cvnets.models.detection.mask_rcnn.MaskRCNNDetector.predict"]], "predict() (cvnets.models.detection.ssd.singleshotmaskdetector method)": [[13, "cvnets.models.detection.ssd.SingleShotMaskDetector.predict"]], "process_anchors_ar() (cvnets.models.detection.ssd.singleshotmaskdetector static method)": [[13, "cvnets.models.detection.ssd.SingleShotMaskDetector.process_anchors_ar"]], "reset_generalized_rcnn_transform() (cvnets.models.detection.mask_rcnn.maskrcnndetector method)": [[13, "cvnets.models.detection.mask_rcnn.MaskRCNNDetector.reset_generalized_rcnn_transform"]], "reset_layer_parameters() (cvnets.models.detection.base_detection.basedetection static method)": [[13, "cvnets.models.detection.base_detection.BaseDetection.reset_layer_parameters"]], "reset_layers() (cvnets.models.detection.ssd.singleshotmaskdetector static method)": [[13, "cvnets.models.detection.ssd.SingleShotMaskDetector.reset_layers"]], "reset_norm_layer_opts() (cvnets.models.detection.mask_rcnn.maskrcnndetector method)": [[13, "cvnets.models.detection.mask_rcnn.MaskRCNNDetector.reset_norm_layer_opts"]], "scores (cvnets.models.detection.detectionpredtuple attribute)": [[13, "cvnets.models.detection.DetectionPredTuple.scores"]], "set_norm_layer_opts() (cvnets.models.detection.mask_rcnn.maskrcnndetector method)": [[13, "cvnets.models.detection.mask_rcnn.MaskRCNNDetector.set_norm_layer_opts"]], "ssd_forward() (cvnets.models.detection.ssd.singleshotmaskdetector method)": [[13, "cvnets.models.detection.ssd.SingleShotMaskDetector.ssd_forward"]], "update_layer_norm_eps() (cvnets.models.detection.mask_rcnn.maskrcnndetector method)": [[13, "cvnets.models.detection.mask_rcnn.MaskRCNNDetector.update_layer_norm_eps"]], "fastrcnnconvfchead (class in cvnets.models.detection.utils.rcnn_utils)": [[14, "cvnets.models.detection.utils.rcnn_utils.FastRCNNConvFCHead"]], "fastrcnnpredictor (class in cvnets.models.detection.utils.rcnn_utils)": [[14, "cvnets.models.detection.utils.rcnn_utils.FastRCNNPredictor"]], "maskrcnnheads (class in cvnets.models.detection.utils.rcnn_utils)": [[14, "cvnets.models.detection.utils.rcnn_utils.MaskRCNNHeads"]], "maskrcnnpredictor (class in cvnets.models.detection.utils.rcnn_utils)": [[14, "cvnets.models.detection.utils.rcnn_utils.MaskRCNNPredictor"]], "rpnhead (class in cvnets.models.detection.utils.rcnn_utils)": [[14, "cvnets.models.detection.utils.rcnn_utils.RPNHead"]], "__init__() (cvnets.models.detection.utils.rcnn_utils.fastrcnnconvfchead method)": [[14, "cvnets.models.detection.utils.rcnn_utils.FastRCNNConvFCHead.__init__"]], "__init__() (cvnets.models.detection.utils.rcnn_utils.fastrcnnpredictor method)": [[14, "cvnets.models.detection.utils.rcnn_utils.FastRCNNPredictor.__init__"]], "__init__() (cvnets.models.detection.utils.rcnn_utils.maskrcnnheads method)": [[14, "cvnets.models.detection.utils.rcnn_utils.MaskRCNNHeads.__init__"]], "__init__() (cvnets.models.detection.utils.rcnn_utils.maskrcnnpredictor method)": [[14, "cvnets.models.detection.utils.rcnn_utils.MaskRCNNPredictor.__init__"]], "__init__() (cvnets.models.detection.utils.rcnn_utils.rpnhead method)": [[14, "cvnets.models.detection.utils.rcnn_utils.RPNHead.__init__"]], "cvnets.models.detection.utils": [[14, "module-cvnets.models.detection.utils"]], "cvnets.models.detection.utils.rcnn_utils": [[14, "module-cvnets.models.detection.utils.rcnn_utils"]], "forward() (cvnets.models.detection.utils.rcnn_utils.fastrcnnpredictor method)": [[14, "cvnets.models.detection.utils.rcnn_utils.FastRCNNPredictor.forward"]], "forward() (cvnets.models.detection.utils.rcnn_utils.rpnhead method)": [[14, "cvnets.models.detection.utils.rcnn_utils.RPNHead.forward"]], "replace_syncbn_with_syncbnfp32() (in module cvnets.models.detection.utils.rcnn_utils)": [[14, "cvnets.models.detection.utils.rcnn_utils.replace_syncbn_with_syncbnfp32"]], "basemultimodalimagetext (class in cvnets.models.multi_modal_img_text.base_multi_modal_img_text)": [[15, "cvnets.models.multi_modal_img_text.base_multi_modal_img_text.BaseMultiModalImageText"]], "clip (class in cvnets.models.multi_modal_img_text.clip)": [[15, "cvnets.models.multi_modal_img_text.clip.CLIP"]], "__init__() (cvnets.models.multi_modal_img_text.base_multi_modal_img_text.basemultimodalimagetext method)": [[15, "cvnets.models.multi_modal_img_text.base_multi_modal_img_text.BaseMultiModalImageText.__init__"]], "__init__() (cvnets.models.multi_modal_img_text.clip.clip method)": [[15, "cvnets.models.multi_modal_img_text.clip.CLIP.__init__"]], "add_arguments() (cvnets.models.multi_modal_img_text.base_multi_modal_img_text.basemultimodalimagetext class method)": [[15, "cvnets.models.multi_modal_img_text.base_multi_modal_img_text.BaseMultiModalImageText.add_arguments"]], "add_arguments() (cvnets.models.multi_modal_img_text.clip.clip class method)": [[15, "cvnets.models.multi_modal_img_text.clip.CLIP.add_arguments"]], "build_model() (cvnets.models.multi_modal_img_text.clip.clip class method)": [[15, "cvnets.models.multi_modal_img_text.clip.CLIP.build_model"]], "cvnets.models.multi_modal_img_text": [[15, "module-cvnets.models.multi_modal_img_text"]], "cvnets.models.multi_modal_img_text.base_multi_modal_img_text": [[15, "module-cvnets.models.multi_modal_img_text.base_multi_modal_img_text"]], "cvnets.models.multi_modal_img_text.clip": [[15, "module-cvnets.models.multi_modal_img_text.clip"]], "dummy_input_and_label() (cvnets.models.multi_modal_img_text.clip.clip method)": [[15, "cvnets.models.multi_modal_img_text.clip.CLIP.dummy_input_and_label"]], "forward() (cvnets.models.multi_modal_img_text.clip.clip method)": [[15, "cvnets.models.multi_modal_img_text.clip.CLIP.forward"]], "get_trainable_parameters() (cvnets.models.multi_modal_img_text.clip.clip method)": [[15, "cvnets.models.multi_modal_img_text.clip.CLIP.get_trainable_parameters"]], "reset_parameters() (cvnets.models.multi_modal_img_text.clip.clip method)": [[15, "cvnets.models.multi_modal_img_text.clip.CLIP.reset_parameters"]], "update_image_classifier() (in module cvnets.models.multi_modal_img_text.clip)": [[15, "cvnets.models.multi_modal_img_text.clip.update_image_classifier"]], "basesegmentation (class in cvnets.models.segmentation.base_seg)": [[16, "cvnets.models.segmentation.base_seg.BaseSegmentation"]], "segencoderdecoder (class in cvnets.models.segmentation.enc_dec)": [[16, "cvnets.models.segmentation.enc_dec.SegEncoderDecoder"]], "__init__() (cvnets.models.segmentation.base_seg.basesegmentation method)": [[16, "cvnets.models.segmentation.base_seg.BaseSegmentation.__init__"]], "__init__() (cvnets.models.segmentation.enc_dec.segencoderdecoder method)": [[16, "cvnets.models.segmentation.enc_dec.SegEncoderDecoder.__init__"]], "add_arguments() (cvnets.models.segmentation.base_seg.basesegmentation class method)": [[16, "cvnets.models.segmentation.base_seg.BaseSegmentation.add_arguments"]], "build_model() (cvnets.models.segmentation.enc_dec.segencoderdecoder class method)": [[16, "cvnets.models.segmentation.enc_dec.SegEncoderDecoder.build_model"]], "cvnets.models.segmentation": [[16, "module-cvnets.models.segmentation"]], "cvnets.models.segmentation.base_seg": [[16, "module-cvnets.models.segmentation.base_seg"]], "cvnets.models.segmentation.enc_dec": [[16, "module-cvnets.models.segmentation.enc_dec"]], "dummy_input_and_label() (cvnets.models.segmentation.base_seg.basesegmentation method)": [[16, "cvnets.models.segmentation.base_seg.BaseSegmentation.dummy_input_and_label"]], "forward() (cvnets.models.segmentation.enc_dec.segencoderdecoder method)": [[16, "cvnets.models.segmentation.enc_dec.SegEncoderDecoder.forward"]], "get_trainable_parameters() (cvnets.models.segmentation.enc_dec.segencoderdecoder method)": [[16, "cvnets.models.segmentation.enc_dec.SegEncoderDecoder.get_trainable_parameters"]], "maybe_seg_norm_layer() (cvnets.models.segmentation.base_seg.basesegmentation method)": [[16, "cvnets.models.segmentation.base_seg.BaseSegmentation.maybe_seg_norm_layer"]], "set_default_norm_layer() (cvnets.models.segmentation.base_seg.basesegmentation method)": [[16, "cvnets.models.segmentation.base_seg.BaseSegmentation.set_default_norm_layer"]], "set_model_specific_opts_before_model_building() (cvnets.models.segmentation.base_seg.basesegmentation class method)": [[16, "cvnets.models.segmentation.base_seg.BaseSegmentation.set_model_specific_opts_before_model_building"]], "set_model_specific_opts_before_model_building() (in module cvnets.models.segmentation.base_seg)": [[16, "cvnets.models.segmentation.base_seg.set_model_specific_opts_before_model_building"]], "unset_model_specific_opts_after_model_building() (in module cvnets.models.segmentation.base_seg)": [[16, "cvnets.models.segmentation.base_seg.unset_model_specific_opts_after_model_building"]], "update_classifier() (cvnets.models.segmentation.base_seg.basesegmentation method)": [[16, "cvnets.models.segmentation.base_seg.BaseSegmentation.update_classifier"]], "update_classifier() (cvnets.models.segmentation.enc_dec.segencoderdecoder method)": [[16, "cvnets.models.segmentation.enc_dec.SegEncoderDecoder.update_classifier"]], "baseseghead (class in cvnets.models.segmentation.heads.base_seg_head)": [[17, "cvnets.models.segmentation.heads.base_seg_head.BaseSegHead"]], "deeplabv3 (class in cvnets.models.segmentation.heads.deeplabv3)": [[17, "cvnets.models.segmentation.heads.deeplabv3.DeeplabV3"]], "pspnet (class in cvnets.models.segmentation.heads.pspnet)": [[17, "cvnets.models.segmentation.heads.pspnet.PSPNet"]], "simpleseghead (class in cvnets.models.segmentation.heads.simple_seg_head)": [[17, "cvnets.models.segmentation.heads.simple_seg_head.SimpleSegHead"]], "__init__() (cvnets.models.segmentation.heads.base_seg_head.baseseghead method)": [[17, "cvnets.models.segmentation.heads.base_seg_head.BaseSegHead.__init__"]], "__init__() (cvnets.models.segmentation.heads.deeplabv3.deeplabv3 method)": [[17, "cvnets.models.segmentation.heads.deeplabv3.DeeplabV3.__init__"]], "__init__() (cvnets.models.segmentation.heads.pspnet.pspnet method)": [[17, "cvnets.models.segmentation.heads.pspnet.PSPNet.__init__"]], "__init__() (cvnets.models.segmentation.heads.simple_seg_head.simpleseghead method)": [[17, "cvnets.models.segmentation.heads.simple_seg_head.SimpleSegHead.__init__"]], "add_arguments() (cvnets.models.segmentation.heads.base_seg_head.baseseghead class method)": [[17, "cvnets.models.segmentation.heads.base_seg_head.BaseSegHead.add_arguments"]], "add_arguments() (cvnets.models.segmentation.heads.deeplabv3.deeplabv3 class method)": [[17, "cvnets.models.segmentation.heads.deeplabv3.DeeplabV3.add_arguments"]], "add_arguments() (cvnets.models.segmentation.heads.pspnet.pspnet class method)": [[17, "cvnets.models.segmentation.heads.pspnet.PSPNet.add_arguments"]], "add_arguments() (cvnets.models.segmentation.heads.simple_seg_head.simpleseghead class method)": [[17, "cvnets.models.segmentation.heads.simple_seg_head.SimpleSegHead.add_arguments"]], "build_model() (cvnets.models.segmentation.heads.base_seg_head.baseseghead class method)": [[17, "cvnets.models.segmentation.heads.base_seg_head.BaseSegHead.build_model"]], "cvnets.models.segmentation.heads": [[17, "module-cvnets.models.segmentation.heads"]], "cvnets.models.segmentation.heads.base_seg_head": [[17, "module-cvnets.models.segmentation.heads.base_seg_head"]], "cvnets.models.segmentation.heads.deeplabv3": [[17, "module-cvnets.models.segmentation.heads.deeplabv3"]], "cvnets.models.segmentation.heads.pspnet": [[17, "module-cvnets.models.segmentation.heads.pspnet"]], "cvnets.models.segmentation.heads.simple_seg_head": [[17, "module-cvnets.models.segmentation.heads.simple_seg_head"]], "forward() (cvnets.models.segmentation.heads.base_seg_head.baseseghead method)": [[17, "cvnets.models.segmentation.heads.base_seg_head.BaseSegHead.forward"]], "forward_aux_head() (cvnets.models.segmentation.heads.base_seg_head.baseseghead method)": [[17, "cvnets.models.segmentation.heads.base_seg_head.BaseSegHead.forward_aux_head"]], "forward_seg_head() (cvnets.models.segmentation.heads.base_seg_head.baseseghead method)": [[17, "cvnets.models.segmentation.heads.base_seg_head.BaseSegHead.forward_seg_head"]], "forward_seg_head() (cvnets.models.segmentation.heads.deeplabv3.deeplabv3 method)": [[17, "cvnets.models.segmentation.heads.deeplabv3.DeeplabV3.forward_seg_head"]], "forward_seg_head() (cvnets.models.segmentation.heads.pspnet.pspnet method)": [[17, "cvnets.models.segmentation.heads.pspnet.PSPNet.forward_seg_head"]], "forward_seg_head() (cvnets.models.segmentation.heads.simple_seg_head.simpleseghead method)": [[17, "cvnets.models.segmentation.heads.simple_seg_head.SimpleSegHead.forward_seg_head"]], "get_trainable_parameters() (cvnets.models.segmentation.heads.base_seg_head.baseseghead method)": [[17, "cvnets.models.segmentation.heads.base_seg_head.BaseSegHead.get_trainable_parameters"]], "reset_head_parameters() (cvnets.models.segmentation.heads.base_seg_head.baseseghead method)": [[17, "cvnets.models.segmentation.heads.base_seg_head.BaseSegHead.reset_head_parameters"]], "update_classifier() (cvnets.models.segmentation.heads.base_seg_head.baseseghead method)": [[17, "cvnets.models.segmentation.heads.base_seg_head.BaseSegHead.update_classifier"]], "update_classifier() (cvnets.models.segmentation.heads.deeplabv3.deeplabv3 method)": [[17, "cvnets.models.segmentation.heads.deeplabv3.DeeplabV3.update_classifier"]], "update_classifier() (cvnets.models.segmentation.heads.pspnet.pspnet method)": [[17, "cvnets.models.segmentation.heads.pspnet.PSPNet.update_classifier"]], "aspp (class in cvnets.modules)": [[18, "cvnets.modules.ASPP"]], "aspp (class in cvnets.modules.aspp_block)": [[18, "cvnets.modules.aspp_block.ASPP"]], "asppconv2d (class in cvnets.modules.aspp_block)": [[18, "cvnets.modules.aspp_block.ASPPConv2d"]], "aspppooling (class in cvnets.modules.aspp_block)": [[18, "cvnets.modules.aspp_block.ASPPPooling"]], "asppseparableconv2d (class in cvnets.modules.aspp_block)": [[18, "cvnets.modules.aspp_block.ASPPSeparableConv2d"]], "anyregnetstage (class in cvnets.modules)": [[18, "cvnets.modules.AnyRegNetStage"]], "anyregnetstage (class in cvnets.modules.regnet_modules)": [[18, "cvnets.modules.regnet_modules.AnyRegNetStage"]], "attentionblock (class in cvnets.modules.fastvit)": [[18, "cvnets.modules.fastvit.AttentionBlock"]], "basemodule (class in cvnets.modules.base_module)": [[18, "cvnets.modules.base_module.BaseModule"]], "basicresnetblock (class in cvnets.modules)": [[18, "cvnets.modules.BasicResNetBlock"]], "basicresnetblock (class in cvnets.modules.resnet_modules)": [[18, "cvnets.modules.resnet_modules.BasicResNetBlock"]], "bottleneckresnetblock (class in cvnets.modules)": [[18, "cvnets.modules.BottleneckResNetBlock"]], "bottleneckresnetblock (class in cvnets.modules.resnet_modules)": [[18, "cvnets.modules.resnet_modules.BottleneckResNetBlock"]], "convffn (class in cvnets.modules.fastvit)": [[18, "cvnets.modules.fastvit.ConvFFN"]], "efficientnetblock (class in cvnets.modules)": [[18, "cvnets.modules.EfficientNetBlock"]], "efficientnetblock (class in cvnets.modules.efficientnet)": [[18, "cvnets.modules.efficientnet.EfficientNetBlock"]], "featurepyramidnetwork (class in cvnets.modules)": [[18, "cvnets.modules.FeaturePyramidNetwork"]], "featurepyramidnetwork (class in cvnets.modules.feature_pyramid)": [[18, "cvnets.modules.feature_pyramid.FeaturePyramidNetwork"]], "invertedresidual (class in cvnets.modules)": [[18, "cvnets.modules.InvertedResidual"]], "invertedresidual (class in cvnets.modules.mobilenetv2)": [[18, "cvnets.modules.mobilenetv2.InvertedResidual"]], "invertedresidualse (class in cvnets.modules)": [[18, "cvnets.modules.InvertedResidualSE"]], "invertedresidualse (class in cvnets.modules.mobilenetv2)": [[18, "cvnets.modules.mobilenetv2.InvertedResidualSE"]], "linearattnffn (class in cvnets.modules.transformer)": [[18, "cvnets.modules.transformer.LinearAttnFFN"]], "mobileoneblock (class in cvnets.modules)": [[18, "cvnets.modules.MobileOneBlock"]], "mobileoneblock (class in cvnets.modules.mobileone_block)": [[18, "cvnets.modules.mobileone_block.MobileOneBlock"]], "mobilevitblock (class in cvnets.modules)": [[18, "cvnets.modules.MobileViTBlock"]], "mobilevitblock (class in cvnets.modules.mobilevit_block)": [[18, "cvnets.modules.mobilevit_block.MobileViTBlock"]], "mobilevitblockv2 (class in cvnets.modules)": [[18, "cvnets.modules.MobileViTBlockv2"]], "mobilevitblockv2 (class in cvnets.modules.mobilevit_block)": [[18, "cvnets.modules.mobilevit_block.MobileViTBlockv2"]], "psp (class in cvnets.modules)": [[18, "cvnets.modules.PSP"]], "psp (class in cvnets.modules.pspnet_module)": [[18, "cvnets.modules.pspnet_module.PSP"]], "patchembed (class in cvnets.modules.fastvit)": [[18, "cvnets.modules.fastvit.PatchEmbed"]], "patchmerging (class in cvnets.modules)": [[18, "cvnets.modules.PatchMerging"]], "patchmerging (class in cvnets.modules.swin_transformer_block)": [[18, "cvnets.modules.swin_transformer_block.PatchMerging"]], "permute (class in cvnets.modules)": [[18, "cvnets.modules.Permute"]], "permute (class in cvnets.modules.swin_transformer_block)": [[18, "cvnets.modules.swin_transformer_block.Permute"]], "repcpe (class in cvnets.modules.fastvit)": [[18, "cvnets.modules.fastvit.RepCPE"]], "replkblock (class in cvnets.modules)": [[18, "cvnets.modules.RepLKBlock"]], "replkblock (class in cvnets.modules.mobileone_block)": [[18, "cvnets.modules.mobileone_block.RepLKBlock"]], "repmixer (class in cvnets.modules.fastvit)": [[18, "cvnets.modules.fastvit.RepMixer"]], "repmixerblock (class in cvnets.modules.fastvit)": [[18, "cvnets.modules.fastvit.RepMixerBlock"]], "ssdhead (class in cvnets.modules)": [[18, "cvnets.modules.SSDHead"]], "ssdhead (class in cvnets.modules.ssd_heads)": [[18, "cvnets.modules.ssd_heads.SSDHead"]], "ssdinstancehead (class in cvnets.modules)": [[18, "cvnets.modules.SSDInstanceHead"]], "ssdinstancehead (class in cvnets.modules.ssd_heads)": [[18, "cvnets.modules.ssd_heads.SSDInstanceHead"]], "shiftedwindowattention (class in cvnets.modules.swin_transformer_block)": [[18, "cvnets.modules.swin_transformer_block.ShiftedWindowAttention"]], "squeezeexcitation (class in cvnets.modules)": [[18, "cvnets.modules.SqueezeExcitation"]], "squeezeexcitation (class in cvnets.modules.squeeze_excitation)": [[18, "cvnets.modules.squeeze_excitation.SqueezeExcitation"]], "swintransformerblock (class in cvnets.modules)": [[18, "cvnets.modules.SwinTransformerBlock"]], "swintransformerblock (class in cvnets.modules.swin_transformer_block)": [[18, "cvnets.modules.swin_transformer_block.SwinTransformerBlock"]], "transformerencoder (class in cvnets.modules)": [[18, "cvnets.modules.TransformerEncoder"]], "transformerencoder (class in cvnets.modules.transformer)": [[18, "cvnets.modules.transformer.TransformerEncoder"]], "windowedtransformerencoder (class in cvnets.modules)": [[18, "cvnets.modules.WindowedTransformerEncoder"]], "windowedtransformerencoder (class in cvnets.modules.windowed_transformer)": [[18, "cvnets.modules.windowed_transformer.WindowedTransformerEncoder"]], "xregnetblock (class in cvnets.modules)": [[18, "cvnets.modules.XRegNetBlock"]], "xregnetblock (class in cvnets.modules.regnet_modules)": [[18, "cvnets.modules.regnet_modules.XRegNetBlock"]], "__init__() (cvnets.modules.aspp method)": [[18, "cvnets.modules.ASPP.__init__"]], "__init__() (cvnets.modules.anyregnetstage method)": [[18, "cvnets.modules.AnyRegNetStage.__init__"]], "__init__() (cvnets.modules.basicresnetblock method)": [[18, "cvnets.modules.BasicResNetBlock.__init__"]], "__init__() (cvnets.modules.bottleneckresnetblock method)": [[18, "cvnets.modules.BottleneckResNetBlock.__init__"]], "__init__() (cvnets.modules.efficientnetblock method)": [[18, "cvnets.modules.EfficientNetBlock.__init__"]], "__init__() (cvnets.modules.featurepyramidnetwork method)": [[18, "cvnets.modules.FeaturePyramidNetwork.__init__"]], "__init__() (cvnets.modules.invertedresidual method)": [[18, "cvnets.modules.InvertedResidual.__init__"]], "__init__() (cvnets.modules.invertedresidualse method)": [[18, "cvnets.modules.InvertedResidualSE.__init__"]], "__init__() (cvnets.modules.mobileoneblock method)": [[18, "cvnets.modules.MobileOneBlock.__init__"]], "__init__() (cvnets.modules.mobilevitblock method)": [[18, "cvnets.modules.MobileViTBlock.__init__"]], "__init__() (cvnets.modules.mobilevitblockv2 method)": [[18, "cvnets.modules.MobileViTBlockv2.__init__"]], "__init__() (cvnets.modules.psp method)": [[18, "cvnets.modules.PSP.__init__"]], "__init__() (cvnets.modules.patchmerging method)": [[18, "cvnets.modules.PatchMerging.__init__"]], "__init__() (cvnets.modules.permute method)": [[18, "cvnets.modules.Permute.__init__"]], "__init__() (cvnets.modules.replkblock method)": [[18, "cvnets.modules.RepLKBlock.__init__"]], "__init__() (cvnets.modules.ssdhead method)": [[18, "cvnets.modules.SSDHead.__init__"]], "__init__() (cvnets.modules.ssdinstancehead method)": [[18, "cvnets.modules.SSDInstanceHead.__init__"]], "__init__() (cvnets.modules.squeezeexcitation method)": [[18, "cvnets.modules.SqueezeExcitation.__init__"]], "__init__() (cvnets.modules.swintransformerblock method)": [[18, "cvnets.modules.SwinTransformerBlock.__init__"]], "__init__() (cvnets.modules.transformerencoder method)": [[18, "cvnets.modules.TransformerEncoder.__init__"]], "__init__() (cvnets.modules.windowedtransformerencoder method)": [[18, "cvnets.modules.WindowedTransformerEncoder.__init__"]], "__init__() (cvnets.modules.xregnetblock method)": [[18, "cvnets.modules.XRegNetBlock.__init__"]], "__init__() (cvnets.modules.aspp_block.aspp method)": [[18, "cvnets.modules.aspp_block.ASPP.__init__"]], "__init__() (cvnets.modules.aspp_block.asppconv2d method)": [[18, "cvnets.modules.aspp_block.ASPPConv2d.__init__"]], "__init__() (cvnets.modules.aspp_block.aspppooling method)": [[18, "cvnets.modules.aspp_block.ASPPPooling.__init__"]], "__init__() (cvnets.modules.aspp_block.asppseparableconv2d method)": [[18, "cvnets.modules.aspp_block.ASPPSeparableConv2d.__init__"]], "__init__() (cvnets.modules.base_module.basemodule method)": [[18, "cvnets.modules.base_module.BaseModule.__init__"]], "__init__() (cvnets.modules.efficientnet.efficientnetblock method)": [[18, "cvnets.modules.efficientnet.EfficientNetBlock.__init__"]], "__init__() (cvnets.modules.fastvit.attentionblock method)": [[18, "cvnets.modules.fastvit.AttentionBlock.__init__"]], "__init__() (cvnets.modules.fastvit.convffn method)": [[18, "cvnets.modules.fastvit.ConvFFN.__init__"]], "__init__() (cvnets.modules.fastvit.patchembed method)": [[18, "cvnets.modules.fastvit.PatchEmbed.__init__"]], "__init__() (cvnets.modules.fastvit.repcpe method)": [[18, "cvnets.modules.fastvit.RepCPE.__init__"]], "__init__() (cvnets.modules.fastvit.repmixer method)": [[18, "cvnets.modules.fastvit.RepMixer.__init__"]], "__init__() (cvnets.modules.fastvit.repmixerblock method)": [[18, "cvnets.modules.fastvit.RepMixerBlock.__init__"]], "__init__() (cvnets.modules.feature_pyramid.featurepyramidnetwork method)": [[18, "cvnets.modules.feature_pyramid.FeaturePyramidNetwork.__init__"]], "__init__() (cvnets.modules.mobilenetv2.invertedresidual method)": [[18, "cvnets.modules.mobilenetv2.InvertedResidual.__init__"]], "__init__() (cvnets.modules.mobilenetv2.invertedresidualse method)": [[18, "cvnets.modules.mobilenetv2.InvertedResidualSE.__init__"]], "__init__() (cvnets.modules.mobileone_block.mobileoneblock method)": [[18, "cvnets.modules.mobileone_block.MobileOneBlock.__init__"]], "__init__() (cvnets.modules.mobileone_block.replkblock method)": [[18, "cvnets.modules.mobileone_block.RepLKBlock.__init__"]], "__init__() (cvnets.modules.mobilevit_block.mobilevitblock method)": [[18, "cvnets.modules.mobilevit_block.MobileViTBlock.__init__"]], "__init__() (cvnets.modules.mobilevit_block.mobilevitblockv2 method)": [[18, "cvnets.modules.mobilevit_block.MobileViTBlockv2.__init__"]], "__init__() (cvnets.modules.pspnet_module.psp method)": [[18, "cvnets.modules.pspnet_module.PSP.__init__"]], "__init__() (cvnets.modules.regnet_modules.anyregnetstage method)": [[18, "cvnets.modules.regnet_modules.AnyRegNetStage.__init__"]], "__init__() (cvnets.modules.regnet_modules.xregnetblock method)": [[18, "cvnets.modules.regnet_modules.XRegNetBlock.__init__"]], "__init__() (cvnets.modules.resnet_modules.basicresnetblock method)": [[18, "cvnets.modules.resnet_modules.BasicResNetBlock.__init__"]], "__init__() (cvnets.modules.resnet_modules.bottleneckresnetblock method)": [[18, "cvnets.modules.resnet_modules.BottleneckResNetBlock.__init__"]], "__init__() (cvnets.modules.squeeze_excitation.squeezeexcitation method)": [[18, "cvnets.modules.squeeze_excitation.SqueezeExcitation.__init__"]], "__init__() (cvnets.modules.ssd_heads.ssdhead method)": [[18, "cvnets.modules.ssd_heads.SSDHead.__init__"]], "__init__() (cvnets.modules.ssd_heads.ssdinstancehead method)": [[18, "cvnets.modules.ssd_heads.SSDInstanceHead.__init__"]], "__init__() (cvnets.modules.swin_transformer_block.patchmerging method)": [[18, "cvnets.modules.swin_transformer_block.PatchMerging.__init__"]], "__init__() (cvnets.modules.swin_transformer_block.permute method)": [[18, "cvnets.modules.swin_transformer_block.Permute.__init__"]], "__init__() (cvnets.modules.swin_transformer_block.shiftedwindowattention method)": [[18, "cvnets.modules.swin_transformer_block.ShiftedWindowAttention.__init__"]], "__init__() (cvnets.modules.swin_transformer_block.swintransformerblock method)": [[18, "cvnets.modules.swin_transformer_block.SwinTransformerBlock.__init__"]], "__init__() (cvnets.modules.transformer.linearattnffn method)": [[18, "cvnets.modules.transformer.LinearAttnFFN.__init__"]], "__init__() (cvnets.modules.transformer.transformerencoder method)": [[18, "cvnets.modules.transformer.TransformerEncoder.__init__"]], "__init__() (cvnets.modules.windowed_transformer.windowedtransformerencoder method)": [[18, "cvnets.modules.windowed_transformer.WindowedTransformerEncoder.__init__"]], "adjust_atrous_rate() (cvnets.modules.aspp_block.asppconv2d method)": [[18, "cvnets.modules.aspp_block.ASPPConv2d.adjust_atrous_rate"]], "adjust_atrous_rate() (cvnets.modules.aspp_block.asppseparableconv2d method)": [[18, "cvnets.modules.aspp_block.ASPPSeparableConv2d.adjust_atrous_rate"]], "convolutional_stem() (in module cvnets.modules.fastvit)": [[18, "cvnets.modules.fastvit.convolutional_stem"]], "cvnets.modules": [[18, "module-cvnets.modules"]], "cvnets.modules.aspp_block": [[18, "module-cvnets.modules.aspp_block"]], "cvnets.modules.base_module": [[18, "module-cvnets.modules.base_module"]], "cvnets.modules.efficientnet": [[18, "module-cvnets.modules.efficientnet"]], "cvnets.modules.fastvit": [[18, "module-cvnets.modules.fastvit"]], "cvnets.modules.feature_pyramid": [[18, "module-cvnets.modules.feature_pyramid"]], "cvnets.modules.mobilenetv2": [[18, "module-cvnets.modules.mobilenetv2"]], "cvnets.modules.mobileone_block": [[18, "module-cvnets.modules.mobileone_block"]], "cvnets.modules.mobilevit_block": [[18, "module-cvnets.modules.mobilevit_block"]], "cvnets.modules.pspnet_module": [[18, "module-cvnets.modules.pspnet_module"]], "cvnets.modules.regnet_modules": [[18, "module-cvnets.modules.regnet_modules"]], "cvnets.modules.resnet_modules": [[18, "module-cvnets.modules.resnet_modules"]], "cvnets.modules.squeeze_excitation": [[18, "module-cvnets.modules.squeeze_excitation"]], "cvnets.modules.ssd_heads": [[18, "module-cvnets.modules.ssd_heads"]], "cvnets.modules.swin_transformer_block": [[18, "module-cvnets.modules.swin_transformer_block"]], "cvnets.modules.transformer": [[18, "module-cvnets.modules.transformer"]], "cvnets.modules.windowed_transformer": [[18, "module-cvnets.modules.windowed_transformer"]], "expansion (cvnets.modules.basicresnetblock attribute)": [[18, "cvnets.modules.BasicResNetBlock.expansion"]], "expansion (cvnets.modules.bottleneckresnetblock attribute)": [[18, "cvnets.modules.BottleneckResNetBlock.expansion"]], "expansion (cvnets.modules.resnet_modules.basicresnetblock attribute)": [[18, "cvnets.modules.resnet_modules.BasicResNetBlock.expansion"]], "expansion (cvnets.modules.resnet_modules.bottleneckresnetblock attribute)": [[18, "cvnets.modules.resnet_modules.BottleneckResNetBlock.expansion"]], "folding() (cvnets.modules.mobilevitblock method)": [[18, "cvnets.modules.MobileViTBlock.folding"]], "folding() (cvnets.modules.mobilevit_block.mobilevitblock method)": [[18, "cvnets.modules.mobilevit_block.MobileViTBlock.folding"]], "folding_coreml() (cvnets.modules.mobilevitblockv2 method)": [[18, "cvnets.modules.MobileViTBlockv2.folding_coreml"]], "folding_coreml() (cvnets.modules.mobilevit_block.mobilevitblockv2 method)": [[18, "cvnets.modules.mobilevit_block.MobileViTBlockv2.folding_coreml"]], "folding_pytorch() (cvnets.modules.mobilevitblockv2 method)": [[18, "cvnets.modules.MobileViTBlockv2.folding_pytorch"]], "folding_pytorch() (cvnets.modules.mobilevit_block.mobilevitblockv2 method)": [[18, "cvnets.modules.mobilevit_block.MobileViTBlockv2.folding_pytorch"]], "forward() (cvnets.modules.aspp method)": [[18, "cvnets.modules.ASPP.forward"]], "forward() (cvnets.modules.anyregnetstage method)": [[18, "cvnets.modules.AnyRegNetStage.forward"]], "forward() (cvnets.modules.basicresnetblock method)": [[18, "cvnets.modules.BasicResNetBlock.forward"]], "forward() (cvnets.modules.bottleneckresnetblock method)": [[18, "cvnets.modules.BottleneckResNetBlock.forward"]], "forward() (cvnets.modules.efficientnetblock method)": [[18, "cvnets.modules.EfficientNetBlock.forward"]], "forward() (cvnets.modules.featurepyramidnetwork method)": [[18, "cvnets.modules.FeaturePyramidNetwork.forward"]], "forward() (cvnets.modules.invertedresidual method)": [[18, "cvnets.modules.InvertedResidual.forward"]], "forward() (cvnets.modules.invertedresidualse method)": [[18, "cvnets.modules.InvertedResidualSE.forward"]], "forward() (cvnets.modules.mobileoneblock method)": [[18, "cvnets.modules.MobileOneBlock.forward"]], "forward() (cvnets.modules.mobilevitblock method)": [[18, "cvnets.modules.MobileViTBlock.forward"]], "forward() (cvnets.modules.mobilevitblockv2 method)": [[18, "cvnets.modules.MobileViTBlockv2.forward"]], "forward() (cvnets.modules.psp method)": [[18, "cvnets.modules.PSP.forward"]], "forward() (cvnets.modules.patchmerging method)": [[18, "cvnets.modules.PatchMerging.forward"]], "forward() (cvnets.modules.permute method)": [[18, "cvnets.modules.Permute.forward"]], "forward() (cvnets.modules.replkblock method)": [[18, "cvnets.modules.RepLKBlock.forward"]], "forward() (cvnets.modules.ssdhead method)": [[18, "cvnets.modules.SSDHead.forward"]], "forward() (cvnets.modules.ssdinstancehead method)": [[18, "cvnets.modules.SSDInstanceHead.forward"]], "forward() (cvnets.modules.squeezeexcitation method)": [[18, "cvnets.modules.SqueezeExcitation.forward"]], "forward() (cvnets.modules.swintransformerblock method)": [[18, "cvnets.modules.SwinTransformerBlock.forward"]], "forward() (cvnets.modules.transformerencoder method)": [[18, "cvnets.modules.TransformerEncoder.forward"]], "forward() (cvnets.modules.windowedtransformerencoder method)": [[18, "cvnets.modules.WindowedTransformerEncoder.forward"]], "forward() (cvnets.modules.xregnetblock method)": [[18, "cvnets.modules.XRegNetBlock.forward"]], "forward() (cvnets.modules.aspp_block.aspp method)": [[18, "cvnets.modules.aspp_block.ASPP.forward"]], "forward() (cvnets.modules.aspp_block.aspppooling method)": [[18, "cvnets.modules.aspp_block.ASPPPooling.forward"]], "forward() (cvnets.modules.base_module.basemodule method)": [[18, "cvnets.modules.base_module.BaseModule.forward"]], "forward() (cvnets.modules.efficientnet.efficientnetblock method)": [[18, "cvnets.modules.efficientnet.EfficientNetBlock.forward"]], "forward() (cvnets.modules.fastvit.attentionblock method)": [[18, "cvnets.modules.fastvit.AttentionBlock.forward"]], "forward() (cvnets.modules.fastvit.convffn method)": [[18, "cvnets.modules.fastvit.ConvFFN.forward"]], "forward() (cvnets.modules.fastvit.patchembed method)": [[18, "cvnets.modules.fastvit.PatchEmbed.forward"]], "forward() (cvnets.modules.fastvit.repcpe method)": [[18, "cvnets.modules.fastvit.RepCPE.forward"]], "forward() (cvnets.modules.fastvit.repmixer method)": [[18, "cvnets.modules.fastvit.RepMixer.forward"]], "forward() (cvnets.modules.fastvit.repmixerblock method)": [[18, "cvnets.modules.fastvit.RepMixerBlock.forward"]], "forward() (cvnets.modules.feature_pyramid.featurepyramidnetwork method)": [[18, "cvnets.modules.feature_pyramid.FeaturePyramidNetwork.forward"]], "forward() (cvnets.modules.mobilenetv2.invertedresidual method)": [[18, "cvnets.modules.mobilenetv2.InvertedResidual.forward"]], "forward() (cvnets.modules.mobilenetv2.invertedresidualse method)": [[18, "cvnets.modules.mobilenetv2.InvertedResidualSE.forward"]], "forward() (cvnets.modules.mobileone_block.mobileoneblock method)": [[18, "cvnets.modules.mobileone_block.MobileOneBlock.forward"]], "forward() (cvnets.modules.mobileone_block.replkblock method)": [[18, "cvnets.modules.mobileone_block.RepLKBlock.forward"]], "forward() (cvnets.modules.mobilevit_block.mobilevitblock method)": [[18, "cvnets.modules.mobilevit_block.MobileViTBlock.forward"]], "forward() (cvnets.modules.mobilevit_block.mobilevitblockv2 method)": [[18, "cvnets.modules.mobilevit_block.MobileViTBlockv2.forward"]], "forward() (cvnets.modules.pspnet_module.psp method)": [[18, "cvnets.modules.pspnet_module.PSP.forward"]], "forward() (cvnets.modules.regnet_modules.anyregnetstage method)": [[18, "cvnets.modules.regnet_modules.AnyRegNetStage.forward"]], "forward() (cvnets.modules.regnet_modules.xregnetblock method)": [[18, "cvnets.modules.regnet_modules.XRegNetBlock.forward"]], "forward() (cvnets.modules.resnet_modules.basicresnetblock method)": [[18, "cvnets.modules.resnet_modules.BasicResNetBlock.forward"]], "forward() (cvnets.modules.resnet_modules.bottleneckresnetblock method)": [[18, "cvnets.modules.resnet_modules.BottleneckResNetBlock.forward"]], "forward() (cvnets.modules.squeeze_excitation.squeezeexcitation method)": [[18, "cvnets.modules.squeeze_excitation.SqueezeExcitation.forward"]], "forward() (cvnets.modules.ssd_heads.ssdhead method)": [[18, "cvnets.modules.ssd_heads.SSDHead.forward"]], "forward() (cvnets.modules.ssd_heads.ssdinstancehead method)": [[18, "cvnets.modules.ssd_heads.SSDInstanceHead.forward"]], "forward() (cvnets.modules.swin_transformer_block.patchmerging method)": [[18, "cvnets.modules.swin_transformer_block.PatchMerging.forward"]], "forward() (cvnets.modules.swin_transformer_block.permute method)": [[18, "cvnets.modules.swin_transformer_block.Permute.forward"]], "forward() (cvnets.modules.swin_transformer_block.shiftedwindowattention method)": [[18, "cvnets.modules.swin_transformer_block.ShiftedWindowAttention.forward"]], "forward() (cvnets.modules.swin_transformer_block.swintransformerblock method)": [[18, "cvnets.modules.swin_transformer_block.SwinTransformerBlock.forward"]], "forward() (cvnets.modules.transformer.linearattnffn method)": [[18, "cvnets.modules.transformer.LinearAttnFFN.forward"]], "forward() (cvnets.modules.transformer.transformerencoder method)": [[18, "cvnets.modules.transformer.TransformerEncoder.forward"]], "forward() (cvnets.modules.windowed_transformer.windowedtransformerencoder method)": [[18, "cvnets.modules.windowed_transformer.WindowedTransformerEncoder.forward"]], "forward_spatial() (cvnets.modules.mobilevitblock method)": [[18, "cvnets.modules.MobileViTBlock.forward_spatial"]], "forward_spatial() (cvnets.modules.mobilevitblockv2 method)": [[18, "cvnets.modules.MobileViTBlockv2.forward_spatial"]], "forward_spatial() (cvnets.modules.mobilevit_block.mobilevitblock method)": [[18, "cvnets.modules.mobilevit_block.MobileViTBlock.forward_spatial"]], "forward_spatial() (cvnets.modules.mobilevit_block.mobilevitblockv2 method)": [[18, "cvnets.modules.mobilevit_block.MobileViTBlockv2.forward_spatial"]], "forward_temporal() (cvnets.modules.mobilevitblock method)": [[18, "cvnets.modules.MobileViTBlock.forward_temporal"]], "forward_temporal() (cvnets.modules.mobilevitblockv2 method)": [[18, "cvnets.modules.MobileViTBlockv2.forward_temporal"]], "forward_temporal() (cvnets.modules.mobilevit_block.mobilevitblock method)": [[18, "cvnets.modules.mobilevit_block.MobileViTBlock.forward_temporal"]], "forward_temporal() (cvnets.modules.mobilevit_block.mobilevitblockv2 method)": [[18, "cvnets.modules.mobilevit_block.MobileViTBlockv2.forward_temporal"]], "get_windows_shift_mask() (in module cvnets.modules.windowed_transformer)": [[18, "cvnets.modules.windowed_transformer.get_windows_shift_mask"]], "reparameterize() (cvnets.modules.mobileoneblock method)": [[18, "cvnets.modules.MobileOneBlock.reparameterize"]], "reparameterize() (cvnets.modules.replkblock method)": [[18, "cvnets.modules.RepLKBlock.reparameterize"]], "reparameterize() (cvnets.modules.fastvit.repcpe method)": [[18, "cvnets.modules.fastvit.RepCPE.reparameterize"]], "reparameterize() (cvnets.modules.fastvit.repmixer method)": [[18, "cvnets.modules.fastvit.RepMixer.reparameterize"]], "reparameterize() (cvnets.modules.mobileone_block.mobileoneblock method)": [[18, "cvnets.modules.mobileone_block.MobileOneBlock.reparameterize"]], "reparameterize() (cvnets.modules.mobileone_block.replkblock method)": [[18, "cvnets.modules.mobileone_block.RepLKBlock.reparameterize"]], "reset_parameters() (cvnets.modules.ssdhead method)": [[18, "cvnets.modules.SSDHead.reset_parameters"]], "reset_parameters() (cvnets.modules.ssdinstancehead method)": [[18, "cvnets.modules.SSDInstanceHead.reset_parameters"]], "reset_parameters() (cvnets.modules.ssd_heads.ssdhead method)": [[18, "cvnets.modules.ssd_heads.SSDHead.reset_parameters"]], "reset_parameters() (cvnets.modules.ssd_heads.ssdinstancehead method)": [[18, "cvnets.modules.ssd_heads.SSDInstanceHead.reset_parameters"]], "reset_weights() (cvnets.modules.featurepyramidnetwork method)": [[18, "cvnets.modules.FeaturePyramidNetwork.reset_weights"]], "reset_weights() (cvnets.modules.feature_pyramid.featurepyramidnetwork method)": [[18, "cvnets.modules.feature_pyramid.FeaturePyramidNetwork.reset_weights"]], "resize_input_if_needed() (cvnets.modules.mobilevitblockv2 method)": [[18, "cvnets.modules.MobileViTBlockv2.resize_input_if_needed"]], "resize_input_if_needed() (cvnets.modules.mobilevit_block.mobilevitblockv2 method)": [[18, "cvnets.modules.mobilevit_block.MobileViTBlockv2.resize_input_if_needed"]], "shifted_window_attention() (in module cvnets.modules.swin_transformer_block)": [[18, "cvnets.modules.swin_transformer_block.shifted_window_attention"]], "training (cvnets.modules.basicresnetblock attribute)": [[18, "cvnets.modules.BasicResNetBlock.training"]], "training (cvnets.modules.bottleneckresnetblock attribute)": [[18, "cvnets.modules.BottleneckResNetBlock.training"]], "unfolding() (cvnets.modules.mobilevitblock method)": [[18, "cvnets.modules.MobileViTBlock.unfolding"]], "unfolding() (cvnets.modules.mobilevit_block.mobilevitblock method)": [[18, "cvnets.modules.mobilevit_block.MobileViTBlock.unfolding"]], "unfolding_coreml() (cvnets.modules.mobilevitblockv2 method)": [[18, "cvnets.modules.MobileViTBlockv2.unfolding_coreml"]], "unfolding_coreml() (cvnets.modules.mobilevit_block.mobilevitblockv2 method)": [[18, "cvnets.modules.mobilevit_block.MobileViTBlockv2.unfolding_coreml"]], "unfolding_pytorch() (cvnets.modules.mobilevitblockv2 method)": [[18, "cvnets.modules.MobileViTBlockv2.unfolding_pytorch"]], "unfolding_pytorch() (cvnets.modules.mobilevit_block.mobilevitblockv2 method)": [[18, "cvnets.modules.mobilevit_block.MobileViTBlockv2.unfolding_pytorch"]], "unwindow_x() (in module cvnets.modules.windowed_transformer)": [[18, "cvnets.modules.windowed_transformer.unwindow_x"]], "window_partition() (in module cvnets.modules.windowed_transformer)": [[18, "cvnets.modules.windowed_transformer.window_partition"]], "window_partition_reverse() (in module cvnets.modules.windowed_transformer)": [[18, "cvnets.modules.windowed_transformer.window_partition_reverse"]], "window_x_and_key_padding_mask() (in module cvnets.modules.windowed_transformer)": [[18, "cvnets.modules.windowed_transformer.window_x_and_key_padding_mask"]], "baseneuralaugmentor (class in cvnets.neural_augmentor.neural_aug)": [[19, "cvnets.neural_augmentor.neural_aug.BaseNeuralAugmentor"]], "basicneuralaugmentor (class in cvnets.neural_augmentor.neural_aug)": [[19, "cvnets.neural_augmentor.neural_aug.BasicNeuralAugmentor"]], "distributionneuralaugmentor (class in cvnets.neural_augmentor.neural_aug)": [[19, "cvnets.neural_augmentor.neural_aug.DistributionNeuralAugmentor"]], "__init__() (cvnets.neural_augmentor.neural_aug.baseneuralaugmentor method)": [[19, "cvnets.neural_augmentor.neural_aug.BaseNeuralAugmentor.__init__"]], "__init__() (cvnets.neural_augmentor.neural_aug.basicneuralaugmentor method)": [[19, "cvnets.neural_augmentor.neural_aug.BasicNeuralAugmentor.__init__"]], "__init__() (cvnets.neural_augmentor.neural_aug.distributionneuralaugmentor method)": [[19, "cvnets.neural_augmentor.neural_aug.DistributionNeuralAugmentor.__init__"]], "add_arguments() (cvnets.neural_augmentor.neural_aug.baseneuralaugmentor class method)": [[19, "cvnets.neural_augmentor.neural_aug.BaseNeuralAugmentor.add_arguments"]], "arguments_neural_augmentor() (in module cvnets.neural_augmentor)": [[19, "cvnets.neural_augmentor.arguments_neural_augmentor"]], "build_neural_augmentor() (in module cvnets.neural_augmentor.neural_aug)": [[19, "cvnets.neural_augmentor.neural_aug.build_neural_augmentor"]], "cvnets.neural_augmentor": [[19, "module-cvnets.neural_augmentor"]], "cvnets.neural_augmentor.neural_aug": [[19, "module-cvnets.neural_augmentor.neural_aug"]], "forward() (cvnets.neural_augmentor.neural_aug.baseneuralaugmentor method)": [[19, "cvnets.neural_augmentor.neural_aug.BaseNeuralAugmentor.forward"]], "get_trainable_parameters() (cvnets.neural_augmentor.neural_aug.baseneuralaugmentor method)": [[19, "cvnets.neural_augmentor.neural_aug.BaseNeuralAugmentor.get_trainable_parameters"]], "clip (class in cvnets.neural_augmentor.utils.neural_aug_utils)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.Clip"]], "fixedsampler (class in cvnets.neural_augmentor.utils.neural_aug_utils)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.FixedSampler"]], "identity (class in cvnets.neural_augmentor.utils.neural_aug_utils)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.Identity"]], "uniformsampler (class in cvnets.neural_augmentor.utils.neural_aug_utils)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.UniformSampler"]], "__init__() (cvnets.neural_augmentor.utils.neural_aug_utils.clip method)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.Clip.__init__"]], "__init__() (cvnets.neural_augmentor.utils.neural_aug_utils.fixedsampler method)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.FixedSampler.__init__"]], "__init__() (cvnets.neural_augmentor.utils.neural_aug_utils.identity method)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.Identity.__init__"]], "__init__() (cvnets.neural_augmentor.utils.neural_aug_utils.uniformsampler method)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.UniformSampler.__init__"]], "cvnets.neural_augmentor.utils": [[20, "module-cvnets.neural_augmentor.utils"]], "cvnets.neural_augmentor.utils.neural_aug_utils": [[20, "module-cvnets.neural_augmentor.utils.neural_aug_utils"]], "forward() (cvnets.neural_augmentor.utils.neural_aug_utils.clip method)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.Clip.forward"]], "forward() (cvnets.neural_augmentor.utils.neural_aug_utils.fixedsampler method)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.FixedSampler.forward"]], "forward() (cvnets.neural_augmentor.utils.neural_aug_utils.identity method)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.Identity.forward"]], "forward() (cvnets.neural_augmentor.utils.neural_aug_utils.uniformsampler method)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.UniformSampler.forward"]], "high (cvnets.neural_augmentor.utils.neural_aug_utils.uniformsampler property)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.UniformSampler.high"]], "identity() (in module cvnets.neural_augmentor.utils.neural_aug_utils)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.identity"]], "low (cvnets.neural_augmentor.utils.neural_aug_utils.uniformsampler property)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.UniformSampler.low"]], "random_brightness() (in module cvnets.neural_augmentor.utils.neural_aug_utils)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.random_brightness"]], "random_contrast() (in module cvnets.neural_augmentor.utils.neural_aug_utils)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.random_contrast"]], "random_noise() (in module cvnets.neural_augmentor.utils.neural_aug_utils)": [[20, "cvnets.neural_augmentor.utils.neural_aug_utils.random_noise"]], "basetextencoder (class in cvnets.text_encoders.base_text_encoder)": [[21, "cvnets.text_encoders.base_text_encoder.BaseTextEncoder"]], "texttransformer (class in cvnets.text_encoders.transformer)": [[21, "cvnets.text_encoders.transformer.TextTransformer"]], "__init__() (cvnets.text_encoders.base_text_encoder.basetextencoder method)": [[21, "cvnets.text_encoders.base_text_encoder.BaseTextEncoder.__init__"]], "__init__() (cvnets.text_encoders.transformer.texttransformer method)": [[21, "cvnets.text_encoders.transformer.TextTransformer.__init__"]], "add_arguments() (cvnets.text_encoders.base_text_encoder.basetextencoder class method)": [[21, "cvnets.text_encoders.base_text_encoder.BaseTextEncoder.add_arguments"]], "add_arguments() (cvnets.text_encoders.transformer.texttransformer class method)": [[21, "cvnets.text_encoders.transformer.TextTransformer.add_arguments"]], "arguments_text_encoder() (in module cvnets.text_encoders)": [[21, "cvnets.text_encoders.arguments_text_encoder"]], "build_attention_mask() (cvnets.text_encoders.transformer.texttransformer method)": [[21, "cvnets.text_encoders.transformer.TextTransformer.build_attention_mask"]], "build_text_encoder() (in module cvnets.text_encoders)": [[21, "cvnets.text_encoders.build_text_encoder"]], "cvnets.text_encoders": [[21, "module-cvnets.text_encoders"]], "cvnets.text_encoders.base_text_encoder": [[21, "module-cvnets.text_encoders.base_text_encoder"]], "cvnets.text_encoders.transformer": [[21, "module-cvnets.text_encoders.transformer"]], "dummy_input_and_label() (cvnets.text_encoders.base_text_encoder.basetextencoder method)": [[21, "cvnets.text_encoders.base_text_encoder.BaseTextEncoder.dummy_input_and_label"]], "encode_text() (cvnets.text_encoders.transformer.texttransformer method)": [[21, "cvnets.text_encoders.transformer.TextTransformer.encode_text"]], "forward() (cvnets.text_encoders.base_text_encoder.basetextencoder method)": [[21, "cvnets.text_encoders.base_text_encoder.BaseTextEncoder.forward"]], "forward() (cvnets.text_encoders.transformer.texttransformer method)": [[21, "cvnets.text_encoders.transformer.TextTransformer.forward"]], "forward_embedding() (cvnets.text_encoders.transformer.texttransformer method)": [[21, "cvnets.text_encoders.transformer.TextTransformer.forward_embedding"]], "forward_zero_shot() (cvnets.text_encoders.transformer.texttransformer method)": [[21, "cvnets.text_encoders.transformer.TextTransformer.forward_zero_shot"]], "freeze_norm_layers() (cvnets.text_encoders.base_text_encoder.basetextencoder method)": [[21, "cvnets.text_encoders.base_text_encoder.BaseTextEncoder.freeze_norm_layers"]], "get_trainable_parameters() (cvnets.text_encoders.base_text_encoder.basetextencoder method)": [[21, "cvnets.text_encoders.base_text_encoder.BaseTextEncoder.get_trainable_parameters"]], "reset_parameters() (cvnets.text_encoders.base_text_encoder.basetextencoder method)": [[21, "cvnets.text_encoders.base_text_encoder.BaseTextEncoder.reset_parameters"]], "reset_parameters_clip_style() (cvnets.text_encoders.transformer.texttransformer method)": [[21, "cvnets.text_encoders.transformer.TextTransformer.reset_parameters_clip_style"]], "create_test_loader() (in module data.data_loaders)": [[22, "data.data_loaders.create_test_loader"]], "create_train_val_loader() (in module data.data_loaders)": [[22, "data.data_loaders.create_train_val_loader"]], "data": [[22, "module-data"]], "data.data_loaders": [[22, "module-data.data_loaders"]], "get_num_data_samples_as_int_or_mapping() (in module data.data_loaders)": [[22, "data.data_loaders.get_num_data_samples_as_int_or_mapping"]], "apply_byte_permutation() (in module data.collate_fns.byteformer_collate_functions)": [[23, "data.collate_fns.byteformer_collate_functions.apply_byte_permutation"]], "apply_mask_positions() (in module data.collate_fns.byteformer_collate_functions)": [[23, "data.collate_fns.byteformer_collate_functions.apply_mask_positions"]], "apply_padding() (in module data.collate_fns.byteformer_collate_functions)": [[23, "data.collate_fns.byteformer_collate_functions.apply_padding"]], "apply_pil_save() (in module data.collate_fns.byteformer_collate_functions)": [[23, "data.collate_fns.byteformer_collate_functions.apply_pil_save"]], "apply_random_uniform_noise() (in module data.collate_fns.byteformer_collate_functions)": [[23, "data.collate_fns.byteformer_collate_functions.apply_random_uniform_noise"]], "apply_shuffle_bytes() (in module data.collate_fns.byteformer_collate_functions)": [[23, "data.collate_fns.byteformer_collate_functions.apply_shuffle_bytes"]], "apply_torchaudio_save() (in module data.collate_fns.byteformer_collate_functions)": [[23, "data.collate_fns.byteformer_collate_functions.apply_torchaudio_save"]], "arguments_collate_fn() (in module data.collate_fns)": [[23, "data.collate_fns.arguments_collate_fn"]], "build_collate_fn() (in module data.collate_fns)": [[23, "data.collate_fns.build_collate_fn"]], "build_test_collate_fn() (in module data.collate_fns)": [[23, "data.collate_fns.build_test_collate_fn"]], "byteformer_audio_collate_fn() (in module data.collate_fns.byteformer_collate_functions)": [[23, "data.collate_fns.byteformer_collate_functions.byteformer_audio_collate_fn"]], "byteformer_image_collate_fn() (in module data.collate_fns.byteformer_collate_functions)": [[23, "data.collate_fns.byteformer_collate_functions.byteformer_image_collate_fn"]], "data.collate_fns": [[23, "module-data.collate_fns"]], "data.collate_fns.byteformer_collate_functions": [[23, "module-data.collate_fns.byteformer_collate_functions"]], "data.collate_fns.collate_functions": [[23, "module-data.collate_fns.collate_functions"]], "default_collate_fn() (in module data.collate_fns.collate_functions)": [[23, "data.collate_fns.collate_functions.default_collate_fn"]], "image_classification_data_collate_fn() (in module data.collate_fns.collate_functions)": [[23, "data.collate_fns.collate_functions.image_classification_data_collate_fn"]], "pytorch_default_collate_fn() (in module data.collate_fns.collate_functions)": [[23, "data.collate_fns.collate_functions.pytorch_default_collate_fn"]], "unlabeled_image_data_collate_fn() (in module data.collate_fns.collate_functions)": [[23, "data.collate_fns.collate_functions.unlabeled_image_data_collate_fn"]], "basedataset (class in data.datasets.dataset_base)": [[24, "data.datasets.dataset_base.BaseDataset"]], "baseimagedataset (class in data.datasets.dataset_base)": [[24, "data.datasets.dataset_base.BaseImageDataset"]], "basevideodataset (class in data.datasets.dataset_base)": [[24, "data.datasets.dataset_base.BaseVideoDataset"]], "videometadatadict (class in data.datasets.dataset_base)": [[24, "data.datasets.dataset_base.VideoMetadataDict"]], "__init__() (data.datasets.dataset_base.basedataset method)": [[24, "data.datasets.dataset_base.BaseDataset.__init__"]], "__init__() (data.datasets.dataset_base.basevideodataset method)": [[24, "data.datasets.dataset_base.BaseVideoDataset.__init__"]], "add_arguments() (data.datasets.dataset_base.basedataset class method)": [[24, "data.datasets.dataset_base.BaseDataset.add_arguments"]], "add_arguments() (data.datasets.dataset_base.basevideodataset class method)": [[24, "data.datasets.dataset_base.BaseVideoDataset.add_arguments"]], "arguments_dataset() (in module data.datasets)": [[24, "data.datasets.arguments_dataset"]], "audio_fps (data.datasets.dataset_base.videometadatadict attribute)": [[24, "data.datasets.dataset_base.VideoMetadataDict.audio_fps"]], "build_dataset_from_registry() (in module data.datasets)": [[24, "data.datasets.build_dataset_from_registry"]], "clips_per_video (data.datasets.dataset_base.basevideodataset property)": [[24, "data.datasets.dataset_base.BaseVideoDataset.clips_per_video"]], "data.datasets": [[24, "module-data.datasets"]], "data.datasets.dataset_base": [[24, "module-data.datasets.dataset_base"]], "extra_repr() (data.datasets.dataset_base.basedataset method)": [[24, "data.datasets.dataset_base.BaseDataset.extra_repr"]], "extra_repr() (data.datasets.dataset_base.baseimagedataset method)": [[24, "data.datasets.dataset_base.BaseImageDataset.extra_repr"]], "get_augmentation_transforms() (data.datasets.dataset_base.basedataset method)": [[24, "data.datasets.dataset_base.BaseDataset.get_augmentation_transforms"]], "get_item_metadata() (data.datasets.dataset_base.basedataset method)": [[24, "data.datasets.dataset_base.BaseDataset.get_item_metadata"]], "get_item_metadata() (data.datasets.dataset_base.basevideodataset method)": [[24, "data.datasets.dataset_base.BaseVideoDataset.get_item_metadata"]], "get_test_dataset() (in module data.datasets)": [[24, "data.datasets.get_test_dataset"]], "get_train_val_datasets() (in module data.datasets)": [[24, "data.datasets.get_train_val_datasets"]], "load_from_server() (data.datasets.dataset_base.basedataset static method)": [[24, "data.datasets.dataset_base.BaseDataset.load_from_server"]], "n_frames_per_clip (data.datasets.dataset_base.basevideodataset property)": [[24, "data.datasets.dataset_base.BaseVideoDataset.n_frames_per_clip"]], "read_image_pil() (data.datasets.dataset_base.baseimagedataset static method)": [[24, "data.datasets.dataset_base.BaseImageDataset.read_image_pil"]], "share_dataset_arguments() (data.datasets.dataset_base.basedataset method)": [[24, "data.datasets.dataset_base.BaseDataset.share_dataset_arguments"]], "total_video_frames (data.datasets.dataset_base.videometadatadict attribute)": [[24, "data.datasets.dataset_base.VideoMetadataDict.total_video_frames"]], "video_duration (data.datasets.dataset_base.videometadatadict attribute)": [[24, "data.datasets.dataset_base.VideoMetadataDict.video_duration"]], "video_fps (data.datasets.dataset_base.videometadatadict attribute)": [[24, "data.datasets.dataset_base.VideoMetadataDict.video_fps"]], "speechcommandsv2dataset (class in data.datasets.audio_classification.speech_commands_v2)": [[25, "data.datasets.audio_classification.speech_commands_v2.SpeechCommandsv2Dataset"]], "__init__() (data.datasets.audio_classification.speech_commands_v2.speechcommandsv2dataset method)": [[25, "data.datasets.audio_classification.speech_commands_v2.SpeechCommandsv2Dataset.__init__"]], "add_arguments() (data.datasets.audio_classification.speech_commands_v2.speechcommandsv2dataset class method)": [[25, "data.datasets.audio_classification.speech_commands_v2.SpeechCommandsv2Dataset.add_arguments"]], "data.datasets.audio_classification": [[25, "module-data.datasets.audio_classification"]], "data.datasets.audio_classification.speech_commands_v2": [[25, "module-data.datasets.audio_classification.speech_commands_v2"]], "get_sample() (data.datasets.audio_classification.speech_commands_v2.speechcommandsv2dataset method)": [[25, "data.datasets.audio_classification.speech_commands_v2.SpeechCommandsv2Dataset.get_sample"]], "get_transformed_sample() (data.datasets.audio_classification.speech_commands_v2.speechcommandsv2dataset method)": [[25, "data.datasets.audio_classification.speech_commands_v2.SpeechCommandsv2Dataset.get_transformed_sample"]], "baseimageclassificationdataset (class in data.datasets.classification.base_image_classification_dataset)": [[26, "data.datasets.classification.base_image_classification_dataset.BaseImageClassificationDataset"]], "baseimagenetshiftdataset (class in data.datasets.classification.base_imagenet_shift_dataset)": [[26, "data.datasets.classification.base_imagenet_shift_dataset.BaseImageNetShiftDataset"]], "imagenetadataset (class in data.datasets.classification.imagenet_a)": [[26, "data.datasets.classification.imagenet_a.ImageNetADataset"]], "imagenetdataset (class in data.datasets.classification.imagenet)": [[26, "data.datasets.classification.imagenet.ImageNetDataset"]], "imagenetrdataset (class in data.datasets.classification.imagenet_r)": [[26, "data.datasets.classification.imagenet_r.ImageNetRDataset"]], "imagenetsketchdataset (class in data.datasets.classification.imagenet_sketch)": [[26, "data.datasets.classification.imagenet_sketch.ImageNetSketchDataset"]], "imagenetv2dataset (class in data.datasets.classification.imagenet_v2)": [[26, "data.datasets.classification.imagenet_v2.Imagenetv2Dataset"]], "places365dataset (class in data.datasets.classification.places365)": [[26, "data.datasets.classification.places365.Places365Dataset"]], "__init__() (data.datasets.classification.base_image_classification_dataset.baseimageclassificationdataset method)": [[26, "data.datasets.classification.base_image_classification_dataset.BaseImageClassificationDataset.__init__"]], "__init__() (data.datasets.classification.base_imagenet_shift_dataset.baseimagenetshiftdataset method)": [[26, "data.datasets.classification.base_imagenet_shift_dataset.BaseImageNetShiftDataset.__init__"]], "__init__() (data.datasets.classification.imagenet.imagenetdataset method)": [[26, "data.datasets.classification.imagenet.ImageNetDataset.__init__"]], "__init__() (data.datasets.classification.imagenet_a.imagenetadataset method)": [[26, "data.datasets.classification.imagenet_a.ImageNetADataset.__init__"]], "__init__() (data.datasets.classification.imagenet_r.imagenetrdataset method)": [[26, "data.datasets.classification.imagenet_r.ImageNetRDataset.__init__"]], "__init__() (data.datasets.classification.imagenet_sketch.imagenetsketchdataset method)": [[26, "data.datasets.classification.imagenet_sketch.ImageNetSketchDataset.__init__"]], "__init__() (data.datasets.classification.imagenet_v2.imagenetv2dataset method)": [[26, "data.datasets.classification.imagenet_v2.Imagenetv2Dataset.__init__"]], "__init__() (data.datasets.classification.places365.places365dataset method)": [[26, "data.datasets.classification.places365.Places365Dataset.__init__"]], "add_arguments() (data.datasets.classification.base_image_classification_dataset.baseimageclassificationdataset class method)": [[26, "data.datasets.classification.base_image_classification_dataset.BaseImageClassificationDataset.add_arguments"]], "add_arguments() (data.datasets.classification.imagenet_v2.imagenetv2dataset class method)": [[26, "data.datasets.classification.imagenet_v2.Imagenetv2Dataset.add_arguments"]], "class_id_to_imagenet_class_id() (data.datasets.classification.base_imagenet_shift_dataset.baseimagenetshiftdataset static method)": [[26, "data.datasets.classification.base_imagenet_shift_dataset.BaseImageNetShiftDataset.class_id_to_imagenet_class_id"]], "class_id_to_imagenet_class_id() (data.datasets.classification.imagenet_a.imagenetadataset static method)": [[26, "data.datasets.classification.imagenet_a.ImageNetADataset.class_id_to_imagenet_class_id"]], "class_id_to_imagenet_class_id() (data.datasets.classification.imagenet_r.imagenetrdataset static method)": [[26, "data.datasets.classification.imagenet_r.ImageNetRDataset.class_id_to_imagenet_class_id"]], "class_id_to_imagenet_class_id() (data.datasets.classification.imagenet_sketch.imagenetsketchdataset static method)": [[26, "data.datasets.classification.imagenet_sketch.ImageNetSketchDataset.class_id_to_imagenet_class_id"]], "data.datasets.classification": [[26, "module-data.datasets.classification"]], "data.datasets.classification.base_image_classification_dataset": [[26, "module-data.datasets.classification.base_image_classification_dataset"]], "data.datasets.classification.base_imagenet_shift_dataset": [[26, "module-data.datasets.classification.base_imagenet_shift_dataset"]], "data.datasets.classification.imagenet": [[26, "module-data.datasets.classification.imagenet"]], "data.datasets.classification.imagenet_a": [[26, "module-data.datasets.classification.imagenet_a"]], "data.datasets.classification.imagenet_r": [[26, "module-data.datasets.classification.imagenet_r"]], "data.datasets.classification.imagenet_sketch": [[26, "module-data.datasets.classification.imagenet_sketch"]], "data.datasets.classification.imagenet_synsets": [[26, "module-data.datasets.classification.imagenet_synsets"]], "data.datasets.classification.imagenet_v2": [[26, "module-data.datasets.classification.imagenet_v2"]], "data.datasets.classification.places365": [[26, "module-data.datasets.classification.places365"]], "extra_repr() (data.datasets.classification.base_image_classification_dataset.baseimageclassificationdataset method)": [[26, "data.datasets.classification.base_image_classification_dataset.BaseImageClassificationDataset.extra_repr"]], "post_init_checks() (data.datasets.classification.base_imagenet_shift_dataset.baseimagenetshiftdataset method)": [[26, "data.datasets.classification.base_imagenet_shift_dataset.BaseImageNetShiftDataset.post_init_checks"]], "share_dataset_arguments() (data.datasets.classification.base_image_classification_dataset.baseimageclassificationdataset method)": [[26, "data.datasets.classification.base_image_classification_dataset.BaseImageClassificationDataset.share_dataset_arguments"]], "basedetectiondataset (class in data.datasets.detection.base_detection)": [[27, "data.datasets.detection.base_detection.BaseDetectionDataset"]], "cocodetection (class in data.datasets.detection.coco_base)": [[27, "data.datasets.detection.coco_base.COCODetection"]], "cocodetectionmaskrcnn (class in data.datasets.detection.coco_mask_rcnn)": [[27, "data.datasets.detection.coco_mask_rcnn.COCODetectionMaskRCNN"]], "cocodetectionssd (class in data.datasets.detection.coco_ssd)": [[27, "data.datasets.detection.coco_ssd.COCODetectionSSD"]], "__init__() (data.datasets.detection.base_detection.basedetectiondataset method)": [[27, "data.datasets.detection.base_detection.BaseDetectionDataset.__init__"]], "__init__() (data.datasets.detection.coco_base.cocodetection method)": [[27, "data.datasets.detection.coco_base.COCODetection.__init__"]], "__init__() (data.datasets.detection.coco_mask_rcnn.cocodetectionmaskrcnn method)": [[27, "data.datasets.detection.coco_mask_rcnn.COCODetectionMaskRCNN.__init__"]], "__init__() (data.datasets.detection.coco_ssd.cocodetectionssd method)": [[27, "data.datasets.detection.coco_ssd.COCODetectionSSD.__init__"]], "add_arguments() (data.datasets.detection.base_detection.basedetectiondataset class method)": [[27, "data.datasets.detection.base_detection.BaseDetectionDataset.add_arguments"]], "add_arguments() (data.datasets.detection.coco_base.cocodetection class method)": [[27, "data.datasets.detection.coco_base.COCODetection.add_arguments"]], "add_arguments() (data.datasets.detection.coco_mask_rcnn.cocodetectionmaskrcnn class method)": [[27, "data.datasets.detection.coco_mask_rcnn.COCODetectionMaskRCNN.add_arguments"]], "class_names() (data.datasets.detection.coco_base.cocodetection static method)": [[27, "data.datasets.detection.coco_base.COCODetection.class_names"]], "coco_mask_rcnn_collate_fn() (in module data.datasets.detection.coco_mask_rcnn)": [[27, "data.datasets.detection.coco_mask_rcnn.coco_mask_rcnn_collate_fn"]], "coco_ssd_collate_fn() (in module data.datasets.detection.coco_ssd)": [[27, "data.datasets.detection.coco_ssd.coco_ssd_collate_fn"]], "data.datasets.detection": [[27, "module-data.datasets.detection"]], "data.datasets.detection.base_detection": [[27, "module-data.datasets.detection.base_detection"]], "data.datasets.detection.coco_base": [[27, "module-data.datasets.detection.coco_base"]], "data.datasets.detection.coco_mask_rcnn": [[27, "module-data.datasets.detection.coco_mask_rcnn"]], "data.datasets.detection.coco_ssd": [[27, "module-data.datasets.detection.coco_ssd"]], "extra_repr() (data.datasets.detection.coco_base.cocodetection method)": [[27, "data.datasets.detection.coco_base.COCODetection.extra_repr"]], "extra_repr() (data.datasets.detection.coco_ssd.cocodetectionssd method)": [[27, "data.datasets.detection.coco_ssd.COCODetectionSSD.extra_repr"]], "generate_anchors() (data.datasets.detection.coco_ssd.cocodetectionssd method)": [[27, "data.datasets.detection.coco_ssd.COCODetectionSSD.generate_anchors"]], "get_boxes_and_labels() (data.datasets.detection.coco_base.cocodetection method)": [[27, "data.datasets.detection.coco_base.COCODetection.get_boxes_and_labels"]], "get_image() (data.datasets.detection.coco_base.cocodetection method)": [[27, "data.datasets.detection.coco_base.COCODetection.get_image"]], "share_dataset_arguments() (data.datasets.detection.coco_base.cocodetection method)": [[27, "data.datasets.detection.coco_base.COCODetection.share_dataset_arguments"]], "basemultimodalimgtext (class in data.datasets.multi_modal_img_text.base_multi_modal_img_text)": [[28, "data.datasets.multi_modal_img_text.base_multi_modal_img_text.BaseMultiModalImgText"]], "flickrdataset (class in data.datasets.multi_modal_img_text.flickr)": [[28, "data.datasets.multi_modal_img_text.flickr.FlickrDataset"]], "imgtexttardataset (class in data.datasets.multi_modal_img_text.img_text_tar_dataset)": [[28, "data.datasets.multi_modal_img_text.img_text_tar_dataset.ImgTextTarDataset"]], "__init__() (data.datasets.multi_modal_img_text.base_multi_modal_img_text.basemultimodalimgtext method)": [[28, "data.datasets.multi_modal_img_text.base_multi_modal_img_text.BaseMultiModalImgText.__init__"]], "__init__() (data.datasets.multi_modal_img_text.img_text_tar_dataset.imgtexttardataset method)": [[28, "data.datasets.multi_modal_img_text.img_text_tar_dataset.ImgTextTarDataset.__init__"]], "add_arguments() (data.datasets.multi_modal_img_text.base_multi_modal_img_text.basemultimodalimgtext class method)": [[28, "data.datasets.multi_modal_img_text.base_multi_modal_img_text.BaseMultiModalImgText.add_arguments"]], "add_arguments() (data.datasets.multi_modal_img_text.img_text_tar_dataset.imgtexttardataset class method)": [[28, "data.datasets.multi_modal_img_text.img_text_tar_dataset.ImgTextTarDataset.add_arguments"]], "arguments_multi_modal_img_text() (in module data.datasets.multi_modal_img_text)": [[28, "data.datasets.multi_modal_img_text.arguments_multi_modal_img_text"]], "async_download_file_from_s3() (in module data.datasets.multi_modal_img_text.img_text_tar_dataset)": [[28, "data.datasets.multi_modal_img_text.img_text_tar_dataset.async_download_file_from_s3"]], "data.datasets.multi_modal_img_text": [[28, "module-data.datasets.multi_modal_img_text"]], "data.datasets.multi_modal_img_text.base_multi_modal_img_text": [[28, "module-data.datasets.multi_modal_img_text.base_multi_modal_img_text"]], "data.datasets.multi_modal_img_text.flickr": [[28, "module-data.datasets.multi_modal_img_text.flickr"]], "data.datasets.multi_modal_img_text.img_text_tar_dataset": [[28, "module-data.datasets.multi_modal_img_text.img_text_tar_dataset"]], "decode_image() (in module data.datasets.multi_modal_img_text.img_text_tar_dataset)": [[28, "data.datasets.multi_modal_img_text.img_text_tar_dataset.decode_image"]], "decode_text() (in module data.datasets.multi_modal_img_text.img_text_tar_dataset)": [[28, "data.datasets.multi_modal_img_text.img_text_tar_dataset.decode_text"]], "extra_repr() (data.datasets.multi_modal_img_text.base_multi_modal_img_text.basemultimodalimgtext method)": [[28, "data.datasets.multi_modal_img_text.base_multi_modal_img_text.BaseMultiModalImgText.extra_repr"]], "extract_content() (in module data.datasets.multi_modal_img_text.img_text_tar_dataset)": [[28, "data.datasets.multi_modal_img_text.img_text_tar_dataset.extract_content"]], "get_dataset() (data.datasets.multi_modal_img_text.base_multi_modal_img_text.basemultimodalimgtext method)": [[28, "data.datasets.multi_modal_img_text.base_multi_modal_img_text.BaseMultiModalImgText.get_dataset"]], "get_dataset() (data.datasets.multi_modal_img_text.flickr.flickrdataset method)": [[28, "data.datasets.multi_modal_img_text.flickr.FlickrDataset.get_dataset"]], "get_dataset() (data.datasets.multi_modal_img_text.img_text_tar_dataset.imgtexttardataset method)": [[28, "data.datasets.multi_modal_img_text.img_text_tar_dataset.ImgTextTarDataset.get_dataset"]], "get_dataset_pair() (data.datasets.multi_modal_img_text.base_multi_modal_img_text.basemultimodalimgtext method)": [[28, "data.datasets.multi_modal_img_text.base_multi_modal_img_text.BaseMultiModalImgText.get_dataset_pair"]], "get_dataset_pair() (data.datasets.multi_modal_img_text.img_text_tar_dataset.imgtexttardataset method)": [[28, "data.datasets.multi_modal_img_text.img_text_tar_dataset.ImgTextTarDataset.get_dataset_pair"]], "get_zero_shot_dataset() (data.datasets.multi_modal_img_text.base_multi_modal_img_text.basemultimodalimgtext method)": [[28, "data.datasets.multi_modal_img_text.base_multi_modal_img_text.BaseMultiModalImgText.get_zero_shot_dataset"]], "get_zero_shot_pair() (data.datasets.multi_modal_img_text.base_multi_modal_img_text.basemultimodalimgtext method)": [[28, "data.datasets.multi_modal_img_text.base_multi_modal_img_text.BaseMultiModalImgText.get_zero_shot_pair"]], "multi_modal_img_text_collate_fn() (in module data.datasets.multi_modal_img_text.base_multi_modal_img_text)": [[28, "data.datasets.multi_modal_img_text.base_multi_modal_img_text.multi_modal_img_text_collate_fn"]], "share_dataset_arguments() (data.datasets.multi_modal_img_text.base_multi_modal_img_text.basemultimodalimgtext method)": [[28, "data.datasets.multi_modal_img_text.base_multi_modal_img_text.BaseMultiModalImgText.share_dataset_arguments"]], "basezeroshotdataset (class in data.datasets.multi_modal_img_text.zero_shot.base_zero_shot)": [[29, "data.datasets.multi_modal_img_text.zero_shot.base_zero_shot.BaseZeroShotDataset"]], "imagenetdatasetzeroshot (class in data.datasets.multi_modal_img_text.zero_shot.imagenet)": [[29, "data.datasets.multi_modal_img_text.zero_shot.imagenet.ImageNetDatasetZeroShot"]], "__init__() (data.datasets.multi_modal_img_text.zero_shot.base_zero_shot.basezeroshotdataset method)": [[29, "data.datasets.multi_modal_img_text.zero_shot.base_zero_shot.BaseZeroShotDataset.__init__"]], "__init__() (data.datasets.multi_modal_img_text.zero_shot.imagenet.imagenetdatasetzeroshot method)": [[29, "data.datasets.multi_modal_img_text.zero_shot.imagenet.ImageNetDatasetZeroShot.__init__"]], "add_arguments() (data.datasets.multi_modal_img_text.zero_shot.base_zero_shot.basezeroshotdataset class method)": [[29, "data.datasets.multi_modal_img_text.zero_shot.base_zero_shot.BaseZeroShotDataset.add_arguments"]], "arguments_zero_shot_dataset() (in module data.datasets.multi_modal_img_text.zero_shot)": [[29, "data.datasets.multi_modal_img_text.zero_shot.arguments_zero_shot_dataset"]], "build_zero_shot_dataset() (in module data.datasets.multi_modal_img_text.zero_shot)": [[29, "data.datasets.multi_modal_img_text.zero_shot.build_zero_shot_dataset"]], "class_names() (data.datasets.multi_modal_img_text.zero_shot.base_zero_shot.basezeroshotdataset class method)": [[29, "data.datasets.multi_modal_img_text.zero_shot.base_zero_shot.BaseZeroShotDataset.class_names"]], "class_names() (data.datasets.multi_modal_img_text.zero_shot.imagenet.imagenetdatasetzeroshot class method)": [[29, "data.datasets.multi_modal_img_text.zero_shot.imagenet.ImageNetDatasetZeroShot.class_names"]], "data.datasets.multi_modal_img_text.zero_shot": [[29, "module-data.datasets.multi_modal_img_text.zero_shot"]], "data.datasets.multi_modal_img_text.zero_shot.base_zero_shot": [[29, "module-data.datasets.multi_modal_img_text.zero_shot.base_zero_shot"]], "data.datasets.multi_modal_img_text.zero_shot.imagenet": [[29, "module-data.datasets.multi_modal_img_text.zero_shot.imagenet"]], "data.datasets.multi_modal_img_text.zero_shot.imagenet_class_names": [[29, "module-data.datasets.multi_modal_img_text.zero_shot.imagenet_class_names"]], "data.datasets.multi_modal_img_text.zero_shot.templates": [[29, "module-data.datasets.multi_modal_img_text.zero_shot.templates"]], "generate_text_prompts() (data.datasets.multi_modal_img_text.zero_shot.base_zero_shot.basezeroshotdataset static method)": [[29, "data.datasets.multi_modal_img_text.zero_shot.base_zero_shot.BaseZeroShotDataset.generate_text_prompts"]], "generate_text_prompts() (data.datasets.multi_modal_img_text.zero_shot.imagenet.imagenetdatasetzeroshot static method)": [[29, "data.datasets.multi_modal_img_text.zero_shot.imagenet.ImageNetDatasetZeroShot.generate_text_prompts"]], "generate_text_prompts_clip() (in module data.datasets.multi_modal_img_text.zero_shot.templates)": [[29, "data.datasets.multi_modal_img_text.zero_shot.templates.generate_text_prompts_clip"]], "ade20kdataset (class in data.datasets.segmentation.ade20k)": [[30, "data.datasets.segmentation.ade20k.ADE20KDataset"]], "baseimagesegmentationdataset (class in data.datasets.segmentation.base_segmentation)": [[30, "data.datasets.segmentation.base_segmentation.BaseImageSegmentationDataset"]], "cocosegmentationdataset (class in data.datasets.segmentation.coco_segmentation)": [[30, "data.datasets.segmentation.coco_segmentation.COCOSegmentationDataset"]], "pascalvocdataset (class in data.datasets.segmentation.pascal_voc)": [[30, "data.datasets.segmentation.pascal_voc.PascalVOCDataset"]], "__init__() (data.datasets.segmentation.ade20k.ade20kdataset method)": [[30, "data.datasets.segmentation.ade20k.ADE20KDataset.__init__"]], "__init__() (data.datasets.segmentation.base_segmentation.baseimagesegmentationdataset method)": [[30, "data.datasets.segmentation.base_segmentation.BaseImageSegmentationDataset.__init__"]], "__init__() (data.datasets.segmentation.coco_segmentation.cocosegmentationdataset method)": [[30, "data.datasets.segmentation.coco_segmentation.COCOSegmentationDataset.__init__"]], "__init__() (data.datasets.segmentation.pascal_voc.pascalvocdataset method)": [[30, "data.datasets.segmentation.pascal_voc.PascalVOCDataset.__init__"]], "add_arguments() (data.datasets.segmentation.base_segmentation.baseimagesegmentationdataset class method)": [[30, "data.datasets.segmentation.base_segmentation.BaseImageSegmentationDataset.add_arguments"]], "add_arguments() (data.datasets.segmentation.pascal_voc.pascalvocdataset class method)": [[30, "data.datasets.segmentation.pascal_voc.PascalVOCDataset.add_arguments"]], "adjust_mask_value() (data.datasets.segmentation.ade20k.ade20kdataset static method)": [[30, "data.datasets.segmentation.ade20k.ADE20KDataset.adjust_mask_value"]], "adjust_mask_value() (data.datasets.segmentation.base_segmentation.baseimagesegmentationdataset static method)": [[30, "data.datasets.segmentation.base_segmentation.BaseImageSegmentationDataset.adjust_mask_value"]], "check_dataset() (data.datasets.segmentation.base_segmentation.baseimagesegmentationdataset method)": [[30, "data.datasets.segmentation.base_segmentation.BaseImageSegmentationDataset.check_dataset"]], "class_names() (data.datasets.segmentation.ade20k.ade20kdataset static method)": [[30, "data.datasets.segmentation.ade20k.ADE20KDataset.class_names"]], "class_names() (data.datasets.segmentation.base_segmentation.baseimagesegmentationdataset static method)": [[30, "data.datasets.segmentation.base_segmentation.BaseImageSegmentationDataset.class_names"]], "class_names() (data.datasets.segmentation.coco_segmentation.cocosegmentationdataset static method)": [[30, "data.datasets.segmentation.coco_segmentation.COCOSegmentationDataset.class_names"]], "class_names() (data.datasets.segmentation.pascal_voc.pascalvocdataset static method)": [[30, "data.datasets.segmentation.pascal_voc.PascalVOCDataset.class_names"]], "coco_to_pascal_mapping() (data.datasets.segmentation.coco_segmentation.cocosegmentationdataset static method)": [[30, "data.datasets.segmentation.coco_segmentation.COCOSegmentationDataset.coco_to_pascal_mapping"]], "color_palette() (data.datasets.segmentation.ade20k.ade20kdataset static method)": [[30, "data.datasets.segmentation.ade20k.ADE20KDataset.color_palette"]], "color_palette() (data.datasets.segmentation.base_segmentation.baseimagesegmentationdataset static method)": [[30, "data.datasets.segmentation.base_segmentation.BaseImageSegmentationDataset.color_palette"]], "color_palette() (data.datasets.segmentation.pascal_voc.pascalvocdataset static method)": [[30, "data.datasets.segmentation.pascal_voc.PascalVOCDataset.color_palette"]], "convert_mask_to_tensor() (data.datasets.segmentation.base_segmentation.baseimagesegmentationdataset static method)": [[30, "data.datasets.segmentation.base_segmentation.BaseImageSegmentationDataset.convert_mask_to_tensor"]], "data.datasets.segmentation": [[30, "module-data.datasets.segmentation"]], "data.datasets.segmentation.ade20k": [[30, "module-data.datasets.segmentation.ade20k"]], "data.datasets.segmentation.base_segmentation": [[30, "module-data.datasets.segmentation.base_segmentation"]], "data.datasets.segmentation.coco_segmentation": [[30, "module-data.datasets.segmentation.coco_segmentation"]], "data.datasets.segmentation.pascal_voc": [[30, "module-data.datasets.segmentation.pascal_voc"]], "read_mask_pil() (data.datasets.segmentation.base_segmentation.baseimagesegmentationdataset static method)": [[30, "data.datasets.segmentation.base_segmentation.BaseImageSegmentationDataset.read_mask_pil"]], "caption_preprocessing() (in module data.datasets.utils.text)": [[31, "data.datasets.utils.text.caption_preprocessing"]], "data.datasets.utils": [[31, "module-data.datasets.utils"]], "data.datasets.utils.common": [[31, "module-data.datasets.utils.common"]], "data.datasets.utils.text": [[31, "module-data.datasets.utils.text"]], "data.datasets.utils.video": [[31, "module-data.datasets.utils.video"]], "fetch_labels_from_timestamps() (in module data.datasets.utils.video)": [[31, "data.datasets.utils.video.fetch_labels_from_timestamps"]], "file_has_allowed_extension() (in module data.datasets.utils.common)": [[31, "data.datasets.utils.common.file_has_allowed_extension"]], "file_has_valid_image_extension() (in module data.datasets.utils.common)": [[31, "data.datasets.utils.common.file_has_valid_image_extension"]], "get_image_paths() (in module data.datasets.utils.common)": [[31, "data.datasets.utils.common.get_image_paths"]], "select_random_subset() (in module data.datasets.utils.common)": [[31, "data.datasets.utils.common.select_random_subset"]], "select_samples_by_category() (in module data.datasets.utils.common)": [[31, "data.datasets.utils.common.select_samples_by_category"]], "cvnetsdataloader (class in data.loader.dataloader)": [[32, "data.loader.dataloader.CVNetsDataLoader"]], "__init__() (data.loader.dataloader.cvnetsdataloader method)": [[32, "data.loader.dataloader.CVNetsDataLoader.__init__"]], "data.loader": [[32, "module-data.loader"]], "data.loader.dataloader": [[32, "module-data.loader.dataloader"]], "get_sample_indices() (data.loader.dataloader.cvnetsdataloader method)": [[32, "data.loader.dataloader.CVNetsDataLoader.get_sample_indices"]], "samples_in_dataset() (data.loader.dataloader.cvnetsdataloader method)": [[32, "data.loader.dataloader.CVNetsDataLoader.samples_in_dataset"]], "update_indices() (data.loader.dataloader.cvnetsdataloader method)": [[32, "data.loader.dataloader.CVNetsDataLoader.update_indices"]], "basesampler (class in data.sampler.base_sampler)": [[33, "data.sampler.base_sampler.BaseSampler"]], "basesamplerddp (class in data.sampler.base_sampler)": [[33, "data.sampler.base_sampler.BaseSamplerDDP"]], "batchsampler (class in data.sampler.batch_sampler)": [[33, "data.sampler.batch_sampler.BatchSampler"], [55, "data.sampler.batch_sampler.BatchSampler"]], "batchsamplerddp (class in data.sampler.batch_sampler)": [[33, "data.sampler.batch_sampler.BatchSamplerDDP"], [55, "data.sampler.batch_sampler.BatchSamplerDDP"]], "chainsampler (class in data.sampler.chain_sampler)": [[33, "data.sampler.chain_sampler.ChainSampler"]], "multiscalesampler (class in data.sampler.multi_scale_sampler)": [[33, "data.sampler.multi_scale_sampler.MultiScaleSampler"], [55, "data.sampler.multi_scale_sampler.MultiScaleSampler"]], "multiscalesamplerddp (class in data.sampler.multi_scale_sampler)": [[33, "data.sampler.multi_scale_sampler.MultiScaleSamplerDDP"], [55, "data.sampler.multi_scale_sampler.MultiScaleSamplerDDP"]], "variablebatchsampler (class in data.sampler.variable_batch_sampler)": [[33, "data.sampler.variable_batch_sampler.VariableBatchSampler"], [55, "data.sampler.variable_batch_sampler.VariableBatchSampler"]], "variablebatchsamplerddp (class in data.sampler.variable_batch_sampler)": [[33, "data.sampler.variable_batch_sampler.VariableBatchSamplerDDP"], [55, "data.sampler.variable_batch_sampler.VariableBatchSamplerDDP"]], "__init__() (data.sampler.base_sampler.basesampler method)": [[33, "data.sampler.base_sampler.BaseSampler.__init__"]], "__init__() (data.sampler.base_sampler.basesamplerddp method)": [[33, "data.sampler.base_sampler.BaseSamplerDDP.__init__"]], "__init__() (data.sampler.batch_sampler.batchsampler method)": [[33, "data.sampler.batch_sampler.BatchSampler.__init__"], [55, "data.sampler.batch_sampler.BatchSampler.__init__"]], "__init__() (data.sampler.batch_sampler.batchsamplerddp method)": [[33, "data.sampler.batch_sampler.BatchSamplerDDP.__init__"], [55, "data.sampler.batch_sampler.BatchSamplerDDP.__init__"]], "__init__() (data.sampler.chain_sampler.chainsampler method)": [[33, "data.sampler.chain_sampler.ChainSampler.__init__"]], "__init__() (data.sampler.multi_scale_sampler.multiscalesampler method)": [[33, "data.sampler.multi_scale_sampler.MultiScaleSampler.__init__"], [55, "data.sampler.multi_scale_sampler.MultiScaleSampler.__init__"]], "__init__() (data.sampler.multi_scale_sampler.multiscalesamplerddp method)": [[33, "data.sampler.multi_scale_sampler.MultiScaleSamplerDDP.__init__"], [55, "data.sampler.multi_scale_sampler.MultiScaleSamplerDDP.__init__"]], "__init__() (data.sampler.variable_batch_sampler.variablebatchsampler method)": [[33, "data.sampler.variable_batch_sampler.VariableBatchSampler.__init__"], [55, "data.sampler.variable_batch_sampler.VariableBatchSampler.__init__"]], "__init__() (data.sampler.variable_batch_sampler.variablebatchsamplerddp method)": [[33, "data.sampler.variable_batch_sampler.VariableBatchSamplerDDP.__init__"], [55, "data.sampler.variable_batch_sampler.VariableBatchSamplerDDP.__init__"]], "add_arguments() (data.sampler.base_sampler.basesampler class method)": [[33, "data.sampler.base_sampler.BaseSampler.add_arguments"]], "add_arguments() (data.sampler.base_sampler.basesamplerddp class method)": [[33, "data.sampler.base_sampler.BaseSamplerDDP.add_arguments"]], "add_arguments() (data.sampler.batch_sampler.batchsampler class method)": [[33, "data.sampler.batch_sampler.BatchSampler.add_arguments"], [55, "data.sampler.batch_sampler.BatchSampler.add_arguments"]], "add_arguments() (data.sampler.chain_sampler.chainsampler class method)": [[33, "data.sampler.chain_sampler.ChainSampler.add_arguments"]], "add_arguments() (data.sampler.multi_scale_sampler.multiscalesampler class method)": [[33, "data.sampler.multi_scale_sampler.MultiScaleSampler.add_arguments"], [55, "data.sampler.multi_scale_sampler.MultiScaleSampler.add_arguments"]], "add_arguments() (data.sampler.variable_batch_sampler.variablebatchsampler class method)": [[33, "data.sampler.variable_batch_sampler.VariableBatchSampler.add_arguments"], [55, "data.sampler.variable_batch_sampler.VariableBatchSampler.add_arguments"]], "add_sampler_arguments() (in module data.sampler)": [[33, "data.sampler.add_sampler_arguments"]], "build_chain_sampler() (data.sampler.chain_sampler.chainsampler class method)": [[33, "data.sampler.chain_sampler.ChainSampler.build_chain_sampler"]], "build_sampler() (in module data.sampler)": [[33, "data.sampler.build_sampler"]], "create_intervallic_integer_list() (in module data.sampler.utils)": [[33, "data.sampler.utils.create_intervallic_integer_list"]], "data.sampler": [[33, "module-data.sampler"]], "data.sampler.base_sampler": [[33, "module-data.sampler.base_sampler"]], "data.sampler.batch_sampler": [[33, "module-data.sampler.batch_sampler"], [55, "module-data.sampler.batch_sampler"]], "data.sampler.chain_sampler": [[33, "module-data.sampler.chain_sampler"]], "data.sampler.multi_scale_sampler": [[33, "module-data.sampler.multi_scale_sampler"], [55, "module-data.sampler.multi_scale_sampler"]], "data.sampler.utils": [[33, "module-data.sampler.utils"]], "data.sampler.variable_batch_sampler": [[33, "module-data.sampler.variable_batch_sampler"], [55, "module-data.sampler.variable_batch_sampler"]], "extra_repr() (data.sampler.base_sampler.basesampler method)": [[33, "data.sampler.base_sampler.BaseSampler.extra_repr"]], "extra_repr() (data.sampler.base_sampler.basesamplerddp method)": [[33, "data.sampler.base_sampler.BaseSamplerDDP.extra_repr"]], "extra_repr() (data.sampler.batch_sampler.batchsampler method)": [[33, "data.sampler.batch_sampler.BatchSampler.extra_repr"], [55, "data.sampler.batch_sampler.BatchSampler.extra_repr"]], "extra_repr() (data.sampler.batch_sampler.batchsamplerddp method)": [[33, "data.sampler.batch_sampler.BatchSamplerDDP.extra_repr"], [55, "data.sampler.batch_sampler.BatchSamplerDDP.extra_repr"]], "extra_repr() (data.sampler.multi_scale_sampler.multiscalesampler method)": [[33, "data.sampler.multi_scale_sampler.MultiScaleSampler.extra_repr"], [55, "data.sampler.multi_scale_sampler.MultiScaleSampler.extra_repr"]], "extra_repr() (data.sampler.multi_scale_sampler.multiscalesamplerddp method)": [[33, "data.sampler.multi_scale_sampler.MultiScaleSamplerDDP.extra_repr"], [55, "data.sampler.multi_scale_sampler.MultiScaleSamplerDDP.extra_repr"]], "extra_repr() (data.sampler.variable_batch_sampler.variablebatchsampler method)": [[33, "data.sampler.variable_batch_sampler.VariableBatchSampler.extra_repr"], [55, "data.sampler.variable_batch_sampler.VariableBatchSampler.extra_repr"]], "extra_repr() (data.sampler.variable_batch_sampler.variablebatchsamplerddp method)": [[33, "data.sampler.variable_batch_sampler.VariableBatchSamplerDDP.extra_repr"], [55, "data.sampler.variable_batch_sampler.VariableBatchSamplerDDP.extra_repr"]], "get_batch_size_from_opts() (in module data.sampler.base_sampler)": [[33, "data.sampler.base_sampler.get_batch_size_from_opts"]], "get_indices() (data.sampler.base_sampler.basesampler method)": [[33, "data.sampler.base_sampler.BaseSampler.get_indices"]], "get_indices_rank_i() (data.sampler.base_sampler.basesamplerddp method)": [[33, "data.sampler.base_sampler.BaseSamplerDDP.get_indices_rank_i"]], "image_batch_pairs() (in module data.sampler.utils)": [[33, "data.sampler.utils.image_batch_pairs"]], "make_tuple_list() (in module data.sampler.utils)": [[33, "data.sampler.utils.make_tuple_list"]], "make_video_pairs() (in module data.sampler.utils)": [[33, "data.sampler.utils.make_video_pairs"]], "set_epoch() (data.sampler.base_sampler.basesampler method)": [[33, "data.sampler.base_sampler.BaseSampler.set_epoch"]], "set_epoch() (data.sampler.base_sampler.basesamplerddp method)": [[33, "data.sampler.base_sampler.BaseSamplerDDP.set_epoch"]], "set_epoch() (data.sampler.chain_sampler.chainsampler method)": [[33, "data.sampler.chain_sampler.ChainSampler.set_epoch"]], "update_indices() (data.sampler.base_sampler.basesampler method)": [[33, "data.sampler.base_sampler.BaseSampler.update_indices"]], "update_indices() (data.sampler.base_sampler.basesamplerddp method)": [[33, "data.sampler.base_sampler.BaseSamplerDDP.update_indices"]], "update_indices() (data.sampler.chain_sampler.chainsampler method)": [[33, "data.sampler.chain_sampler.ChainSampler.update_indices"]], "update_scales() (data.sampler.base_sampler.basesampler method)": [[33, "data.sampler.base_sampler.BaseSampler.update_scales"]], "update_scales() (data.sampler.base_sampler.basesamplerddp method)": [[33, "data.sampler.base_sampler.BaseSamplerDDP.update_scales"]], "update_scales() (data.sampler.chain_sampler.chainsampler method)": [[33, "data.sampler.chain_sampler.ChainSampler.update_scales"]], "update_scales() (data.sampler.multi_scale_sampler.multiscalesampler method)": [[33, "data.sampler.multi_scale_sampler.MultiScaleSampler.update_scales"], [55, "data.sampler.multi_scale_sampler.MultiScaleSampler.update_scales"]], "update_scales() (data.sampler.multi_scale_sampler.multiscalesamplerddp method)": [[33, "data.sampler.multi_scale_sampler.MultiScaleSamplerDDP.update_scales"], [55, "data.sampler.multi_scale_sampler.MultiScaleSamplerDDP.update_scales"]], "update_scales() (data.sampler.variable_batch_sampler.variablebatchsampler method)": [[33, "data.sampler.variable_batch_sampler.VariableBatchSampler.update_scales"], [55, "data.sampler.variable_batch_sampler.VariableBatchSampler.update_scales"]], "update_scales() (data.sampler.variable_batch_sampler.variablebatchsamplerddp method)": [[33, "data.sampler.variable_batch_sampler.VariableBatchSamplerDDP.update_scales"], [55, "data.sampler.variable_batch_sampler.VariableBatchSamplerDDP.update_scales"]], "basetokenizer (class in data.text_tokenizer.base_tokenizer)": [[34, "data.text_tokenizer.base_tokenizer.BaseTokenizer"]], "cliptokenizer (class in data.text_tokenizer.clip_tokenizer)": [[34, "data.text_tokenizer.clip_tokenizer.ClipTokenizer"]], "__init__() (data.text_tokenizer.base_tokenizer.basetokenizer method)": [[34, "data.text_tokenizer.base_tokenizer.BaseTokenizer.__init__"]], "__init__() (data.text_tokenizer.clip_tokenizer.cliptokenizer method)": [[34, "data.text_tokenizer.clip_tokenizer.ClipTokenizer.__init__"]], "add_arguments() (data.text_tokenizer.base_tokenizer.basetokenizer class method)": [[34, "data.text_tokenizer.base_tokenizer.BaseTokenizer.add_arguments"]], "add_arguments() (data.text_tokenizer.clip_tokenizer.cliptokenizer class method)": [[34, "data.text_tokenizer.clip_tokenizer.ClipTokenizer.add_arguments"]], "arguments_tokenizer() (in module data.text_tokenizer)": [[34, "data.text_tokenizer.arguments_tokenizer"]], "build_tokenizer() (in module data.text_tokenizer)": [[34, "data.text_tokenizer.build_tokenizer"]], "data.text_tokenizer": [[34, "module-data.text_tokenizer"]], "data.text_tokenizer.base_tokenizer": [[34, "module-data.text_tokenizer.base_tokenizer"]], "data.text_tokenizer.clip_tokenizer": [[34, "module-data.text_tokenizer.clip_tokenizer"]], "forward() (data.text_tokenizer.base_tokenizer.basetokenizer method)": [[34, "data.text_tokenizer.base_tokenizer.BaseTokenizer.forward"]], "forward() (data.text_tokenizer.clip_tokenizer.cliptokenizer method)": [[34, "data.text_tokenizer.clip_tokenizer.ClipTokenizer.forward"]], "get_encodings() (data.text_tokenizer.base_tokenizer.basetokenizer method)": [[34, "data.text_tokenizer.base_tokenizer.BaseTokenizer.get_encodings"]], "get_encodings() (data.text_tokenizer.clip_tokenizer.cliptokenizer method)": [[34, "data.text_tokenizer.clip_tokenizer.ClipTokenizer.get_encodings"]], "get_eot_token() (data.text_tokenizer.base_tokenizer.basetokenizer method)": [[34, "data.text_tokenizer.base_tokenizer.BaseTokenizer.get_eot_token"]], "get_eot_token() (data.text_tokenizer.clip_tokenizer.cliptokenizer method)": [[34, "data.text_tokenizer.clip_tokenizer.ClipTokenizer.get_eot_token"]], "get_sot_token() (data.text_tokenizer.base_tokenizer.basetokenizer method)": [[34, "data.text_tokenizer.base_tokenizer.BaseTokenizer.get_sot_token"]], "get_sot_token() (data.text_tokenizer.clip_tokenizer.cliptokenizer method)": [[34, "data.text_tokenizer.clip_tokenizer.ClipTokenizer.get_sot_token"]], "get_vocab_size() (data.text_tokenizer.base_tokenizer.basetokenizer method)": [[34, "data.text_tokenizer.base_tokenizer.BaseTokenizer.get_vocab_size"]], "get_vocab_size() (data.text_tokenizer.clip_tokenizer.cliptokenizer method)": [[34, "data.text_tokenizer.clip_tokenizer.ClipTokenizer.get_vocab_size"]], "audioresample (class in data.transforms.audio)": [[35, "data.transforms.audio.AudioResample"]], "autoaugment (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.AutoAugment"]], "basetransformation (class in data.transforms.base_transforms)": [[35, "data.transforms.base_transforms.BaseTransformation"]], "boxpercentcoords (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.BoxPercentCoords"]], "bytepermutation (class in data.transforms.image_bytes)": [[35, "data.transforms.image_bytes.BytePermutation"]], "centercrop (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.CenterCrop"]], "centercrop (class in data.transforms.video)": [[35, "data.transforms.video.CenterCrop"]], "compose (class in data.transforms.common)": [[35, "data.transforms.common.Compose"]], "cropbyboundingbox (class in data.transforms.video)": [[35, "data.transforms.video.CropByBoundingBox"]], "fixedsizecrop (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.FixedSizeCrop"]], "gain (class in data.transforms.audio)": [[35, "data.transforms.audio.Gain"]], "instanceprocessor (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.InstanceProcessor"]], "lambdaaudio (class in data.transforms.audio)": [[35, "data.transforms.audio.LambdaAudio"]], "mfccs (class in data.transforms.audio)": [[35, "data.transforms.audio.MFCCs"]], "maskpositions (class in data.transforms.image_bytes)": [[35, "data.transforms.image_bytes.MaskPositions"]], "noise (class in data.transforms.audio)": [[35, "data.transforms.audio.Noise"]], "pilsave (class in data.transforms.image_bytes)": [[35, "data.transforms.image_bytes.PILSave"]], "photometricdistort (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.PhotometricDistort"]], "randaugment (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.RandAugment"]], "randaugmenttimm (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.RandAugmentTimm"]], "randomcrop (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.RandomCrop"]], "randomcrop (class in data.transforms.video)": [[35, "data.transforms.video.RandomCrop"]], "randomcutmix (class in data.transforms.image_torch)": [[35, "data.transforms.image_torch.RandomCutmix"]], "randomerasing (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.RandomErasing"]], "randomgaussianblur (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.RandomGaussianBlur"]], "randomhorizontalflip (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.RandomHorizontalFlip"]], "randomhorizontalflip (class in data.transforms.video)": [[35, "data.transforms.video.RandomHorizontalFlip"]], "randommixup (class in data.transforms.image_torch)": [[35, "data.transforms.image_torch.RandomMixup"]], "randomorder (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.RandomOrder"]], "randomresize (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.RandomResize"]], "randomresizedcrop (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.RandomResizedCrop"]], "randomresizedcrop (class in data.transforms.video)": [[35, "data.transforms.video.RandomResizedCrop"]], "randomrotate (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.RandomRotate"]], "randomshortsizeresize (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.RandomShortSizeResize"]], "randomshortsizeresizecrop (class in data.transforms.video)": [[35, "data.transforms.video.RandomShortSizeResizeCrop"]], "randomuniformnoise (class in data.transforms.image_bytes)": [[35, "data.transforms.image_bytes.RandomUniformNoise"]], "resize (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.Resize"]], "resize (class in data.transforms.video)": [[35, "data.transforms.video.Resize"]], "roll (class in data.transforms.audio)": [[35, "data.transforms.audio.Roll"]], "ssdcroping (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.SSDCroping"]], "saveinputs (class in data.transforms.video)": [[35, "data.transforms.video.SaveInputs"]], "scalejitter (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.ScaleJitter"]], "setfixedlength (class in data.transforms.audio)": [[35, "data.transforms.audio.SetFixedLength"]], "shuffleaudios (class in data.transforms.video)": [[35, "data.transforms.video.ShuffleAudios"]], "shufflebytes (class in data.transforms.image_bytes)": [[35, "data.transforms.image_bytes.ShuffleBytes"]], "standardizechannels (class in data.transforms.audio)": [[35, "data.transforms.audio.StandardizeChannels"]], "totensor (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.ToTensor"]], "totensor (class in data.transforms.video)": [[35, "data.transforms.video.ToTensor"]], "torchaudiosave (class in data.transforms.audio_bytes)": [[35, "data.transforms.audio_bytes.TorchaudioSave"]], "trivialaugmentwide (class in data.transforms.image_pil)": [[35, "data.transforms.image_pil.TrivialAugmentWide"]], "__init__() (data.transforms.audio.audioresample method)": [[35, "data.transforms.audio.AudioResample.__init__"]], "__init__() (data.transforms.audio.gain method)": [[35, "data.transforms.audio.Gain.__init__"]], "__init__() (data.transforms.audio.lambdaaudio method)": [[35, "data.transforms.audio.LambdaAudio.__init__"]], "__init__() (data.transforms.audio.mfccs method)": [[35, "data.transforms.audio.MFCCs.__init__"]], "__init__() (data.transforms.audio.noise method)": [[35, "data.transforms.audio.Noise.__init__"]], "__init__() (data.transforms.audio.roll method)": [[35, "data.transforms.audio.Roll.__init__"]], "__init__() (data.transforms.audio.setfixedlength method)": [[35, "data.transforms.audio.SetFixedLength.__init__"]], "__init__() (data.transforms.audio.standardizechannels method)": [[35, "data.transforms.audio.StandardizeChannels.__init__"]], "__init__() (data.transforms.audio_bytes.torchaudiosave method)": [[35, "data.transforms.audio_bytes.TorchaudioSave.__init__"]], "__init__() (data.transforms.base_transforms.basetransformation method)": [[35, "data.transforms.base_transforms.BaseTransformation.__init__"]], "__init__() (data.transforms.common.compose method)": [[35, "data.transforms.common.Compose.__init__"]], "__init__() (data.transforms.image_bytes.bytepermutation method)": [[35, "data.transforms.image_bytes.BytePermutation.__init__"]], "__init__() (data.transforms.image_bytes.maskpositions method)": [[35, "data.transforms.image_bytes.MaskPositions.__init__"]], "__init__() (data.transforms.image_bytes.pilsave method)": [[35, "data.transforms.image_bytes.PILSave.__init__"]], "__init__() (data.transforms.image_bytes.randomuniformnoise method)": [[35, "data.transforms.image_bytes.RandomUniformNoise.__init__"]], "__init__() (data.transforms.image_bytes.shufflebytes method)": [[35, "data.transforms.image_bytes.ShuffleBytes.__init__"]], "__init__() (data.transforms.image_pil.autoaugment method)": [[35, "data.transforms.image_pil.AutoAugment.__init__"]], "__init__() (data.transforms.image_pil.boxpercentcoords method)": [[35, "data.transforms.image_pil.BoxPercentCoords.__init__"]], "__init__() (data.transforms.image_pil.centercrop method)": [[35, "data.transforms.image_pil.CenterCrop.__init__"]], "__init__() (data.transforms.image_pil.fixedsizecrop method)": [[35, "data.transforms.image_pil.FixedSizeCrop.__init__"]], "__init__() (data.transforms.image_pil.instanceprocessor method)": [[35, "data.transforms.image_pil.InstanceProcessor.__init__"]], "__init__() (data.transforms.image_pil.photometricdistort method)": [[35, "data.transforms.image_pil.PhotometricDistort.__init__"]], "__init__() (data.transforms.image_pil.randaugment method)": [[35, "data.transforms.image_pil.RandAugment.__init__"]], "__init__() (data.transforms.image_pil.randaugmenttimm method)": [[35, "data.transforms.image_pil.RandAugmentTimm.__init__"]], "__init__() (data.transforms.image_pil.randomcrop method)": [[35, "data.transforms.image_pil.RandomCrop.__init__"]], "__init__() (data.transforms.image_pil.randomerasing method)": [[35, "data.transforms.image_pil.RandomErasing.__init__"]], "__init__() (data.transforms.image_pil.randomgaussianblur method)": [[35, "data.transforms.image_pil.RandomGaussianBlur.__init__"]], "__init__() (data.transforms.image_pil.randomhorizontalflip method)": [[35, "data.transforms.image_pil.RandomHorizontalFlip.__init__"]], "__init__() (data.transforms.image_pil.randomorder method)": [[35, "data.transforms.image_pil.RandomOrder.__init__"]], "__init__() (data.transforms.image_pil.randomresize method)": [[35, "data.transforms.image_pil.RandomResize.__init__"]], "__init__() (data.transforms.image_pil.randomresizedcrop method)": [[35, "data.transforms.image_pil.RandomResizedCrop.__init__"]], "__init__() (data.transforms.image_pil.randomrotate method)": [[35, "data.transforms.image_pil.RandomRotate.__init__"]], "__init__() (data.transforms.image_pil.randomshortsizeresize method)": [[35, "data.transforms.image_pil.RandomShortSizeResize.__init__"]], "__init__() (data.transforms.image_pil.resize method)": [[35, "data.transforms.image_pil.Resize.__init__"]], "__init__() (data.transforms.image_pil.ssdcroping method)": [[35, "data.transforms.image_pil.SSDCroping.__init__"]], "__init__() (data.transforms.image_pil.scalejitter method)": [[35, "data.transforms.image_pil.ScaleJitter.__init__"]], "__init__() (data.transforms.image_pil.totensor method)": [[35, "data.transforms.image_pil.ToTensor.__init__"]], "__init__() (data.transforms.image_pil.trivialaugmentwide method)": [[35, "data.transforms.image_pil.TrivialAugmentWide.__init__"]], "__init__() (data.transforms.image_torch.randomcutmix method)": [[35, "data.transforms.image_torch.RandomCutmix.__init__"]], "__init__() (data.transforms.image_torch.randommixup method)": [[35, "data.transforms.image_torch.RandomMixup.__init__"]], "__init__() (data.transforms.video.centercrop method)": [[35, "data.transforms.video.CenterCrop.__init__"]], "__init__() (data.transforms.video.cropbyboundingbox method)": [[35, "data.transforms.video.CropByBoundingBox.__init__"]], "__init__() (data.transforms.video.randomcrop method)": [[35, "data.transforms.video.RandomCrop.__init__"]], "__init__() (data.transforms.video.randomhorizontalflip method)": [[35, "data.transforms.video.RandomHorizontalFlip.__init__"]], "__init__() (data.transforms.video.randomresizedcrop method)": [[35, "data.transforms.video.RandomResizedCrop.__init__"]], "__init__() (data.transforms.video.randomshortsizeresizecrop method)": [[35, "data.transforms.video.RandomShortSizeResizeCrop.__init__"]], "__init__() (data.transforms.video.resize method)": [[35, "data.transforms.video.Resize.__init__"]], "__init__() (data.transforms.video.saveinputs method)": [[35, "data.transforms.video.SaveInputs.__init__"]], "__init__() (data.transforms.video.shuffleaudios method)": [[35, "data.transforms.video.ShuffleAudios.__init__"]], "__init__() (data.transforms.video.totensor method)": [[35, "data.transforms.video.ToTensor.__init__"]], "add_arguments() (data.transforms.audio.audioresample class method)": [[35, "data.transforms.audio.AudioResample.add_arguments"]], "add_arguments() (data.transforms.audio.gain class method)": [[35, "data.transforms.audio.Gain.add_arguments"]], "add_arguments() (data.transforms.audio.mfccs class method)": [[35, "data.transforms.audio.MFCCs.add_arguments"]], "add_arguments() (data.transforms.audio.noise class method)": [[35, "data.transforms.audio.Noise.add_arguments"]], "add_arguments() (data.transforms.audio.roll class method)": [[35, "data.transforms.audio.Roll.add_arguments"]], "add_arguments() (data.transforms.audio.setfixedlength class method)": [[35, "data.transforms.audio.SetFixedLength.add_arguments"]], "add_arguments() (data.transforms.audio.standardizechannels class method)": [[35, "data.transforms.audio.StandardizeChannels.add_arguments"]], "add_arguments() (data.transforms.audio_bytes.torchaudiosave class method)": [[35, "data.transforms.audio_bytes.TorchaudioSave.add_arguments"]], "add_arguments() (data.transforms.base_transforms.basetransformation class method)": [[35, "data.transforms.base_transforms.BaseTransformation.add_arguments"]], "add_arguments() (data.transforms.image_bytes.bytepermutation class method)": [[35, "data.transforms.image_bytes.BytePermutation.add_arguments"]], "add_arguments() (data.transforms.image_bytes.maskpositions class method)": [[35, "data.transforms.image_bytes.MaskPositions.add_arguments"]], "add_arguments() (data.transforms.image_bytes.pilsave class method)": [[35, "data.transforms.image_bytes.PILSave.add_arguments"]], "add_arguments() (data.transforms.image_bytes.randomuniformnoise class method)": [[35, "data.transforms.image_bytes.RandomUniformNoise.add_arguments"]], "add_arguments() (data.transforms.image_bytes.shufflebytes class method)": [[35, "data.transforms.image_bytes.ShuffleBytes.add_arguments"]], "add_arguments() (data.transforms.image_pil.autoaugment class method)": [[35, "data.transforms.image_pil.AutoAugment.add_arguments"]], "add_arguments() (data.transforms.image_pil.centercrop class method)": [[35, "data.transforms.image_pil.CenterCrop.add_arguments"]], "add_arguments() (data.transforms.image_pil.fixedsizecrop class method)": [[35, "data.transforms.image_pil.FixedSizeCrop.add_arguments"]], "add_arguments() (data.transforms.image_pil.photometricdistort class method)": [[35, "data.transforms.image_pil.PhotometricDistort.add_arguments"]], "add_arguments() (data.transforms.image_pil.randaugment class method)": [[35, "data.transforms.image_pil.RandAugment.add_arguments"]], "add_arguments() (data.transforms.image_pil.randaugmenttimm class method)": [[35, "data.transforms.image_pil.RandAugmentTimm.add_arguments"]], "add_arguments() (data.transforms.image_pil.randomcrop class method)": [[35, "data.transforms.image_pil.RandomCrop.add_arguments"]], "add_arguments() (data.transforms.image_pil.randomerasing class method)": [[35, "data.transforms.image_pil.RandomErasing.add_arguments"]], "add_arguments() (data.transforms.image_pil.randomgaussianblur class method)": [[35, "data.transforms.image_pil.RandomGaussianBlur.add_arguments"]], "add_arguments() (data.transforms.image_pil.randomhorizontalflip class method)": [[35, "data.transforms.image_pil.RandomHorizontalFlip.add_arguments"]], "add_arguments() (data.transforms.image_pil.randomorder class method)": [[35, "data.transforms.image_pil.RandomOrder.add_arguments"]], "add_arguments() (data.transforms.image_pil.randomresize class method)": [[35, "data.transforms.image_pil.RandomResize.add_arguments"]], "add_arguments() (data.transforms.image_pil.randomresizedcrop class method)": [[35, "data.transforms.image_pil.RandomResizedCrop.add_arguments"]], "add_arguments() (data.transforms.image_pil.randomrotate class method)": [[35, "data.transforms.image_pil.RandomRotate.add_arguments"]], "add_arguments() (data.transforms.image_pil.randomshortsizeresize class method)": [[35, "data.transforms.image_pil.RandomShortSizeResize.add_arguments"]], "add_arguments() (data.transforms.image_pil.resize class method)": [[35, "data.transforms.image_pil.Resize.add_arguments"]], "add_arguments() (data.transforms.image_pil.ssdcroping class method)": [[35, "data.transforms.image_pil.SSDCroping.add_arguments"]], "add_arguments() (data.transforms.image_pil.scalejitter class method)": [[35, "data.transforms.image_pil.ScaleJitter.add_arguments"]], "add_arguments() (data.transforms.image_pil.totensor class method)": [[35, "data.transforms.image_pil.ToTensor.add_arguments"]], "add_arguments() (data.transforms.image_pil.trivialaugmentwide class method)": [[35, "data.transforms.image_pil.TrivialAugmentWide.add_arguments"]], "add_arguments() (data.transforms.image_torch.randomcutmix class method)": [[35, "data.transforms.image_torch.RandomCutmix.add_arguments"]], "add_arguments() (data.transforms.image_torch.randommixup class method)": [[35, "data.transforms.image_torch.RandomMixup.add_arguments"]], "add_arguments() (data.transforms.video.centercrop class method)": [[35, "data.transforms.video.CenterCrop.add_arguments"]], "add_arguments() (data.transforms.video.cropbyboundingbox class method)": [[35, "data.transforms.video.CropByBoundingBox.add_arguments"]], "add_arguments() (data.transforms.video.randomcrop class method)": [[35, "data.transforms.video.RandomCrop.add_arguments"]], "add_arguments() (data.transforms.video.randomhorizontalflip class method)": [[35, "data.transforms.video.RandomHorizontalFlip.add_arguments"]], "add_arguments() (data.transforms.video.randomresizedcrop class method)": [[35, "data.transforms.video.RandomResizedCrop.add_arguments"]], "add_arguments() (data.transforms.video.randomshortsizeresizecrop class method)": [[35, "data.transforms.video.RandomShortSizeResizeCrop.add_arguments"]], "add_arguments() (data.transforms.video.resize class method)": [[35, "data.transforms.video.Resize.add_arguments"]], "add_arguments() (data.transforms.video.saveinputs class method)": [[35, "data.transforms.video.SaveInputs.add_arguments"]], "add_arguments() (data.transforms.video.shuffleaudios class method)": [[35, "data.transforms.video.ShuffleAudios.add_arguments"]], "apply_mixing_transforms() (in module data.transforms.image_torch)": [[35, "data.transforms.image_torch.apply_mixing_transforms"]], "arguments_augmentation() (in module data.transforms)": [[35, "data.transforms.arguments_augmentation"]], "data.transforms": [[35, "module-data.transforms"]], "data.transforms.audio": [[35, "module-data.transforms.audio"]], "data.transforms.audio_bytes": [[35, "module-data.transforms.audio_bytes"]], "data.transforms.base_transforms": [[35, "module-data.transforms.base_transforms"]], "data.transforms.common": [[35, "module-data.transforms.common"]], "data.transforms.image_bytes": [[35, "module-data.transforms.image_bytes"]], "data.transforms.image_pil": [[35, "module-data.transforms.image_pil"]], "data.transforms.image_torch": [[35, "module-data.transforms.image_torch"]], "data.transforms.utils": [[35, "module-data.transforms.utils"]], "data.transforms.video": [[35, "module-data.transforms.video"]], "expand_boxes() (data.transforms.video.cropbyboundingbox method)": [[35, "data.transforms.video.CropByBoundingBox.expand_boxes"]], "get_params() (data.transforms.image_pil.randomcrop static method)": [[35, "data.transforms.image_pil.RandomCrop.get_params"]], "get_params() (data.transforms.video.randomcrop method)": [[35, "data.transforms.video.RandomCrop.get_params"]], "get_params() (data.transforms.video.randomresizedcrop method)": [[35, "data.transforms.video.RandomResizedCrop.get_params"]], "get_params() (data.transforms.video.randomshortsizeresizecrop method)": [[35, "data.transforms.video.RandomShortSizeResizeCrop.get_params"]], "get_params_from_box() (data.transforms.image_pil.randomcrop static method)": [[35, "data.transforms.image_pil.RandomCrop.get_params_from_box"]], "get_params_from_mask() (data.transforms.image_pil.randomcrop method)": [[35, "data.transforms.image_pil.RandomCrop.get_params_from_mask"]], "get_rrc_params() (data.transforms.image_pil.randomresizedcrop method)": [[35, "data.transforms.image_pil.RandomResizedCrop.get_rrc_params"]], "intersect() (in module data.transforms.utils)": [[35, "data.transforms.utils.intersect"]], "jaccard_numpy() (in module data.transforms.utils)": [[35, "data.transforms.utils.jaccard_numpy"]], "load_noise_files() (data.transforms.audio.noise method)": [[35, "data.transforms.audio.Noise.load_noise_files"]], "save_video_with_annotations() (data.transforms.video.saveinputs method)": [[35, "data.transforms.video.SaveInputs.save_video_with_annotations"]], "setup_size() (in module data.transforms.utils)": [[35, "data.transforms.utils.setup_size"]], "calculate_mfccs() (in module data.transforms.audio_aux.mfccs)": [[36, "data.transforms.audio_aux.mfccs.calculate_mfccs"]], "data.transforms.audio_aux": [[36, "module-data.transforms.audio_aux"]], "data.transforms.audio_aux.mfccs": [[36, "module-data.transforms.audio_aux.mfccs"]], "get_mfcc_features() (in module data.transforms.audio_aux.mfccs)": [[36, "data.transforms.audio_aux.mfccs.get_mfcc_features"]], "get_mfccs() (in module data.transforms.audio_aux.mfccs)": [[36, "data.transforms.audio_aux.mfccs.get_mfccs"]], "get_padded_features() (in module data.transforms.audio_aux.mfccs)": [[36, "data.transforms.audio_aux.mfccs.get_padded_features"]], "baseavreader (class in data.video_reader.base_av_reader)": [[37, "data.video_reader.base_av_reader.BaseAVReader"]], "decordavreader (class in data.video_reader.decord_reader)": [[37, "data.video_reader.decord_reader.DecordAVReader"]], "pyavreader (class in data.video_reader.pyav_reader)": [[37, "data.video_reader.pyav_reader.PyAVReader"]], "videodurationdoesnotmatchaudiodurationerror": [[37, "data.video_reader.base_av_reader.VideoDurationDoesNotMatchAudioDurationError"]], "__init__() (data.video_reader.base_av_reader.baseavreader method)": [[37, "data.video_reader.base_av_reader.BaseAVReader.__init__"]], "__init__() (data.video_reader.decord_reader.decordavreader method)": [[37, "data.video_reader.decord_reader.DecordAVReader.__init__"]], "add_arguments() (data.video_reader.base_av_reader.baseavreader class method)": [[37, "data.video_reader.base_av_reader.BaseAVReader.add_arguments"]], "arguments_video_reader() (in module data.video_reader)": [[37, "data.video_reader.arguments_video_reader"]], "check_video() (data.video_reader.base_av_reader.baseavreader method)": [[37, "data.video_reader.base_av_reader.BaseAVReader.check_video"]], "data.video_reader": [[37, "module-data.video_reader"]], "data.video_reader.base_av_reader": [[37, "module-data.video_reader.base_av_reader"]], "data.video_reader.decord_reader": [[37, "module-data.video_reader.decord_reader"]], "data.video_reader.pyav_reader": [[37, "module-data.video_reader.pyav_reader"]], "dummy_audio_video_clips() (data.video_reader.base_av_reader.baseavreader method)": [[37, "data.video_reader.base_av_reader.BaseAVReader.dummy_audio_video_clips"]], "get_frame_transform() (data.video_reader.base_av_reader.baseavreader static method)": [[37, "data.video_reader.base_av_reader.BaseAVReader.get_frame_transform"]], "get_video_reader() (in module data.video_reader)": [[37, "data.video_reader.get_video_reader"]], "num_frames() (data.video_reader.base_av_reader.baseavreader method)": [[37, "data.video_reader.base_av_reader.BaseAVReader.num_frames"]], "random_sampling() (data.video_reader.base_av_reader.baseavreader static method)": [[37, "data.video_reader.base_av_reader.BaseAVReader.random_sampling"]], "read_video() (data.video_reader.base_av_reader.baseavreader method)": [[37, "data.video_reader.base_av_reader.BaseAVReader.read_video"]], "read_video() (data.video_reader.decord_reader.decordavreader method)": [[37, "data.video_reader.decord_reader.DecordAVReader.read_video"]], "read_video() (data.video_reader.pyav_reader.pyavreader method)": [[37, "data.video_reader.pyav_reader.PyAVReader.read_video"]], "read_video_file_into_clips() (data.video_reader.base_av_reader.baseavreader method)": [[37, "data.video_reader.base_av_reader.BaseAVReader.read_video_file_into_clips"]], "uniform_sampling() (data.video_reader.base_av_reader.baseavreader static method)": [[37, "data.video_reader.base_av_reader.BaseAVReader.uniform_sampling"]], "evaluator (class in engine.evaluation_engine)": [[38, "engine.evaluation_engine.Evaluator"]], "trainer (class in engine.training_engine)": [[38, "engine.training_engine.Trainer"]], "__init__() (engine.evaluation_engine.evaluator method)": [[38, "engine.evaluation_engine.Evaluator.__init__"]], "__init__() (engine.training_engine.trainer method)": [[38, "engine.training_engine.Trainer.__init__"]], "autocast_fn() (in module engine.utils)": [[38, "engine.utils.autocast_fn"]], "compute_grad_norm() (engine.training_engine.trainer method)": [[38, "engine.training_engine.Trainer.compute_grad_norm"]], "draw_binary_masks() (in module engine.eval_segmentation)": [[38, "engine.eval_segmentation.draw_binary_masks"]], "draw_colored_masks() (in module engine.eval_segmentation)": [[38, "engine.eval_segmentation.draw_colored_masks"]], "engine": [[38, "module-engine"]], "engine.eval_detection": [[38, "module-engine.eval_detection"]], "engine.eval_segmentation": [[38, "module-engine.eval_segmentation"]], "engine.evaluation_engine": [[38, "module-engine.evaluation_engine"]], "engine.training_engine": [[38, "module-engine.training_engine"]], "engine.utils": [[38, "module-engine.utils"]], "eval_fn_image() (engine.evaluation_engine.evaluator method)": [[38, "engine.evaluation_engine.Evaluator.eval_fn_image"]], "eval_fn_video() (engine.evaluation_engine.evaluator method)": [[38, "engine.evaluation_engine.Evaluator.eval_fn_video"]], "find_easy_samples() (engine.training_engine.trainer method)": [[38, "engine.training_engine.Trainer.find_easy_samples"]], "get_batch_size() (in module engine.utils)": [[38, "engine.utils.get_batch_size"]], "get_log_writers() (in module engine.utils)": [[38, "engine.utils.get_log_writers"]], "log_metrics() (in module engine.utils)": [[38, "engine.utils.log_metrics"]], "main_detection_evaluation() (in module engine.eval_detection)": [[38, "engine.eval_detection.main_detection_evaluation"]], "main_segmentation_evaluation() (in module engine.eval_segmentation)": [[38, "engine.eval_segmentation.main_segmentation_evaluation"]], "predict_and_save() (in module engine.eval_detection)": [[38, "engine.eval_detection.predict_and_save"]], "predict_and_save() (in module engine.eval_segmentation)": [[38, "engine.eval_segmentation.predict_and_save"]], "predict_image() (in module engine.eval_detection)": [[38, "engine.eval_detection.predict_image"]], "predict_image() (in module engine.eval_segmentation)": [[38, "engine.eval_segmentation.predict_image"]], "predict_images_in_folder() (in module engine.eval_detection)": [[38, "engine.eval_detection.predict_images_in_folder"]], "predict_images_in_folder() (in module engine.eval_segmentation)": [[38, "engine.eval_segmentation.predict_images_in_folder"]], "predict_labeled_dataset() (in module engine.eval_detection)": [[38, "engine.eval_detection.predict_labeled_dataset"]], "predict_labeled_dataset() (in module engine.eval_segmentation)": [[38, "engine.eval_segmentation.predict_labeled_dataset"]], "read_and_process_image() (in module engine.eval_detection)": [[38, "engine.eval_detection.read_and_process_image"]], "read_and_process_image() (in module engine.eval_segmentation)": [[38, "engine.eval_segmentation.read_and_process_image"]], "run() (engine.evaluation_engine.evaluator method)": [[38, "engine.evaluation_engine.Evaluator.run"]], "run() (engine.training_engine.trainer method)": [[38, "engine.training_engine.Trainer.run"]], "run_loss_landscape() (engine.training_engine.trainer method)": [[38, "engine.training_engine.Trainer.run_loss_landscape"]], "train_epoch() (engine.training_engine.trainer method)": [[38, "engine.training_engine.Trainer.train_epoch"]], "val_epoch() (engine.training_engine.trainer method)": [[38, "engine.training_engine.Trainer.val_epoch"]], "coco_evaluation() (in module engine.detection_utils.coco_map)": [[39, "engine.detection_utils.coco_map.coco_evaluation"]], "compute_quant_scores() (in module engine.detection_utils.coco_map)": [[39, "engine.detection_utils.coco_map.compute_quant_scores"]], "engine.detection_utils": [[39, "module-engine.detection_utils"]], "engine.detection_utils.coco_map": [[39, "module-engine.detection_utils.coco_map"]], "engine.segmentation_utils": [[40, "module-engine.segmentation_utils"]], "engine.segmentation_utils.cityscapes_iou": [[40, "module-engine.segmentation_utils.cityscapes_iou"]], "eval_cityscapes() (in module engine.segmentation_utils.cityscapes_iou)": [[40, "engine.segmentation_utils.cityscapes_iou.eval_cityscapes"]], "basecriteria (class in loss_fn.base_criteria)": [[41, "loss_fn.base_criteria.BaseCriteria"]], "compositeloss (class in loss_fn.composite_loss)": [[41, "loss_fn.composite_loss.CompositeLoss"]], "neuralaugmentation (class in loss_fn.neural_augmentation)": [[41, "loss_fn.neural_augmentation.NeuralAugmentation"]], "__init__() (loss_fn.base_criteria.basecriteria method)": [[41, "loss_fn.base_criteria.BaseCriteria.__init__"]], "__init__() (loss_fn.composite_loss.compositeloss method)": [[41, "loss_fn.composite_loss.CompositeLoss.__init__"]], "__init__() (loss_fn.neural_augmentation.neuralaugmentation method)": [[41, "loss_fn.neural_augmentation.NeuralAugmentation.__init__"]], "add_arguments() (loss_fn.base_criteria.basecriteria class method)": [[41, "loss_fn.base_criteria.BaseCriteria.add_arguments"]], "add_arguments() (loss_fn.composite_loss.compositeloss class method)": [[41, "loss_fn.composite_loss.CompositeLoss.add_arguments"]], "add_arguments() (loss_fn.neural_augmentation.neuralaugmentation class method)": [[41, "loss_fn.neural_augmentation.NeuralAugmentation.add_arguments"]], "add_loss_fn_arguments() (in module loss_fn)": [[41, "loss_fn.add_loss_fn_arguments"]], "build_composite_loss_fn() (loss_fn.composite_loss.compositeloss class method)": [[41, "loss_fn.composite_loss.CompositeLoss.build_composite_loss_fn"]], "build_loss_fn() (in module loss_fn)": [[41, "loss_fn.build_loss_fn"]], "cosine_curriculum() (in module loss_fn.neural_augmentation)": [[41, "loss_fn.neural_augmentation.cosine_curriculum"]], "eval() (loss_fn.composite_loss.compositeloss method)": [[41, "loss_fn.composite_loss.CompositeLoss.eval"]], "extra_repr() (loss_fn.base_criteria.basecriteria method)": [[41, "loss_fn.base_criteria.BaseCriteria.extra_repr"]], "extra_repr() (loss_fn.neural_augmentation.neuralaugmentation method)": [[41, "loss_fn.neural_augmentation.NeuralAugmentation.extra_repr"]], "forward() (loss_fn.base_criteria.basecriteria method)": [[41, "loss_fn.base_criteria.BaseCriteria.forward"]], "forward() (loss_fn.composite_loss.compositeloss method)": [[41, "loss_fn.composite_loss.CompositeLoss.forward"]], "forward() (loss_fn.neural_augmentation.neuralaugmentation method)": [[41, "loss_fn.neural_augmentation.NeuralAugmentation.forward"]], "linear_curriculum() (in module loss_fn.neural_augmentation)": [[41, "loss_fn.neural_augmentation.linear_curriculum"]], "loss_fn": [[41, "module-loss_fn"]], "loss_fn.base_criteria": [[41, "module-loss_fn.base_criteria"]], "loss_fn.composite_loss": [[41, "module-loss_fn.composite_loss"]], "loss_fn.neural_augmentation": [[41, "module-loss_fn.neural_augmentation"]], "train() (loss_fn.composite_loss.compositeloss method)": [[41, "loss_fn.composite_loss.CompositeLoss.train"]], "baseclassificationcriteria (class in loss_fn.classification.base_classification_criteria)": [[42, "loss_fn.classification.base_classification_criteria.BaseClassificationCriteria"]], "binarycrossentropy (class in loss_fn.classification.binary_cross_entropy)": [[42, "loss_fn.classification.binary_cross_entropy.BinaryCrossEntropy"]], "crossentropy (class in loss_fn.classification.cross_entropy)": [[42, "loss_fn.classification.cross_entropy.CrossEntropy"]], "__init__() (loss_fn.classification.base_classification_criteria.baseclassificationcriteria method)": [[42, "loss_fn.classification.base_classification_criteria.BaseClassificationCriteria.__init__"]], "__init__() (loss_fn.classification.binary_cross_entropy.binarycrossentropy method)": [[42, "loss_fn.classification.binary_cross_entropy.BinaryCrossEntropy.__init__"]], "__init__() (loss_fn.classification.cross_entropy.crossentropy method)": [[42, "loss_fn.classification.cross_entropy.CrossEntropy.__init__"]], "add_arguments() (loss_fn.classification.base_classification_criteria.baseclassificationcriteria class method)": [[42, "loss_fn.classification.base_classification_criteria.BaseClassificationCriteria.add_arguments"]], "add_arguments() (loss_fn.classification.binary_cross_entropy.binarycrossentropy class method)": [[42, "loss_fn.classification.binary_cross_entropy.BinaryCrossEntropy.add_arguments"]], "add_arguments() (loss_fn.classification.cross_entropy.crossentropy class method)": [[42, "loss_fn.classification.cross_entropy.CrossEntropy.add_arguments"]], "extra_repr() (loss_fn.classification.binary_cross_entropy.binarycrossentropy method)": [[42, "loss_fn.classification.binary_cross_entropy.BinaryCrossEntropy.extra_repr"]], "extra_repr() (loss_fn.classification.cross_entropy.crossentropy method)": [[42, "loss_fn.classification.cross_entropy.CrossEntropy.extra_repr"]], "forward() (loss_fn.classification.base_classification_criteria.baseclassificationcriteria method)": [[42, "loss_fn.classification.base_classification_criteria.BaseClassificationCriteria.forward"]], "loss_fn.classification": [[42, "module-loss_fn.classification"]], "loss_fn.classification.base_classification_criteria": [[42, "module-loss_fn.classification.base_classification_criteria"]], "loss_fn.classification.binary_cross_entropy": [[42, "module-loss_fn.classification.binary_cross_entropy"]], "loss_fn.classification.cross_entropy": [[42, "module-loss_fn.classification.cross_entropy"]], "basedetectioncriteria (class in loss_fn.detection.base_detection_criteria)": [[43, "loss_fn.detection.base_detection_criteria.BaseDetectionCriteria"]], "maskrcnnloss (class in loss_fn.detection.mask_rcnn_loss)": [[43, "loss_fn.detection.mask_rcnn_loss.MaskRCNNLoss"]], "ssdloss (class in loss_fn.detection.ssd_multibox_loss)": [[43, "loss_fn.detection.ssd_multibox_loss.SSDLoss"]], "__init__() (loss_fn.detection.base_detection_criteria.basedetectioncriteria method)": [[43, "loss_fn.detection.base_detection_criteria.BaseDetectionCriteria.__init__"]], "__init__() (loss_fn.detection.mask_rcnn_loss.maskrcnnloss method)": [[43, "loss_fn.detection.mask_rcnn_loss.MaskRCNNLoss.__init__"]], "__init__() (loss_fn.detection.ssd_multibox_loss.ssdloss method)": [[43, "loss_fn.detection.ssd_multibox_loss.SSDLoss.__init__"]], "add_arguments() (loss_fn.detection.base_detection_criteria.basedetectioncriteria class method)": [[43, "loss_fn.detection.base_detection_criteria.BaseDetectionCriteria.add_arguments"]], "add_arguments() (loss_fn.detection.mask_rcnn_loss.maskrcnnloss class method)": [[43, "loss_fn.detection.mask_rcnn_loss.MaskRCNNLoss.add_arguments"]], "add_arguments() (loss_fn.detection.ssd_multibox_loss.ssdloss class method)": [[43, "loss_fn.detection.ssd_multibox_loss.SSDLoss.add_arguments"]], "extra_repr() (loss_fn.detection.mask_rcnn_loss.maskrcnnloss method)": [[43, "loss_fn.detection.mask_rcnn_loss.MaskRCNNLoss.extra_repr"]], "extra_repr() (loss_fn.detection.ssd_multibox_loss.ssdloss method)": [[43, "loss_fn.detection.ssd_multibox_loss.SSDLoss.extra_repr"]], "forward() (loss_fn.detection.mask_rcnn_loss.maskrcnnloss method)": [[43, "loss_fn.detection.mask_rcnn_loss.MaskRCNNLoss.forward"]], "forward() (loss_fn.detection.ssd_multibox_loss.ssdloss method)": [[43, "loss_fn.detection.ssd_multibox_loss.SSDLoss.forward"]], "loss_fn.detection": [[43, "module-loss_fn.detection"]], "loss_fn.detection.base_detection_criteria": [[43, "module-loss_fn.detection.base_detection_criteria"]], "loss_fn.detection.mask_rcnn_loss": [[43, "module-loss_fn.detection.mask_rcnn_loss"]], "loss_fn.detection.ssd_multibox_loss": [[43, "module-loss_fn.detection.ssd_multibox_loss"]], "reset_unscaled_loss_values() (loss_fn.detection.ssd_multibox_loss.ssdloss method)": [[43, "loss_fn.detection.ssd_multibox_loss.SSDLoss.reset_unscaled_loss_values"]], "basedistillationcriteria (class in loss_fn.distillation.base_distillation)": [[44, "loss_fn.distillation.base_distillation.BaseDistillationCriteria"]], "harddistillationloss (class in loss_fn.distillation.hard_distillation)": [[44, "loss_fn.distillation.hard_distillation.HardDistillationLoss"]], "softklloss (class in loss_fn.distillation.soft_kl_distillation)": [[44, "loss_fn.distillation.soft_kl_distillation.SoftKLLoss"]], "__init__() (loss_fn.distillation.base_distillation.basedistillationcriteria method)": [[44, "loss_fn.distillation.base_distillation.BaseDistillationCriteria.__init__"]], "__init__() (loss_fn.distillation.hard_distillation.harddistillationloss method)": [[44, "loss_fn.distillation.hard_distillation.HardDistillationLoss.__init__"]], "__init__() (loss_fn.distillation.soft_kl_distillation.softklloss method)": [[44, "loss_fn.distillation.soft_kl_distillation.SoftKLLoss.__init__"]], "add_arguments() (loss_fn.distillation.base_distillation.basedistillationcriteria class method)": [[44, "loss_fn.distillation.base_distillation.BaseDistillationCriteria.add_arguments"]], "add_arguments() (loss_fn.distillation.hard_distillation.harddistillationloss class method)": [[44, "loss_fn.distillation.hard_distillation.HardDistillationLoss.add_arguments"]], "add_arguments() (loss_fn.distillation.soft_kl_distillation.softklloss class method)": [[44, "loss_fn.distillation.soft_kl_distillation.SoftKLLoss.add_arguments"]], "extra_repr() (loss_fn.distillation.hard_distillation.harddistillationloss method)": [[44, "loss_fn.distillation.hard_distillation.HardDistillationLoss.extra_repr"]], "extra_repr() (loss_fn.distillation.soft_kl_distillation.softklloss method)": [[44, "loss_fn.distillation.soft_kl_distillation.SoftKLLoss.extra_repr"]], "forward() (loss_fn.distillation.base_distillation.basedistillationcriteria method)": [[44, "loss_fn.distillation.base_distillation.BaseDistillationCriteria.forward"]], "loss_fn.distillation": [[44, "module-loss_fn.distillation"]], "loss_fn.distillation.base_distillation": [[44, "module-loss_fn.distillation.base_distillation"]], "loss_fn.distillation.hard_distillation": [[44, "module-loss_fn.distillation.hard_distillation"]], "loss_fn.distillation.soft_kl_distillation": [[44, "module-loss_fn.distillation.soft_kl_distillation"]], "basemultimodalimagetextcriteria (class in loss_fn.multi_modal_img_text.base_multi_modal_img_text_criteria)": [[45, "loss_fn.multi_modal_img_text.base_multi_modal_img_text_criteria.BaseMultiModalImageTextCriteria"]], "contrastivelossclip (class in loss_fn.multi_modal_img_text.contrastive_loss_clip)": [[45, "loss_fn.multi_modal_img_text.contrastive_loss_clip.ContrastiveLossClip"]], "__init__() (loss_fn.multi_modal_img_text.base_multi_modal_img_text_criteria.basemultimodalimagetextcriteria method)": [[45, "loss_fn.multi_modal_img_text.base_multi_modal_img_text_criteria.BaseMultiModalImageTextCriteria.__init__"]], "__init__() (loss_fn.multi_modal_img_text.contrastive_loss_clip.contrastivelossclip method)": [[45, "loss_fn.multi_modal_img_text.contrastive_loss_clip.ContrastiveLossClip.__init__"]], "add_arguments() (loss_fn.multi_modal_img_text.base_multi_modal_img_text_criteria.basemultimodalimagetextcriteria class method)": [[45, "loss_fn.multi_modal_img_text.base_multi_modal_img_text_criteria.BaseMultiModalImageTextCriteria.add_arguments"]], "forward() (loss_fn.multi_modal_img_text.contrastive_loss_clip.contrastivelossclip method)": [[45, "loss_fn.multi_modal_img_text.contrastive_loss_clip.ContrastiveLossClip.forward"]], "gather_features() (in module loss_fn.multi_modal_img_text.contrastive_loss_clip)": [[45, "loss_fn.multi_modal_img_text.contrastive_loss_clip.gather_features"]], "loss_fn.multi_modal_img_text": [[45, "module-loss_fn.multi_modal_img_text"]], "loss_fn.multi_modal_img_text.base_multi_modal_img_text_criteria": [[45, "module-loss_fn.multi_modal_img_text.base_multi_modal_img_text_criteria"]], "loss_fn.multi_modal_img_text.contrastive_loss_clip": [[45, "module-loss_fn.multi_modal_img_text.contrastive_loss_clip"]], "basesegmentationcriteria (class in loss_fn.segmentation.base_segmentation_criteria)": [[46, "loss_fn.segmentation.base_segmentation_criteria.BaseSegmentationCriteria"]], "segcrossentropy (class in loss_fn.segmentation.cross_entropy)": [[46, "loss_fn.segmentation.cross_entropy.SegCrossEntropy"]], "__init__() (loss_fn.segmentation.base_segmentation_criteria.basesegmentationcriteria method)": [[46, "loss_fn.segmentation.base_segmentation_criteria.BaseSegmentationCriteria.__init__"]], "__init__() (loss_fn.segmentation.cross_entropy.segcrossentropy method)": [[46, "loss_fn.segmentation.cross_entropy.SegCrossEntropy.__init__"]], "add_arguments() (loss_fn.segmentation.base_segmentation_criteria.basesegmentationcriteria class method)": [[46, "loss_fn.segmentation.base_segmentation_criteria.BaseSegmentationCriteria.add_arguments"]], "add_arguments() (loss_fn.segmentation.cross_entropy.segcrossentropy class method)": [[46, "loss_fn.segmentation.cross_entropy.SegCrossEntropy.add_arguments"]], "extra_repr() (loss_fn.segmentation.cross_entropy.segcrossentropy method)": [[46, "loss_fn.segmentation.cross_entropy.SegCrossEntropy.extra_repr"]], "forward() (loss_fn.segmentation.cross_entropy.segcrossentropy method)": [[46, "loss_fn.segmentation.cross_entropy.SegCrossEntropy.forward"]], "loss_fn.segmentation": [[46, "module-loss_fn.segmentation"]], "loss_fn.segmentation.base_segmentation_criteria": [[46, "module-loss_fn.segmentation.base_segmentation_criteria"]], "loss_fn.segmentation.cross_entropy": [[46, "module-loss_fn.segmentation.cross_entropy"]], "build_cls_teacher_from_opts() (in module loss_fn.utils.build_helper)": [[47, "loss_fn.utils.build_helper.build_cls_teacher_from_opts"]], "compute_class_weights() (in module loss_fn.utils.class_weighting)": [[47, "loss_fn.utils.class_weighting.compute_class_weights"]], "loss_fn.utils": [[47, "module-loss_fn.utils"]], "loss_fn.utils.build_helper": [[47, "module-loss_fn.utils.build_helper"]], "loss_fn.utils.class_weighting": [[47, "module-loss_fn.utils.class_weighting"]], "create_bases() (in module loss_landscape.landscape_utils)": [[48, "loss_landscape.landscape_utils.create_bases"]], "generate_plots() (in module loss_landscape.landscape_utils)": [[48, "loss_landscape.landscape_utils.generate_plots"]], "ignore_bn() (in module loss_landscape.landscape_utils)": [[48, "loss_landscape.landscape_utils.ignore_bn"]], "loss_landscape": [[48, "module-loss_landscape"]], "loss_landscape.landscape_utils": [[48, "module-loss_landscape.landscape_utils"]], "normalize_filter() (in module loss_landscape.landscape_utils)": [[48, "loss_landscape.landscape_utils.normalize_filter"]], "plot_save_graphs() (in module loss_landscape.landscape_utils)": [[48, "loss_landscape.landscape_utils.plot_save_graphs"]], "rand_basis() (in module loss_landscape.landscape_utils)": [[48, "loss_landscape.landscape_utils.rand_basis"]], "averagemetric (class in metrics.metric_base)": [[49, "metrics.metric_base.AverageMetric"]], "averageprecisionmetric (class in metrics.average_precision)": [[49, "metrics.average_precision.AveragePrecisionMetric"]], "basemetric (class in metrics.metric_base)": [[49, "metrics.metric_base.BaseMetric"]], "cocoevaluator (class in metrics.coco_map)": [[49, "metrics.coco_map.COCOEvaluator"]], "confusionmatrix (class in metrics.confusion_mat)": [[49, "metrics.confusion_mat.ConfusionMatrix"]], "dummymetric (class in metrics.metric_base_test)": [[49, "metrics.metric_base_test.DummyMetric"]], "epochmetric (class in metrics.metric_base)": [[49, "metrics.metric_base.EpochMetric"]], "gradnormmetric (class in metrics.misc)": [[49, "metrics.misc.GradNormMetric"]], "ioumetric (class in metrics.intersection_over_union)": [[49, "metrics.intersection_over_union.IOUMetric"]], "imagetextretrievalmetric (class in metrics.image_text_retrieval)": [[49, "metrics.image_text_retrieval.ImageTextRetrievalMetric"]], "k (metrics.topk_accuracy.top1metric attribute)": [[49, "metrics.topk_accuracy.Top1Metric.K"]], "k (metrics.topk_accuracy.top5metric attribute)": [[49, "metrics.topk_accuracy.Top5Metric.K"]], "k (metrics.topk_accuracy.topkmetric attribute)": [[49, "metrics.topk_accuracy.TopKMetric.K"]], "lossmetric (class in metrics.misc)": [[49, "metrics.misc.LossMetric"]], "psnrmetric (class in metrics.psnr)": [[49, "metrics.psnr.PSNRMetric"]], "probabilityhistogrammetric (class in metrics.probability_histograms)": [[49, "metrics.probability_histograms.ProbabilityHistogramMetric"]], "retrievalcmc (class in metrics.retrieval_cmc)": [[49, "metrics.retrieval_cmc.RetrievalCMC"]], "statistics (class in metrics.stats)": [[49, "metrics.stats.Statistics"]], "top1metric (class in metrics.topk_accuracy)": [[49, "metrics.topk_accuracy.Top1Metric"]], "top5metric (class in metrics.topk_accuracy)": [[49, "metrics.topk_accuracy.Top5Metric"]], "topkmetric (class in metrics.topk_accuracy)": [[49, "metrics.topk_accuracy.TopKMetric"]], "__init__() (metrics.coco_map.cocoevaluator method)": [[49, "metrics.coco_map.COCOEvaluator.__init__"]], "__init__() (metrics.image_text_retrieval.imagetextretrievalmetric method)": [[49, "metrics.image_text_retrieval.ImageTextRetrievalMetric.__init__"]], "__init__() (metrics.metric_base.basemetric method)": [[49, "metrics.metric_base.BaseMetric.__init__"]], "__init__() (metrics.metric_base.epochmetric method)": [[49, "metrics.metric_base.EpochMetric.__init__"]], "__init__() (metrics.probability_histograms.probabilityhistogrammetric method)": [[49, "metrics.probability_histograms.ProbabilityHistogramMetric.__init__"]], "__init__() (metrics.retrieval_cmc.retrievalcmc method)": [[49, "metrics.retrieval_cmc.RetrievalCMC.__init__"]], "__init__() (metrics.stats.statistics method)": [[49, "metrics.stats.Statistics.__init__"]], "add_arguments() (metrics.image_text_retrieval.imagetextretrievalmetric class method)": [[49, "metrics.image_text_retrieval.ImageTextRetrievalMetric.add_arguments"]], "add_arguments() (metrics.metric_base.basemetric class method)": [[49, "metrics.metric_base.BaseMetric.add_arguments"]], "add_arguments() (metrics.probability_histograms.probabilityhistogrammetric class method)": [[49, "metrics.probability_histograms.ProbabilityHistogramMetric.add_arguments"]], "add_arguments() (metrics.retrieval_cmc.retrievalcmc class method)": [[49, "metrics.retrieval_cmc.RetrievalCMC.add_arguments"]], "arguments_stats() (in module metrics)": [[49, "metrics.arguments_stats"]], "avg_statistics() (metrics.stats.statistics method)": [[49, "metrics.stats.Statistics.avg_statistics"]], "cmc_calculation() (in module metrics.retrieval_cmc)": [[49, "metrics.retrieval_cmc.cmc_calculation"]], "compute() (metrics.coco_map.cocoevaluator method)": [[49, "metrics.coco_map.COCOEvaluator.compute"]], "compute() (metrics.confusion_mat.confusionmatrix method)": [[49, "metrics.confusion_mat.ConfusionMatrix.compute"]], "compute() (metrics.image_text_retrieval.imagetextretrievalmetric method)": [[49, "metrics.image_text_retrieval.ImageTextRetrievalMetric.compute"]], "compute() (metrics.intersection_over_union.ioumetric method)": [[49, "metrics.intersection_over_union.IOUMetric.compute"]], "compute() (metrics.metric_base.averagemetric method)": [[49, "metrics.metric_base.AverageMetric.compute"]], "compute() (metrics.metric_base.basemetric method)": [[49, "metrics.metric_base.BaseMetric.compute"]], "compute() (metrics.metric_base.epochmetric method)": [[49, "metrics.metric_base.EpochMetric.compute"]], "compute_miou_batch() (in module metrics.intersection_over_union)": [[49, "metrics.intersection_over_union.compute_miou_batch"]], "compute_psnr() (in module metrics.psnr)": [[49, "metrics.psnr.compute_psnr"]], "compute_with_aggregates() (metrics.average_precision.averageprecisionmetric method)": [[49, "metrics.average_precision.AveragePrecisionMetric.compute_with_aggregates"]], "compute_with_aggregates() (metrics.metric_base.epochmetric method)": [[49, "metrics.metric_base.EpochMetric.compute_with_aggregates"]], "compute_with_aggregates() (metrics.probability_histograms.probabilityhistogrammetric method)": [[49, "metrics.probability_histograms.ProbabilityHistogramMetric.compute_with_aggregates"]], "compute_with_aggregates() (metrics.retrieval_cmc.retrievalcmc method)": [[49, "metrics.retrieval_cmc.RetrievalCMC.compute_with_aggregates"]], "cosine_distance_matrix() (in module metrics.retrieval_cmc)": [[49, "metrics.retrieval_cmc.cosine_distance_matrix"]], "epoch_summary() (metrics.stats.statistics method)": [[49, "metrics.stats.Statistics.epoch_summary"]], "gather_metrics() (metrics.intersection_over_union.ioumetric method)": [[49, "metrics.intersection_over_union.IOUMetric.gather_metrics"]], "gather_metrics() (metrics.metric_base.averagemetric method)": [[49, "metrics.metric_base.AverageMetric.gather_metrics"]], "gather_metrics() (metrics.metric_base_test.dummymetric method)": [[49, "metrics.metric_base_test.DummyMetric.gather_metrics"]], "gather_metrics() (metrics.misc.gradnormmetric method)": [[49, "metrics.misc.GradNormMetric.gather_metrics"]], "gather_metrics() (metrics.misc.lossmetric method)": [[49, "metrics.misc.LossMetric.gather_metrics"]], "gather_metrics() (metrics.psnr.psnrmetric method)": [[49, "metrics.psnr.PSNRMetric.gather_metrics"]], "gather_metrics() (metrics.topk_accuracy.topkmetric method)": [[49, "metrics.topk_accuracy.TopKMetric.gather_metrics"]], "get_aggregates() (metrics.image_text_retrieval.imagetextretrievalmetric method)": [[49, "metrics.image_text_retrieval.ImageTextRetrievalMetric.get_aggregates"]], "get_aggregates() (metrics.metric_base.epochmetric method)": [[49, "metrics.metric_base.EpochMetric.get_aggregates"]], "iter_summary() (metrics.stats.statistics method)": [[49, "metrics.stats.Statistics.iter_summary"]], "l2_distance_matrix() (in module metrics.retrieval_cmc)": [[49, "metrics.retrieval_cmc.l2_distance_matrix"]], "mean_ap() (in module metrics.retrieval_cmc)": [[49, "metrics.retrieval_cmc.mean_ap"]], "metrics": [[49, "module-metrics"]], "metrics.average_precision": [[49, "module-metrics.average_precision"]], "metrics.coco_map": [[49, "module-metrics.coco_map"]], "metrics.confusion_mat": [[49, "module-metrics.confusion_mat"]], "metrics.image_text_retrieval": [[49, "module-metrics.image_text_retrieval"]], "metrics.intersection_over_union": [[49, "module-metrics.intersection_over_union"]], "metrics.metric_base": [[49, "module-metrics.metric_base"]], "metrics.metric_base_test": [[49, "module-metrics.metric_base_test"]], "metrics.misc": [[49, "module-metrics.misc"]], "metrics.probability_histograms": [[49, "module-metrics.probability_histograms"]], "metrics.psnr": [[49, "module-metrics.psnr"]], "metrics.retrieval_cmc": [[49, "module-metrics.retrieval_cmc"]], "metrics.stats": [[49, "module-metrics.stats"]], "metrics.topk_accuracy": [[49, "module-metrics.topk_accuracy"]], "prepare_cache_results() (metrics.coco_map.cocoevaluator method)": [[49, "metrics.coco_map.COCOEvaluator.prepare_cache_results"]], "preprocess_predictions() (metrics.metric_base.basemetric method)": [[49, "metrics.metric_base.BaseMetric.preprocess_predictions"]], "preprocess_targets() (metrics.metric_base.basemetric method)": [[49, "metrics.metric_base.BaseMetric.preprocess_targets"]], "reset() (metrics.coco_map.cocoevaluator method)": [[49, "metrics.coco_map.COCOEvaluator.reset"]], "reset() (metrics.confusion_mat.confusionmatrix method)": [[49, "metrics.confusion_mat.ConfusionMatrix.reset"]], "reset() (metrics.image_text_retrieval.imagetextretrievalmetric method)": [[49, "metrics.image_text_retrieval.ImageTextRetrievalMetric.reset"]], "reset() (metrics.metric_base.averagemetric method)": [[49, "metrics.metric_base.AverageMetric.reset"]], "reset() (metrics.metric_base.basemetric method)": [[49, "metrics.metric_base.BaseMetric.reset"]], "reset() (metrics.metric_base.epochmetric method)": [[49, "metrics.metric_base.EpochMetric.reset"]], "summarize_coco_results() (metrics.coco_map.cocoevaluator method)": [[49, "metrics.coco_map.COCOEvaluator.summarize_coco_results"]], "test_average_metric_distributed_batchsize() (in module metrics.metric_base_test)": [[49, "metrics.metric_base_test.test_average_metric_distributed_batchsize"]], "top_k_accuracy() (in module metrics.topk_accuracy)": [[49, "metrics.topk_accuracy.top_k_accuracy"]], "update() (metrics.coco_map.cocoevaluator method)": [[49, "metrics.coco_map.COCOEvaluator.update"]], "update() (metrics.confusion_mat.confusionmatrix method)": [[49, "metrics.confusion_mat.ConfusionMatrix.update"]], "update() (metrics.image_text_retrieval.imagetextretrievalmetric method)": [[49, "metrics.image_text_retrieval.ImageTextRetrievalMetric.update"]], "update() (metrics.metric_base.averagemetric method)": [[49, "metrics.metric_base.AverageMetric.update"]], "update() (metrics.metric_base.basemetric method)": [[49, "metrics.metric_base.BaseMetric.update"]], "update() (metrics.metric_base.epochmetric method)": [[49, "metrics.metric_base.EpochMetric.update"]], "update() (metrics.stats.statistics method)": [[49, "metrics.stats.Statistics.update"]], "adamoptimizer (class in optim.adam)": [[50, "optim.adam.AdamOptimizer"]], "adamwoptimizer (class in optim.adamw)": [[50, "optim.adamw.AdamWOptimizer"]], "baseoptim (class in optim.base_optim)": [[50, "optim.base_optim.BaseOptim"]], "sgdoptimizer (class in optim.sgd)": [[50, "optim.sgd.SGDOptimizer"]], "__init__() (optim.adam.adamoptimizer method)": [[50, "optim.adam.AdamOptimizer.__init__"]], "__init__() (optim.adamw.adamwoptimizer method)": [[50, "optim.adamw.AdamWOptimizer.__init__"]], "__init__() (optim.base_optim.baseoptim method)": [[50, "optim.base_optim.BaseOptim.__init__"]], "__init__() (optim.sgd.sgdoptimizer method)": [[50, "optim.sgd.SGDOptimizer.__init__"]], "add_arguments() (optim.adam.adamoptimizer class method)": [[50, "optim.adam.AdamOptimizer.add_arguments"]], "add_arguments() (optim.adamw.adamwoptimizer class method)": [[50, "optim.adamw.AdamWOptimizer.add_arguments"]], "add_arguments() (optim.base_optim.baseoptim class method)": [[50, "optim.base_optim.BaseOptim.add_arguments"]], "add_arguments() (optim.sgd.sgdoptimizer class method)": [[50, "optim.sgd.SGDOptimizer.add_arguments"]], "arguments_optimizer() (in module optim)": [[50, "optim.arguments_optimizer"]], "build_optimizer() (in module optim)": [[50, "optim.build_optimizer"]], "check_trainable_parameters() (in module optim)": [[50, "optim.check_trainable_parameters"]], "optim": [[50, "module-optim"]], "optim.adam": [[50, "module-optim.adam"]], "optim.adamw": [[50, "module-optim.adamw"]], "optim.base_optim": [[50, "module-optim.base_optim"]], "optim.sgd": [[50, "module-optim.sgd"]], "remove_param_name_key() (in module optim)": [[50, "optim.remove_param_name_key"]], "baselrscheduler (class in optim.scheduler.base_scheduler)": [[51, "optim.scheduler.base_scheduler.BaseLRScheduler"]], "cosinescheduler (class in optim.scheduler.cosine)": [[51, "optim.scheduler.cosine.CosineScheduler"]], "cycliclrscheduler (class in optim.scheduler.cyclic)": [[51, "optim.scheduler.cyclic.CyclicLRScheduler"]], "fixedlrscheduler (class in optim.scheduler.fixed)": [[51, "optim.scheduler.fixed.FixedLRScheduler"]], "multisteplrscheduler (class in optim.scheduler.multi_step)": [[51, "optim.scheduler.multi_step.MultiStepLRScheduler"]], "polynomialscheduler (class in optim.scheduler.polynomial)": [[51, "optim.scheduler.polynomial.PolynomialScheduler"]], "__init__() (optim.scheduler.base_scheduler.baselrscheduler method)": [[51, "optim.scheduler.base_scheduler.BaseLRScheduler.__init__"]], "__init__() (optim.scheduler.cosine.cosinescheduler method)": [[51, "optim.scheduler.cosine.CosineScheduler.__init__"]], "__init__() (optim.scheduler.cyclic.cycliclrscheduler method)": [[51, "optim.scheduler.cyclic.CyclicLRScheduler.__init__"]], "__init__() (optim.scheduler.fixed.fixedlrscheduler method)": [[51, "optim.scheduler.fixed.FixedLRScheduler.__init__"]], "__init__() (optim.scheduler.multi_step.multisteplrscheduler method)": [[51, "optim.scheduler.multi_step.MultiStepLRScheduler.__init__"]], "__init__() (optim.scheduler.polynomial.polynomialscheduler method)": [[51, "optim.scheduler.polynomial.PolynomialScheduler.__init__"]], "add_arguments() (optim.scheduler.base_scheduler.baselrscheduler class method)": [[51, "optim.scheduler.base_scheduler.BaseLRScheduler.add_arguments"]], "add_arguments() (optim.scheduler.cosine.cosinescheduler class method)": [[51, "optim.scheduler.cosine.CosineScheduler.add_arguments"]], "add_arguments() (optim.scheduler.cyclic.cycliclrscheduler class method)": [[51, "optim.scheduler.cyclic.CyclicLRScheduler.add_arguments"]], "add_arguments() (optim.scheduler.fixed.fixedlrscheduler class method)": [[51, "optim.scheduler.fixed.FixedLRScheduler.add_arguments"]], "add_arguments() (optim.scheduler.multi_step.multisteplrscheduler class method)": [[51, "optim.scheduler.multi_step.MultiStepLRScheduler.add_arguments"]], "add_arguments() (optim.scheduler.polynomial.polynomialscheduler class method)": [[51, "optim.scheduler.polynomial.PolynomialScheduler.add_arguments"]], "arguments_scheduler() (in module optim.scheduler)": [[51, "optim.scheduler.arguments_scheduler"]], "build_scheduler() (in module optim.scheduler)": [[51, "optim.scheduler.build_scheduler"]], "extra_repr() (optim.scheduler.base_scheduler.baselrscheduler method)": [[51, "optim.scheduler.base_scheduler.BaseLRScheduler.extra_repr"]], "general_lr_sch_args() (in module optim.scheduler)": [[51, "optim.scheduler.general_lr_sch_args"]], "get_lr() (optim.scheduler.base_scheduler.baselrscheduler method)": [[51, "optim.scheduler.base_scheduler.BaseLRScheduler.get_lr"]], "get_lr() (optim.scheduler.cosine.cosinescheduler method)": [[51, "optim.scheduler.cosine.CosineScheduler.get_lr"]], "get_lr() (optim.scheduler.cyclic.cycliclrscheduler method)": [[51, "optim.scheduler.cyclic.CyclicLRScheduler.get_lr"]], "get_lr() (optim.scheduler.fixed.fixedlrscheduler method)": [[51, "optim.scheduler.fixed.FixedLRScheduler.get_lr"]], "get_lr() (optim.scheduler.multi_step.multisteplrscheduler method)": [[51, "optim.scheduler.multi_step.MultiStepLRScheduler.get_lr"]], "get_lr() (optim.scheduler.polynomial.polynomialscheduler method)": [[51, "optim.scheduler.polynomial.PolynomialScheduler.get_lr"]], "optim.scheduler": [[51, "module-optim.scheduler"]], "optim.scheduler.base_scheduler": [[51, "module-optim.scheduler.base_scheduler"]], "optim.scheduler.cosine": [[51, "module-optim.scheduler.cosine"]], "optim.scheduler.cyclic": [[51, "module-optim.scheduler.cyclic"]], "optim.scheduler.fixed": [[51, "module-optim.scheduler.fixed"]], "optim.scheduler.multi_step": [[51, "module-optim.scheduler.multi_step"]], "optim.scheduler.polynomial": [[51, "module-optim.scheduler.polynomial"]], "retrieve_lr() (optim.scheduler.base_scheduler.baselrscheduler static method)": [[51, "optim.scheduler.base_scheduler.BaseLRScheduler.retrieve_lr"]], "update_lr() (optim.scheduler.base_scheduler.baselrscheduler method)": [[51, "optim.scheduler.base_scheduler.BaseLRScheduler.update_lr"]], "jsonvalidator (class in options.parse_args)": [[52, "options.parse_args.JsonValidator"]], "parsekwargs (class in options.opts)": [[52, "options.opts.ParseKwargs"]], "unrecognizedyamlconfigentry": [[52, "options.errors.UnrecognizedYamlConfigEntry"]], "__init__() (options.errors.unrecognizedyamlconfigentry method)": [[52, "options.errors.UnrecognizedYamlConfigEntry.__init__"]], "__init__() (options.parse_args.jsonvalidator method)": [[52, "options.parse_args.JsonValidator.__init__"]], "arguments_common() (in module options.opts)": [[52, "options.opts.arguments_common"]], "arguments_ddp() (in module options.opts)": [[52, "options.opts.arguments_ddp"]], "extend_selected_args_with_prefix() (in module options.utils)": [[52, "options.utils.extend_selected_args_with_prefix"]], "extract_opts_with_prefix_replacement() (in module options.utils)": [[52, "options.utils.extract_opts_with_prefix_replacement"]], "flatten_yaml_as_dict() (in module options.utils)": [[52, "options.utils.flatten_yaml_as_dict"]], "get_benchmarking_arguments() (in module options.opts)": [[52, "options.opts.get_benchmarking_arguments"]], "get_conversion_arguments() (in module options.opts)": [[52, "options.opts.get_conversion_arguments"]], "get_eval_arguments() (in module options.opts)": [[52, "options.opts.get_eval_arguments"]], "get_loss_landscape_args() (in module options.opts)": [[52, "options.opts.get_loss_landscape_args"]], "get_training_arguments() (in module options.opts)": [[52, "options.opts.get_training_arguments"]], "load_config_file() (in module options.utils)": [[52, "options.utils.load_config_file"]], "options": [[52, "module-options"]], "options.errors": [[52, "module-options.errors"]], "options.opts": [[52, "module-options.opts"]], "options.parse_args": [[52, "module-options.parse_args"]], "options.utils": [[52, "module-options.utils"]], "parse_validation_metric_names() (in module options.parse_args)": [[52, "options.parse_args.parse_validation_metric_names"]], "parser_to_opts() (in module options.opts)": [[52, "options.opts.parser_to_opts"]], "colormap (class in utils.color_map)": [[53, "utils.color_map.Colormap"]], "registry (class in utils.registry)": [[53, "utils.registry.Registry"]], "__init__() (utils.color_map.colormap method)": [[53, "utils.color_map.Colormap.__init__"]], "__init__() (utils.registry.registry method)": [[53, "utils.registry.Registry.__init__"]], "all_arguments() (utils.registry.registry method)": [[53, "utils.registry.Registry.all_arguments"]], "all_gather_list() (in module utils.tensor_utils)": [[53, "utils.tensor_utils.all_gather_list"]], "apply_recursively() (in module utils.object_utils)": [[53, "utils.object_utils.apply_recursively"]], "assertion_check() (in module utils.pytorch_to_coreml)": [[53, "utils.pytorch_to_coreml.assertion_check"]], "average_ckpts() (in module utils.checkpoint_utils)": [[53, "utils.checkpoint_utils.average_ckpts"]], "avg_and_save_k_checkpoints() (in module utils.checkpoint_utils)": [[53, "utils.checkpoint_utils.avg_and_save_k_checkpoints"]], "bound_fn() (in module utils.math_utils)": [[53, "utils.math_utils.bound_fn"]], "check_compatibility() (in module utils.common_utils)": [[53, "utils.common_utils.check_compatibility"]], "check_frozen_norm_layer() (in module utils.common_utils)": [[53, "utils.common_utils.check_frozen_norm_layer"]], "color_text() (in module utils.logger)": [[53, "utils.logger.color_text"]], "convert_pytorch_to_coreml() (in module utils.pytorch_to_coreml)": [[53, "utils.pytorch_to_coreml.convert_pytorch_to_coreml"]], "convert_to_cityscape_format() (in module utils.visualization_utils)": [[53, "utils.visualization_utils.convert_to_cityscape_format"]], "copy_weights() (in module utils.checkpoint_utils)": [[53, "utils.checkpoint_utils.copy_weights"]], "cpu_count() (in module utils.resources)": [[53, "utils.resources.cpu_count"]], "create_colored_mask() (in module utils.visualization_utils)": [[53, "utils.visualization_utils.create_colored_mask"]], "create_directories() (in module utils.common_utils)": [[53, "utils.common_utils.create_directories"]], "create_rand_tensor() (in module utils.tensor_utils)": [[53, "utils.tensor_utils.create_rand_tensor"]], "debug() (in module utils.logger)": [[53, "utils.logger.debug"]], "device_setup() (in module utils.common_utils)": [[53, "utils.common_utils.device_setup"]], "disable_printing() (in module utils.logger)": [[53, "utils.logger.disable_printing"]], "dist_barrier() (in module utils.ddp_utils)": [[53, "utils.ddp_utils.dist_barrier"]], "dist_monitored_barrier() (in module utils.ddp_utils)": [[53, "utils.ddp_utils.dist_monitored_barrier"]], "distributed_init() (in module utils.ddp_utils)": [[53, "utils.ddp_utils.distributed_init"]], "double_dash_line() (in module utils.logger)": [[53, "utils.logger.double_dash_line"]], "draw_bounding_boxes() (in module utils.visualization_utils)": [[53, "utils.visualization_utils.draw_bounding_boxes"]], "enable_printing() (in module utils.logger)": [[53, "utils.logger.enable_printing"]], "error() (in module utils.logger)": [[53, "utils.logger.error"]], "filter_keys() (in module utils.dict_utils)": [[53, "utils.dict_utils.filter_keys"]], "flatten_to_dict() (in module utils.object_utils)": [[53, "utils.object_utils.flatten_to_dict"]], "gather_all_features() (in module utils.tensor_utils)": [[53, "utils.tensor_utils.gather_all_features"]], "get_basic_local_path() (in module utils.download_utils_base)": [[53, "utils.download_utils_base.get_basic_local_path"]], "get_bit_at_idx() (utils.color_map.colormap static method)": [[53, "utils.color_map.Colormap.get_bit_at_idx"]], "get_box_color_codes() (utils.color_map.colormap method)": [[53, "utils.color_map.Colormap.get_box_color_codes"]], "get_color_map() (utils.color_map.colormap method)": [[53, "utils.color_map.Colormap.get_color_map"]], "get_color_map_list() (utils.color_map.colormap method)": [[53, "utils.color_map.Colormap.get_color_map_list"]], "get_curr_time_stamp() (in module utils.logger)": [[53, "utils.logger.get_curr_time_stamp"]], "get_model_state_dict() (in module utils.checkpoint_utils)": [[53, "utils.checkpoint_utils.get_model_state_dict"]], "get_node_rank() (in module utils.ddp_utils)": [[53, "utils.ddp_utils.get_node_rank"]], "get_training_state() (in module utils.checkpoint_utils)": [[53, "utils.checkpoint_utils.get_training_state"]], "get_world_size() (in module utils.ddp_utils)": [[53, "utils.ddp_utils.get_world_size"]], "ignore_exception_with_warning() (in module utils.logger)": [[53, "utils.logger.ignore_exception_with_warning"]], "image_size_from_opts() (in module utils.tensor_utils)": [[53, "utils.tensor_utils.image_size_from_opts"]], "import_modules_from_folder() (in module utils.import_utils)": [[53, "utils.import_utils.import_modules_from_folder"]], "info() (in module utils.logger)": [[53, "utils.logger.info"]], "is_coreml_conversion() (in module utils.common_utils)": [[53, "utils.common_utils.is_coreml_conversion"]], "is_iterable() (in module utils.object_utils)": [[53, "utils.object_utils.is_iterable"]], "is_master() (in module utils.ddp_utils)": [[53, "utils.ddp_utils.is_master"]], "is_pytest_environment() (in module utils.object_utils)": [[53, "utils.object_utils.is_pytest_environment"]], "is_start_rank_node() (in module utils.ddp_utils)": [[53, "utils.ddp_utils.is_start_rank_node"]], "items() (utils.registry.registry method)": [[53, "utils.registry.Registry.items"]], "keys() (utils.registry.registry method)": [[53, "utils.registry.Registry.keys"]], "load_checkpoint() (in module utils.checkpoint_utils)": [[53, "utils.checkpoint_utils.load_checkpoint"]], "load_model_state() (in module utils.checkpoint_utils)": [[53, "utils.checkpoint_utils.load_model_state"]], "load_state_dict() (in module utils.checkpoint_utils)": [[53, "utils.checkpoint_utils.load_state_dict"]], "log() (in module utils.logger)": [[53, "utils.logger.log"]], "make_divisible() (in module utils.math_utils)": [[53, "utils.math_utils.make_divisible"]], "move_to_device() (in module utils.common_utils)": [[53, "utils.common_utils.move_to_device"]], "parse_key() (utils.registry.registry method)": [[53, "utils.registry.Registry.parse_key"]], "print_header() (in module utils.logger)": [[53, "utils.logger.print_header"]], "print_header_minor() (in module utils.logger)": [[53, "utils.logger.print_header_minor"]], "reduce_tensor() (in module utils.tensor_utils)": [[53, "utils.tensor_utils.reduce_tensor"]], "reduce_tensor_sum() (in module utils.tensor_utils)": [[53, "utils.tensor_utils.reduce_tensor_sum"]], "register() (utils.registry.registry method)": [[53, "utils.registry.Registry.register"]], "save_checkpoint() (in module utils.checkpoint_utils)": [[53, "utils.checkpoint_utils.save_checkpoint"]], "save_interval_checkpoint() (in module utils.checkpoint_utils)": [[53, "utils.checkpoint_utils.save_interval_checkpoint"]], "singe_dash_line() (in module utils.logger)": [[53, "utils.logger.singe_dash_line"]], "tensor_to_python_float() (in module utils.tensor_utils)": [[53, "utils.tensor_utils.tensor_to_python_float"]], "test_apply_on_values() (in module utils.object_utils_test)": [[53, "utils.object_utils_test.test_apply_on_values"]], "test_basic_registration() (in module utils.registry_test)": [[53, "utils.registry_test.test_basic_registration"]], "test_flatten_to_dict() (in module utils.object_utils_test)": [[53, "utils.object_utils_test.test_flatten_to_dict"]], "test_functional_registry() (in module utils.registry_test)": [[53, "utils.registry_test.test_functional_registry"]], "to_numpy() (in module utils.tensor_utils)": [[53, "utils.tensor_utils.to_numpy"]], "unwrap_model_fn() (in module utils.common_utils)": [[53, "utils.common_utils.unwrap_model_fn"]], "utils": [[53, "module-utils"]], "utils.checkpoint_utils": [[53, "module-utils.checkpoint_utils"]], "utils.color_map": [[53, "module-utils.color_map"]], "utils.common_utils": [[53, "module-utils.common_utils"]], "utils.ddp_utils": [[53, "module-utils.ddp_utils"]], "utils.dict_utils": [[53, "module-utils.dict_utils"]], "utils.download_utils": [[53, "module-utils.download_utils"]], "utils.download_utils_base": [[53, "module-utils.download_utils_base"]], "utils.import_utils": [[53, "module-utils.import_utils"]], "utils.logger": [[53, "module-utils.logger"]], "utils.math_utils": [[53, "module-utils.math_utils"]], "utils.object_utils": [[53, "module-utils.object_utils"]], "utils.object_utils_test": [[53, "module-utils.object_utils_test"]], "utils.pytorch_to_coreml": [[53, "module-utils.pytorch_to_coreml"]], "utils.registry": [[53, "module-utils.registry"]], "utils.registry_test": [[53, "module-utils.registry_test"]], "utils.resources": [[53, "module-utils.resources"]], "utils.tensor_utils": [[53, "module-utils.tensor_utils"]], "utils.visualization_utils": [[53, "module-utils.visualization_utils"]], "video_size_from_opts() (in module utils.tensor_utils)": [[53, "utils.tensor_utils.video_size_from_opts"]], "visualize_boxes_xyxy() (in module utils.visualization_utils)": [[53, "utils.visualization_utils.visualize_boxes_xyxy"]], "warning() (in module utils.logger)": [[53, "utils.logger.warning"]], "all_gather() (in module utils.third_party.ddp_functional_utils)": [[54, "utils.third_party.ddp_functional_utils.all_gather"]], "all_reduce() (in module utils.third_party.ddp_functional_utils)": [[54, "utils.third_party.ddp_functional_utils.all_reduce"]], "all_to_all() (in module utils.third_party.ddp_functional_utils)": [[54, "utils.third_party.ddp_functional_utils.all_to_all"]], "all_to_all_single() (in module utils.third_party.ddp_functional_utils)": [[54, "utils.third_party.ddp_functional_utils.all_to_all_single"]], "broadcast() (in module utils.third_party.ddp_functional_utils)": [[54, "utils.third_party.ddp_functional_utils.broadcast"]], "gather() (in module utils.third_party.ddp_functional_utils)": [[54, "utils.third_party.ddp_functional_utils.gather"]], "reduce() (in module utils.third_party.ddp_functional_utils)": [[54, "utils.third_party.ddp_functional_utils.reduce"]], "reduce_scatter() (in module utils.third_party.ddp_functional_utils)": [[54, "utils.third_party.ddp_functional_utils.reduce_scatter"]], "scatter() (in module utils.third_party.ddp_functional_utils)": [[54, "utils.third_party.ddp_functional_utils.scatter"]], "utils.third_party": [[54, "module-utils.third_party"]], "utils.third_party.ddp_functional_utils": [[54, "module-utils.third_party.ddp_functional_utils"]]}})